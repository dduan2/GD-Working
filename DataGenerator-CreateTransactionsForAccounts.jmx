<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="DataGenerator-CreateTransactionsForAccounts" enabled="true">
      <stringProp name="TestPlan.comments">${__P(MqHdrOwnerLevel, BS001)}
${__P(ProductCode,S50001)}
${__P(ProgramCode,stash)}
AccountBalanceType: 1,  spend, 2, non-spend
gbr;S40002;GZ001</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ProgramCode" elementType="Argument">
            <stringProp name="Argument.name">ProgramCode</stringProp>
            <stringProp name="Argument.value">${__P(ProgramCode,gbr)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProductCode" elementType="Argument">
            <stringProp name="Argument.name">ProductCode</stringProp>
            <stringProp name="Argument.value">${__P(ProductCode,S40002)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MqHdrOwnerLevel" elementType="Argument">
            <stringProp name="Argument.name">MqHdrOwnerLevel</stringProp>
            <stringProp name="Argument.value">${__P(MqHdrOwnerLevel,GZ001)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="StartDate" elementType="Argument">
            <stringProp name="Argument.name">StartDate</stringProp>
            <stringProp name="Argument.value">${__P(StartDate,2020-11-18 00:00:00.000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EndDate" elementType="Argument">
            <stringProp name="Argument.name">EndDate</stringProp>
            <stringProp name="Argument.value">${__P(EndDate,2021-12-25 00:32:00.000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RootDataDirectory" elementType="Argument">
            <stringProp name="Argument.name">RootDataDirectory</stringProp>
            <stringProp name="Argument.value">${__P(RootDataDirectory, C:\Performance\data)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NUMBER_OF_ACCOUNTS" elementType="Argument">
            <stringProp name="Argument.name">NUMBER_OF_ACCOUNTS</stringProp>
            <stringProp name="Argument.value">${__P(NUMBER_OF_ACCOUNTS,100000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RESULT_FILE_NAME" elementType="Argument">
            <stringProp name="Argument.name">RESULT_FILE_NAME</stringProp>
            <stringProp name="Argument.value">${__P(ResultFileName, CardProxiesForSimTran)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WORKSPACE_PATH" elementType="Argument">
            <stringProp name="Argument.name">WORKSPACE_PATH</stringProp>
            <stringProp name="Argument.value">${__P(WorkspacePath,C:\QA\Performance\Jmeter\GBOS\DataGenerator)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IN_AUTH" elementType="Argument">
            <stringProp name="Argument.name">IN_AUTH</stringProp>
            <stringProp name="Argument.value">${__P(IN_AUTH, Basic Y2xpZW50MjpzZWNyZXQy)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Duration" elementType="Argument">
            <stringProp name="Argument.name">Duration</stringProp>
            <stringProp name="Argument.value">${__P(Duration,2400)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ThreadCount" elementType="Argument">
            <stringProp name="Argument.name">ThreadCount</stringProp>
            <stringProp name="Argument.value">${__P(ThreadCount,15)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LoopCount" elementType="Argument">
            <stringProp name="Argument.name">LoopCount</stringProp>
            <stringProp name="Argument.value">${__P(LoopCount,10000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AccountBalanceType" elementType="Argument">
            <stringProp name="Argument.name">AccountBalanceType</stringProp>
            <stringProp name="Argument.value">${__P(AccountBalanceType,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OpenAuth_FILE_NAME" elementType="Argument">
            <stringProp name="Argument.name">OpenAuth_FILE_NAME</stringProp>
            <stringProp name="Argument.value">${__P(OpenAuth_FILE_NAME, CardProxiesForSimTran.csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MinAccountKey" elementType="Argument">
            <stringProp name="Argument.name">MinAccountKey</stringProp>
            <stringProp name="Argument.value">${__P(MinAccountKey,25045422)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MaxAccountKey" elementType="Argument">
            <stringProp name="Argument.name">MaxAccountKey</stringProp>
            <stringProp name="Argument.value">${__P(MaxAccountKey,25595422)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="GBOS Variable" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BOS_DATABASE" elementType="Argument">
            <stringProp name="Argument.name">BOS_DATABASE</stringProp>
            <stringProp name="Argument.value">pfbosdbag.awsnp.gdotawsnp.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OAUTH_API" elementType="Argument">
            <stringProp name="Argument.name">OAUTH_API</stringProp>
            <stringProp name="Argument.value">https://bospart.prf.uw2.gdotawsnp.com/baas/v1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CORE_API" elementType="Argument">
            <stringProp name="Argument.name">CORE_API</stringProp>
            <stringProp name="Argument.value">https://boscore.prf.uw2.gdotawsnp.com/CoreApi/v1/programs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PARTNER_API" elementType="Argument">
            <stringProp name="Argument.name">PARTNER_API</stringProp>
            <stringProp name="Argument.value">https://bospart.prf.uw2.gdotawsnp.com/baas/v1/programs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CRYPTO_API" elementType="Argument">
            <stringProp name="Argument.name">CRYPTO_API</stringProp>
            <stringProp name="Argument.value">https://boscryt.prf.uw2.gdotawsnp.com/Crypto/V1/encrypt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SimulatorTools_Server" elementType="Argument">
            <stringProp name="Argument.name">SimulatorTools_Server</stringProp>
            <stringProp name="Argument.value">https://gdqatools/GDQATools/GDQA_IPSMQSimulator_Bos/IPSMQSimulatorService.svc</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">on-prem simulator tools endpoint</stringProp>
          </elementProp>
          <elementProp name="Minimum" elementType="Argument">
            <stringProp name="Argument.name">Minimum</stringProp>
            <stringProp name="Argument.value">300</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Maxmum" elementType="Argument">
            <stringProp name="Argument.name">Maxmum</stringProp>
            <stringProp name="Argument.value">350</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">https://gdqatools/GDQATools/GDQA_IPSMQSimulator_Bos/IPSMQSimulatorService.svc
G1PFBOSDB01
 qatool.pie.uw2.gdotawsnp.com
</stringProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="BOS GBOS DB Connection" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">GBOS</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${BOS_DATABASE}:1433;databaseName=GBOS</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">G33Nff4%$^</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">qa_automation</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC Get Partner AccountIdentifier" enabled="true">
        <stringProp name="dataSource">GBOS</stringProp>
        <stringProp name="query">select top 1 a.accountIdentifier from Account a
inner join Product p
on a.Productkey=p.productkey
where p.Productcode=&apos;59000&apos;</stringProp>
        <stringProp name="queryArguments"></stringProp>
        <stringProp name="queryArgumentsTypes"></stringProp>
        <stringProp name="queryTimeout">5</stringProp>
        <stringProp name="queryType">Select Statement</stringProp>
        <stringProp name="resultSetHandler">Store as String</stringProp>
        <stringProp name="resultVariable"></stringProp>
        <stringProp name="variableNames">PartnerAccountIdentifer</stringProp>
        <stringProp name="resultSetMaxRows"></stringProp>
      </JDBCPreProcessor>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp-Generate AuthToken" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${__UUID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Extract AccessToken" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper

def jsonSlurper = new JsonSlurper();
def response = jsonSlurper.parseText(prev.getResponseDataAsString());
def token = response.access_token.toString();
log.info(token);
props.put(&quot;accessToken&quot;,token);</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Cleanup existing files-All" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Delete existing file-1" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;


try{
	File file = new File(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator + &quot;${RESULT_FILE_NAME}_${ProgramCode}.csv&quot;);
	file.delete();

	List files = FileUtils.listFiles(new File(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator + &quot;SplitFiles&quot;), new String[]{&quot;csv&quot;}, true);
	for (File file : files) {
		file.delete();
	}
}
catch (Throwable ex)
{
	log.error(&quot;Error in Cleanup existing files&quot;, ex);
	throw ex;
}
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Delete existing file" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

log.info(FileServer.getFileServer().getBaseDir());

try{
	List files = FileUtils.listFiles(new File(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator + &quot;multi-thread&quot;), new String[]{&quot;csv&quot;}, true);
	for (File file : files) {
		file.delete();
	}
}
catch (Throwable ex)
{
	log.error(&quot;Error in Cleanup existing files&quot;, ex);
	throw ex;
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GetAccountToSimTrans" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">
--Select top ${NUMBER_OF_ACCOUNTS}  RTRIM(AccountBalanceExternalProxy) as AccountBalanceExternalProxy, 
--RTRIM(PaymentIdentifierProxy) as PaymentIdentifierProxy, a.AccountIdentifier
--From AccountBalance As ab with(nolock)
--inner Join Account As a with(nolock)
--On ab.AccountKey = a.AccountKey
--INNER JOIN Product AS p with(nolock)
--ON p.ProductKey=a.ProductKey
--inner Join AccountHolder As ah with(nolock)
--On ah.AccountKey = a.AccountKey
--inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
--On ahpi.AccountHolderKey = ah.AccountHolderKey
--inner Join PaymentIdentifier As pid with(nolock)
--On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
--where p.ProductCode=&apos;${ProductCode}&apos;
--and  ab.AvailableBalance&gt;1
--and a.CreateDate BETWEEN &apos;${StartDate}&apos; and &apos;${EndDate}&apos;

--distinct
Select  top ${NUMBER_OF_ACCOUNTS} RTRIM(AccountBalanceExternalProxy) as AccountBalanceExternalProxy, 
RTRIM(PaymentIdentifierProxy) as PaymentIdentifierProxy, a.AccountIdentifier, ab.AccountBalanceIdentifier
From AccountBalance As ab with(nolock)
inner Join Account As a with(nolock)
On ab.AccountKey = a.AccountKey
INNER JOIN Product AS p with(nolock)
ON p.ProductKey=a.ProductKey
INNER JOIN AccountBillCycle abc with (NOLOCK) 
ON abc.AccountKey = a.AccountKey
inner Join AccountHolder As ah with(nolock)
On ah.AccountKey = a.AccountKey
inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
On ahpi.AccountHolderKey = ah.AccountHolderKey
inner Join PaymentIdentifier As pid with(nolock)
On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
--inner join PostTransaction PIT with(NOLOCK) 
--ON PIT.AccountIdentifier = A.AccountIdentifier
where p.ProductCode=&apos;${ProductCode}&apos;
and  ab.AvailableBalance&gt;=0
and a.AccountStatusKey=2
--and abc.ActivationDate &lt; GETDATE()-35
--and PIT.ProcessorBusinessDate &gt; GETDATE()-30 and PIT.ProcessorBusinessDate &lt; GETDATE()-4
--and a.CreateDate=&apos;2018-10-29 01:34:30.620&apos;
and  a.CreateDate &lt; getDate()-4
and ab.AvailableBalanceAsOfDate &lt; getDate()-4
and ab.LedgerBalanceAsOfDate &lt; getDate()-4
and a.CreateDate BETWEEN &apos;${StartDate}&apos; and &apos;${EndDate}&apos;
and ab.AccountBalanceTypeKey  in (1,2)
--and ab.AccountBalanceTypeKey = ${AccountBalanceType}
--order by newid() desc

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,AccountBalanceIdentifier</stringProp>
          <stringProp name="resultVariable">AccountList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db - estatement" enabled="false">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">
Select distinct TOP  ${NUMBER_OF_ACCOUNTS} RTRIM(AccountBalanceExternalProxy) as AccountBalanceExternalProxy, 
RTRIM(PaymentIdentifierProxy) as PaymentIdentifierProxy, a.AccountIdentifier
From AccountBalance As ab with(nolock)
inner Join Account As a with(nolock)
On ab.AccountKey = a.AccountKey
INNER JOIN Product AS p with(nolock)
ON p.ProductKey=a.ProductKey
INNER JOIN AccountBillCycle abc with (NOLOCK) 
ON abc.AccountKey = a.AccountKey
inner Join AccountHolder As ah with(nolock)
On ah.AccountKey = a.AccountKey
inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
On ahpi.AccountHolderKey = ah.AccountHolderKey
inner Join PaymentIdentifier As pid with(nolock)
On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
inner join PostTransaction PIT with(NOLOCK) 
ON PIT.AccountIdentifier = A.AccountIdentifier
where p.ProductCode=&apos;${ProductCode}&apos;
and  ab.AvailableBalance&gt;1
--and abc.ActivationDate &lt; GETDATE()-33
--and PIT.ProcessorBusinessDate &gt; GETDATE()-30 and PIT.ProcessorBusinessDate &lt; GETDATE()-4
and A.Accountkey&gt;${MinAccountKey}
and A.Accountkey&lt;${MaxAccountKey}
--order by A.accountKey asc
--and a.CreateDate=&apos;2018-10-29 01:34:30.620&apos;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier</stringProp>
          <stringProp name="resultVariable">AccountList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

// initialize a Random object somewhere; you should only need one
Random random = new Random();

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}_${ProgramCode}.csv&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{
	int amount = random.nextInt(100) + 10;
	fstream.write(row.get(&quot;AccountBalanceExternalProxy&quot;) +  &quot;,&quot; + row.get(&quot;PaymentIdentifierProxy&quot;) + &quot;,&quot; + row.get(&quot;AccountIdentifier&quot;) +&quot;,&quot;+ amount + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
 </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Data Splitter Execution" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\GDQA_PerfDataSplitter\GDQA_PerfDataSplitter.exe</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\SplitFiles</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="LoopCopy" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get current index" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

try{
	log.info(&quot;Current count:&quot; + String.valueOf(${__jm__LoopCopy__idx}+1));
	vars.put(&quot;CurrentIndex&quot;, String.valueOf(${__jm__LoopCopy__idx}+1));
	vars.put(&quot;CurrentRemoteServerIndex&quot;, String.valueOf(${__jm__LoopCopy__idx}+2));
}
catch (Throwable ex)
{
	log.error(&quot;Error in Get-current-index script&quot;, ex);
	throw ex;
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder" enabled="true">
            <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
            <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
            <stringProp name="SystemSampler.command">cmd.exe</stringProp>
            <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">/c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">copy /b /y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">.\\${CurrentIndex}\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">\\\\g1pfbosload0${CurrentRemoteServerIndex}\\data\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\SplitFiles</stringProp>
          </SystemSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Cleanup existing files-BUX-Remote" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Delete existing file-1" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;


try{
	File file = new File(vars.get (&quot;RootDataDirectory&quot;) + File.separator + &quot;${RESULT_FILE_NAME}&quot;);
	file.delete();

//	List files = FileUtils.listFiles(new File(vars.get (&quot;RootDataDirectory&quot;) + File.separator + &quot;SplitFiles&quot;), new String[]{&quot;csv&quot;}, true);
//	for (File file : files) {
//		file.delete();
//	}
}
catch (Throwable ex)
{
	log.error(&quot;Error in Cleanup existing files&quot;, ex);
	throw ex;
}
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GetAccountProxyToSimTrans-BUX-Remote" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\user-from-db.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountIdentifier,username</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">
--Select top ${NUMBER_OF_ACCOUNTS}  RTRIM(AccountBalanceExternalProxy) as AccountBalanceExternalProxy, 
--RTRIM(PaymentIdentifierProxy) as PaymentIdentifierProxy, a.AccountIdentifier
--From AccountBalance As ab with(nolock)
--inner Join Account As a with(nolock)
--On ab.AccountKey = a.AccountKey
--INNER JOIN Product AS p with(nolock)
--ON p.ProductKey=a.ProductKey
--inner Join AccountHolder As ah with(nolock)
--On ah.AccountKey = a.AccountKey
--inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
--On ahpi.AccountHolderKey = ah.AccountHolderKey
--inner Join PaymentIdentifier As pid with(nolock)
--On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
--where p.ProductCode=&apos;${ProductCode}&apos;
--and  ab.AvailableBalance&gt;1
--and a.CreateDate BETWEEN &apos;${StartDate}&apos; and &apos;${EndDate}&apos;

--distinct
Select  top ${NUMBER_OF_ACCOUNTS} RTRIM(AccountBalanceExternalProxy) as AccountBalanceExternalProxy, 
RTRIM(PaymentIdentifierProxy) as PaymentIdentifierProxy, a.AccountIdentifier, ab.AccountBalanceIdentifier
From AccountBalance As ab with(nolock)
inner Join Account As a with(nolock)
On ab.AccountKey = a.AccountKey
INNER JOIN Product AS p with(nolock)
ON p.ProductKey=a.ProductKey
INNER JOIN AccountBillCycle abc with (NOLOCK) 
ON abc.AccountKey = a.AccountKey
inner Join AccountHolder As ah with(nolock)
On ah.AccountKey = a.AccountKey
inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
On ahpi.AccountHolderKey = ah.AccountHolderKey
inner Join PaymentIdentifier As pid with(nolock)
On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
--inner join PostTransaction PIT with(NOLOCK) 
--ON PIT.AccountIdentifier = A.AccountIdentifier
where 
a.AccountIdentifier=&apos;${AccountIdentifier}&apos;
--p.ProductCode=&apos;${ProductCode}&apos;
--and  ab.AvailableBalance&gt;=0
--and a.AccountStatusKey=2
----and abc.ActivationDate &lt; GETDATE()-35
----and PIT.ProcessorBusinessDate &gt; GETDATE()-30 and PIT.ProcessorBusinessDate &lt; GETDATE()-4
----and a.CreateDate=&apos;2018-10-29 01:34:30.620&apos;
--and  a.CreateDate &lt; getDate()-4
--and ab.AvailableBalanceAsOfDate &lt; getDate()-4
--and ab.LedgerBalanceAsOfDate &lt; getDate()-4
----and a.CreateDate BETWEEN &apos;${StartDate}&apos; and &apos;${EndDate}&apos;
--and ab.AccountBalanceTypeKey  in (1,2)
----and ab.AccountBalanceTypeKey = ${AccountBalanceType}
--order by newid() desc

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,AccountBalanceIdentifier</stringProp>
          <stringProp name="resultVariable">AccountList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db - estatement" enabled="false">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">
Select TOP  ${NUMBER_OF_ACCOUNTS} RTRIM(AccountBalanceExternalProxy) as AccountBalanceExternalProxy, 
RTRIM(PaymentIdentifierProxy) as PaymentIdentifierProxy, a.AccountIdentifier
From AccountBalance As ab with(nolock)
inner Join Account As a with(nolock)
On ab.AccountKey = a.AccountKey
INNER JOIN Product AS p with(nolock)
ON p.ProductKey=a.ProductKey
INNER JOIN AccountBillCycle abc with (NOLOCK) 
ON abc.AccountKey = a.AccountKey
inner Join AccountHolder As ah with(nolock)
On ah.AccountKey = a.AccountKey
inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
On ahpi.AccountHolderKey = ah.AccountHolderKey
inner Join PaymentIdentifier As pid with(nolock)
On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
inner join PostTransaction PIT with(NOLOCK) 
ON PIT.AccountIdentifier = A.AccountIdentifier
where p.ProductCode=&apos;${ProductCode}&apos;
and  ab.AvailableBalance&gt;1
and abc.ActivationDate &lt; GETDATE()-33
and PIT.ProcessorBusinessDate &gt; GETDATE()-30 and PIT.ProcessorBusinessDate &lt; GETDATE()-4
--and a.CreateDate=&apos;2018-10-29 01:34:30.620&apos;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier</stringProp>
          <stringProp name="resultVariable">AccountList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

// initialize a Random object somewhere; you should only need one
Random random = new Random();

FileWriter fstream = new FileWriter(vars.get (&quot;RootDataDirectory&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}_${ProgramCode}.csv&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{
	int amount = random.nextInt(100) + 10;
	fstream.write(row.get(&quot;AccountBalanceExternalProxy&quot;) +  &quot;,&quot; + row.get(&quot;PaymentIdentifierProxy&quot;) + &quot;,&quot; + row.get(&quot;AccountIdentifier&quot;) +&quot;,&quot;+ amount +&quot;,&quot; +row.get(&quot;AccountBalanceIdentifier&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
 </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group-SetWebhookConfig" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="PartnerAPI_IP1" elementType="Argument">
              <stringProp name="Argument.name">PartnerAPI_IP1</stringProp>
              <stringProp name="Argument.value">https://10.67.76.186/BaaS/v1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PartnerAPI_IP2" elementType="Argument">
              <stringProp name="Argument.name">PartnerAPI_IP2</stringProp>
              <stringProp name="Argument.value">https://10.67.134.235/BaaS/v1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Min" elementType="Argument">
              <stringProp name="Argument.name">Min</stringProp>
              <stringProp name="Argument.value">300</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Max" elementType="Argument">
              <stringProp name="Argument.name">Max</stringProp>
              <stringProp name="Argument.value">350</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth-Node1" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PartnerAPI_IP1}/authentication</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${IN_AUTH}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${__UUID}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">access_token1;token_type;expires_in;scope</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token;$.token_type;$.expires_in;$.scope</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set TestEventWebhookConfig API-node-1" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;minimum&quot;: ${Min}, &#xd;
   &quot;maximum&quot;: ${Max}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PartnerAPI_IP1}/programs/${ProgramCode}/testeventwebhooksetconfig</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token1}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${__UUID}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth-Node2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PartnerAPI_IP1}/authentication</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${IN_AUTH}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${__UUID}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">access_token2;token_type;expires_in;scope</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token;$.token_type;$.expires_in;$.scope</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set TestEventWebhookConfig API-node-2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;minimum&quot;: ${Min}, &#xd;
   &quot;maximum&quot;: ${Max}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PartnerAPI_IP2}/programs/${ProgramCode}/testeventwebhooksetconfig</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token2}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${__UUID}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AuthTransaction-APV" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${ThreadCount}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">SOAPAction</stringProp>
              <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutAuthMessage&quot; </stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,AuTrAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutAuthMessage" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutAuthMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AuATm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuADt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCrdAccptId&gt;Non Us Domestic&lt;/v11:AuCrdAccptId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrZipCd&gt;91107&lt;/v11:AuMrZipCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCntryCd&gt;USA&lt;/v11:AuMrCntryCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCatgCd&gt;0763&lt;/v11:AuMrCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFgnExpIn&gt;D&lt;/v11:AuFgnExpIn&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAStCd&gt;CA&lt;/v11:AuAStCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuACrdExpDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P1461D,,)}&lt;/v11:AuACrdExpDt&gt;&#xd;
            &lt;v11:AuATrTermId&gt;FLPBLX1028&lt;/v11:AuATrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuOfflnAcsCd&gt;1&lt;/v11:AuOfflnAcsCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuARespCd&gt;APV&lt;/v11:AuARespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrAm&gt;${AuTrAm}&lt;/v11:AuTrAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCurCd&gt;USD&lt;/v11:AuCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnOrigAm&gt;${AuTrAm}&lt;/v11:AuTxnOrigAm&gt;&#xd;
            &lt;v11:AuTrDs&gt;PTS MTF TEST\\Pasadena&lt;/v11:AuTrDs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaRespCd&gt;000&lt;/v11:AuVisaRespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrTm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrTm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRespApvlCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuRespApvlCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAdVerfRsltCd&gt;8&lt;/v11:AuAdVerfRsltCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAUcsEffDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuAUcsEffDt&gt;&#xd;
            &lt;v11:AuTxnStatIn&gt;I&lt;/v11:AuTxnStatIn&gt;&#xd;
            &lt;v11:AuUcsTxnCd&gt;1035&lt;/v11:AuUcsTxnCd&gt;&#xd;
            &lt;v11:AuTxnCatgCd&gt;0763&lt;/v11:AuTxnCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCsbkAm&gt;1&lt;/v11:AuCsbkAm&gt;&#xd;
            &lt;v11:AuMsgTypeCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuPrgDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P14D,,)}&lt;/v11:AuPrgDt&gt;&#xd;
            &lt;v11:AuPosDa&gt;00010170000J&lt;/v11:AuPosDa&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAppTxnCt&gt;8&lt;/v11:AuAppTxnCt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuStipRsnCd&gt;8&lt;/v11:AuStipRsnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee1Am&gt;1&lt;/v11:AuFee1Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn1Cd&gt;5005&lt;/v11:AuFeeTxn1Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee2Am&gt;3&lt;/v11:AuFee2Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn2Cd&gt;5005&lt;/v11:AuFeeTxn2Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee3Am&gt;5&lt;/v11:AuFee3Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn3Cd&gt;5005&lt;/v11:AuFeeTxn3Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee4Am&gt;8&lt;/v11:AuFee4Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn4Cd&gt;5005&lt;/v11:AuFeeTxn4Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee5Am&gt;13&lt;/v11:AuFee5Am&gt;&#xd;
            &lt;v11:AuFeeTxn5Cd&gt;5005&lt;/v11:AuFeeTxn5Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRqstdTxnAm&gt;${AuTrAm}&lt;/v11:AuRqstdTxnAm&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAcqNtwkId&gt;${__RandomString(3,0123456789,)}&lt;/v11:AuAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnSign&gt;DR&lt;/v11:AuTxnSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuObsDataCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuObsDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTknTxnId&gt;${__RandomString(9,0123456789,)}&lt;/v11:AuTknTxnId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaAuCharSw&gt;D&lt;/v11:AuVisaAuCharSw&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuIncrAuInd&gt;false&lt;/v11:AuIncrAuInd&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:IfGeneratePosted&gt;false&lt;/v11:IfGeneratePosted&gt;&#xd;
            &lt;v11:AuRskScrNum&gt;&lt;/v11:AuRskScrNum&gt;&#xd;
            &lt;v11:AuPosEntModeCd&gt;&lt;/v11:AuPosEntModeCd&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;v11:AuRulAdjScrNum&gt;&lt;/v11:AuRulAdjScrNum&gt;&#xd;
            &lt;v11:De055Cvr&gt;&lt;/v11:De055Cvr&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
            &lt;v11:AvailBalSign&gt;&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:AvlBalOdThldSign&gt;&lt;/v11:AvlBalOdThldSign&gt;&#xd;
            &lt;v11:AuIsoProcCd&gt;DE3&lt;/v11:AuIsoProcCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutAuthMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AuthTransaction-Provision-MDES" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${ThreadCount}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">SOAPAction</stringProp>
              <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutAuthMessage&quot; </stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,AuTrAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutAuthMessage-MDES-MDESAUTH" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutAuthMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AuATm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuADt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCrdAccptId&gt;Non Us Domestic&lt;/v11:AuCrdAccptId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrZipCd&gt;91107&lt;/v11:AuMrZipCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCntryCd&gt;USA&lt;/v11:AuMrCntryCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCatgCd&gt;0763&lt;/v11:AuMrCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFgnExpIn&gt;D&lt;/v11:AuFgnExpIn&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAStCd&gt;CA&lt;/v11:AuAStCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuACrdExpDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P1461D,,)}&lt;/v11:AuACrdExpDt&gt;&#xd;
            &lt;v11:AuATrTermId&gt;FLPBLX1028&lt;/v11:AuATrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuOfflnAcsCd&gt;1&lt;/v11:AuOfflnAcsCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuARespCd&gt;APV&lt;/v11:AuARespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrAm&gt;${AuTrAm}&lt;/v11:AuTrAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCurCd&gt;USD&lt;/v11:AuCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnOrigAm&gt;${AuTrAm}&lt;/v11:AuTxnOrigAm&gt;&#xd;
            &lt;v11:AuTrDs&gt;PTS MTF TEST\\Pasadena&lt;/v11:AuTrDs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaRespCd&gt;000&lt;/v11:AuVisaRespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrTm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrTm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRespApvlCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuRespApvlCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAdVerfRsltCd&gt;8&lt;/v11:AuAdVerfRsltCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAUcsEffDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuAUcsEffDt&gt;&#xd;
            &lt;v11:AuTxnStatIn&gt;I&lt;/v11:AuTxnStatIn&gt;&#xd;
            &lt;v11:AuUcsTxnCd&gt;1035&lt;/v11:AuUcsTxnCd&gt;&#xd;
            &lt;v11:AuTxnCatgCd&gt;0763&lt;/v11:AuTxnCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCsbkAm&gt;1&lt;/v11:AuCsbkAm&gt;&#xd;
            &lt;v11:AuMsgTypeCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuPrgDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P14D,,)}&lt;/v11:AuPrgDt&gt;&#xd;
            &lt;v11:AuPosDa&gt;00010170000J&lt;/v11:AuPosDa&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAppTxnCt&gt;8&lt;/v11:AuAppTxnCt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuStipRsnCd&gt;8&lt;/v11:AuStipRsnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee1Am&gt;1&lt;/v11:AuFee1Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn1Cd&gt;5005&lt;/v11:AuFeeTxn1Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee2Am&gt;3&lt;/v11:AuFee2Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn2Cd&gt;5005&lt;/v11:AuFeeTxn2Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee3Am&gt;5&lt;/v11:AuFee3Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn3Cd&gt;5005&lt;/v11:AuFeeTxn3Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee4Am&gt;8&lt;/v11:AuFee4Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn4Cd&gt;5005&lt;/v11:AuFeeTxn4Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee5Am&gt;13&lt;/v11:AuFee5Am&gt;&#xd;
            &lt;v11:AuFeeTxn5Cd&gt;5005&lt;/v11:AuFeeTxn5Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRqstdTxnAm&gt;${AuTrAm}&lt;/v11:AuRqstdTxnAm&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAcqNtwkId&gt;${__RandomString(3,0123456789,)}&lt;/v11:AuAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnSign&gt;DR&lt;/v11:AuTxnSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuObsDataCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuObsDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTknTxnId&gt;${__RandomString(9,0123456789,)}&lt;/v11:AuTknTxnId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaAuCharSw&gt;D&lt;/v11:AuVisaAuCharSw&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuIncrAuInd&gt;false&lt;/v11:AuIncrAuInd&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:IfGeneratePosted&gt;false&lt;/v11:IfGeneratePosted&gt;&#xd;
            &lt;v11:AuRskScrNum&gt;&lt;/v11:AuRskScrNum&gt;&#xd;
            &lt;v11:AuPosEntModeCd&gt;&lt;/v11:AuPosEntModeCd&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;v11:AuRulAdjScrNum&gt;&lt;/v11:AuRulAdjScrNum&gt;&#xd;
            &lt;v11:De055Cvr&gt;&lt;/v11:De055Cvr&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
            &lt;v11:AvailBalSign&gt;&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:AvlBalOdThldSign&gt;&lt;/v11:AvlBalOdThldSign&gt;&#xd;
            &lt;v11:IpsTxnCatgCd&gt;MDESAUTH&lt;/v11:IpsTxnCatgCd&gt;&#xd;
            &lt;v11:AuIsoProcCd&gt;DE3&lt;/v11:AuIsoProcCd&gt;&#xd;
            &lt;v11:AuTknReqId&gt;40010030273&lt;/v11:AuTknReqId&gt;&#xd;
            &lt;v11:AuTknUnqRef&gt;${AuTknUnqRef}&lt;/v11:AuTknUnqRef&gt;&#xd;
            &lt;v11:AuPanUnqRef&gt;${AuPanUnqRef}&lt;/v11:AuPanUnqRef&gt;&#xd;
            &lt;v11:AuPmtActRefNum&gt;${AuPmtActRefNum}&lt;/v11:AuPmtActRefNum&gt;&#xd;
            &lt;v11:AuDpan&gt;${AuDpan}&lt;/v11:AuDpan&gt;&#xd;
            &lt;v11:AuTknEvntInd&gt;7&lt;/v11:AuTknEvntInd&gt;&#xd;
            &lt;v11:MdesDistChnlSelInd&gt;DE59&lt;/v11:MdesDistChnlSelInd&gt;&#xd;
            &lt;v11:AuVisaMsgRsnCd&gt;${AuVisaMsgRsnCd}&lt;/v11:AuVisaMsgRsnCd&gt;&#xd;
            &lt;v11:TokenUnqDvcId&gt;${TokenUnqDvcId}&lt;/v11:TokenUnqDvcId&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutAuthMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.commons.lang.RandomStringUtils;
import org.apache.commons.lang.StringEscapeUtils;
import java.lang.StringBuilder;

/*
	@By Vivian.Wu
	@Date 18/12/2012
	@Input
		-- Collection charSet; the input char collection
		-- int len; the output string length
	@Output
		-- A random string with the pointed length
	*/
	private String getRandomString(Collection charSet, int len){
		Collection charCollection = charSet.flatten()
		Random rand = new Random(System.currentTimeMillis())
		def randomChars = (0..len).collect { charCollection[rand.nextInt(charCollection.size())] }
		return randomChars.join()
	}
	
def AuTknUnqRef = &apos;DNITHE30190847&apos; + RandomStringUtils.randomNumeric(10)
def AuPanUnqRef = &apos;V-301908471055&apos; + RandomStringUtils.randomNumeric(10)
def AuPmtActRefNum = &apos;V001001301908471055&apos; + RandomStringUtils.randomNumeric(10)
def AuDpan = RandomStringUtils.randomNumeric(4)
def AuVisaMsgRsnCd = RandomStringUtils.randomNumeric(4)
def TokenUnqDvcId = getRandomString([&apos;0&apos;..&apos;9&apos;,&apos;A&apos;..&apos;F&apos;],47)

vars.put(&quot;TokenUnqDvcId&quot;,TokenUnqDvcId);
vars.put(&quot;AuVisaMsgRsnCd&quot;,AuVisaMsgRsnCd);
vars.put(&quot;AuDpan&quot;,AuDpan);
vars.put(&quot;AuPmtActRefNum&quot;,AuPmtActRefNum);
vars.put(&quot;AuPanUnqRef&quot;,AuPanUnqRef);
vars.put(&quot;AuTknUnqRef&quot;,AuTknUnqRef);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutAuthMessage-MDES-TokenActivation" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutAuthMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AuATm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuADt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCrdAccptId&gt;Non Us Domestic&lt;/v11:AuCrdAccptId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrZipCd&gt;91107&lt;/v11:AuMrZipCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCntryCd&gt;USA&lt;/v11:AuMrCntryCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCatgCd&gt;0763&lt;/v11:AuMrCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFgnExpIn&gt;D&lt;/v11:AuFgnExpIn&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAStCd&gt;CA&lt;/v11:AuAStCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuACrdExpDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P1461D,,)}&lt;/v11:AuACrdExpDt&gt;&#xd;
            &lt;v11:AuATrTermId&gt;FLPBLX1028&lt;/v11:AuATrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuOfflnAcsCd&gt;1&lt;/v11:AuOfflnAcsCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuARespCd&gt;APV&lt;/v11:AuARespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrAm&gt;${AuTrAm}&lt;/v11:AuTrAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCurCd&gt;USD&lt;/v11:AuCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnOrigAm&gt;${AuTrAm}&lt;/v11:AuTxnOrigAm&gt;&#xd;
            &lt;v11:AuTrDs&gt;PTS MTF TEST\\Pasadena&lt;/v11:AuTrDs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaRespCd&gt;000&lt;/v11:AuVisaRespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrTm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrTm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRespApvlCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuRespApvlCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAdVerfRsltCd&gt;8&lt;/v11:AuAdVerfRsltCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAUcsEffDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuAUcsEffDt&gt;&#xd;
            &lt;v11:AuTxnStatIn&gt;I&lt;/v11:AuTxnStatIn&gt;&#xd;
            &lt;v11:AuUcsTxnCd&gt;1035&lt;/v11:AuUcsTxnCd&gt;&#xd;
            &lt;v11:AuTxnCatgCd&gt;0763&lt;/v11:AuTxnCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCsbkAm&gt;1&lt;/v11:AuCsbkAm&gt;&#xd;
            &lt;v11:AuMsgTypeCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuPrgDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P14D,,)}&lt;/v11:AuPrgDt&gt;&#xd;
            &lt;v11:AuPosDa&gt;00010170000J&lt;/v11:AuPosDa&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAppTxnCt&gt;8&lt;/v11:AuAppTxnCt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuStipRsnCd&gt;8&lt;/v11:AuStipRsnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee1Am&gt;1&lt;/v11:AuFee1Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn1Cd&gt;5005&lt;/v11:AuFeeTxn1Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee2Am&gt;3&lt;/v11:AuFee2Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn2Cd&gt;5005&lt;/v11:AuFeeTxn2Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee3Am&gt;5&lt;/v11:AuFee3Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn3Cd&gt;5005&lt;/v11:AuFeeTxn3Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee4Am&gt;8&lt;/v11:AuFee4Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn4Cd&gt;5005&lt;/v11:AuFeeTxn4Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee5Am&gt;13&lt;/v11:AuFee5Am&gt;&#xd;
            &lt;v11:AuFeeTxn5Cd&gt;5005&lt;/v11:AuFeeTxn5Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRqstdTxnAm&gt;${AuTrAm}&lt;/v11:AuRqstdTxnAm&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAcqNtwkId&gt;${__RandomString(3,0123456789,)}&lt;/v11:AuAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnSign&gt;DR&lt;/v11:AuTxnSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuObsDataCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuObsDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTknTxnId&gt;${__RandomString(9,0123456789,)}&lt;/v11:AuTknTxnId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaAuCharSw&gt;D&lt;/v11:AuVisaAuCharSw&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuIncrAuInd&gt;false&lt;/v11:AuIncrAuInd&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:IfGeneratePosted&gt;false&lt;/v11:IfGeneratePosted&gt;&#xd;
            &lt;v11:AuRskScrNum&gt;&lt;/v11:AuRskScrNum&gt;&#xd;
            &lt;v11:AuPosEntModeCd&gt;&lt;/v11:AuPosEntModeCd&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;v11:AuRulAdjScrNum&gt;&lt;/v11:AuRulAdjScrNum&gt;&#xd;
            &lt;v11:De055Cvr&gt;&lt;/v11:De055Cvr&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
            &lt;v11:AvailBalSign&gt;&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:AvlBalOdThldSign&gt;&lt;/v11:AvlBalOdThldSign&gt;&#xd;
            &lt;v11:IpsTxnCatgCd&gt;MDESACTV&lt;/v11:IpsTxnCatgCd&gt;&#xd;
            &lt;v11:AuIsoProcCd&gt;DE3&lt;/v11:AuIsoProcCd&gt;&#xd;
            &lt;v11:AuTknReqId&gt;40010030273&lt;/v11:AuTknReqId&gt;&#xd;
            &lt;v11:AuTknUnqRef&gt;${AuTknUnqRef}&lt;/v11:AuTknUnqRef&gt;&#xd;
            &lt;v11:AuPanUnqRef&gt;${AuPanUnqRef}&lt;/v11:AuPanUnqRef&gt;&#xd;
            &lt;v11:AuPmtActRefNum&gt;${AuPmtActRefNum}&lt;/v11:AuPmtActRefNum&gt;&#xd;
            &lt;v11:AuDpan&gt;${AuDpan}&lt;/v11:AuDpan&gt;&#xd;
            &lt;v11:AuTknEvntInd&gt;7&lt;/v11:AuTknEvntInd&gt;&#xd;
            &lt;v11:MdesDistChnlSelInd&gt;DE59&lt;/v11:MdesDistChnlSelInd&gt;&#xd;
            &lt;v11:AuVisaMsgRsnCd&gt;${AuVisaMsgRsnCd}&lt;/v11:AuVisaMsgRsnCd&gt;&#xd;
            &lt;v11:TokenUnqDvcId&gt;${TokenUnqDvcId}&lt;/v11:TokenUnqDvcId&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutAuthMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.commons.lang.RandomStringUtils;
import org.apache.commons.lang.StringEscapeUtils;
import java.lang.StringBuilder;

/*
	@By Vivian.Wu
	@Date 18/12/2012
	@Input
		-- Collection charSet; the input char collection
		-- int len; the output string length
	@Output
		-- A random string with the pointed length
	*/
	private String getRandomString(Collection charSet, int len){
		Collection charCollection = charSet.flatten()
		Random rand = new Random(System.currentTimeMillis())
		def randomChars = (0..len).collect { charCollection[rand.nextInt(charCollection.size())] }
		return randomChars.join()
	}
	
def AuTknUnqRef = &apos;DNITHE30190847&apos; + RandomStringUtils.randomNumeric(10)
def AuPanUnqRef = &apos;V-301908471055&apos; + RandomStringUtils.randomNumeric(10)
def AuPmtActRefNum = &apos;V001001301908471055&apos; + RandomStringUtils.randomNumeric(10)
def AuDpan = RandomStringUtils.randomNumeric(4)
def AuVisaMsgRsnCd = RandomStringUtils.randomNumeric(4)
def TokenUnqDvcId = getRandomString([&apos;0&apos;..&apos;9&apos;,&apos;A&apos;..&apos;F&apos;],47)

vars.put(&quot;TokenUnqDvcId&quot;,TokenUnqDvcId);
vars.put(&quot;AuVisaMsgRsnCd&quot;,AuVisaMsgRsnCd);
vars.put(&quot;AuDpan&quot;,AuDpan);
vars.put(&quot;AuPmtActRefNum&quot;,AuPmtActRefNum);
vars.put(&quot;AuPanUnqRef&quot;,AuPanUnqRef);
vars.put(&quot;AuTknUnqRef&quot;,AuTknUnqRef);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutAuthMessage-MDES-TokenComplete" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutAuthMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AuATm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuADt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCrdAccptId&gt;Non Us Domestic&lt;/v11:AuCrdAccptId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrZipCd&gt;91107&lt;/v11:AuMrZipCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCntryCd&gt;USA&lt;/v11:AuMrCntryCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCatgCd&gt;0763&lt;/v11:AuMrCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFgnExpIn&gt;D&lt;/v11:AuFgnExpIn&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAStCd&gt;CA&lt;/v11:AuAStCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuACrdExpDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P1461D,,)}&lt;/v11:AuACrdExpDt&gt;&#xd;
            &lt;v11:AuATrTermId&gt;FLPBLX1028&lt;/v11:AuATrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuOfflnAcsCd&gt;1&lt;/v11:AuOfflnAcsCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuARespCd&gt;APV&lt;/v11:AuARespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrAm&gt;${AuTrAm}&lt;/v11:AuTrAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCurCd&gt;USD&lt;/v11:AuCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnOrigAm&gt;${AuTrAm}&lt;/v11:AuTxnOrigAm&gt;&#xd;
            &lt;v11:AuTrDs&gt;PTS MTF TEST\\Pasadena&lt;/v11:AuTrDs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaRespCd&gt;000&lt;/v11:AuVisaRespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrTm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrTm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRespApvlCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuRespApvlCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAdVerfRsltCd&gt;8&lt;/v11:AuAdVerfRsltCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAUcsEffDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuAUcsEffDt&gt;&#xd;
            &lt;v11:AuTxnStatIn&gt;I&lt;/v11:AuTxnStatIn&gt;&#xd;
            &lt;v11:AuUcsTxnCd&gt;1035&lt;/v11:AuUcsTxnCd&gt;&#xd;
            &lt;v11:AuTxnCatgCd&gt;0763&lt;/v11:AuTxnCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCsbkAm&gt;1&lt;/v11:AuCsbkAm&gt;&#xd;
            &lt;v11:AuMsgTypeCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuPrgDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P14D,,)}&lt;/v11:AuPrgDt&gt;&#xd;
            &lt;v11:AuPosDa&gt;00010170000J&lt;/v11:AuPosDa&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAppTxnCt&gt;8&lt;/v11:AuAppTxnCt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuStipRsnCd&gt;8&lt;/v11:AuStipRsnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee1Am&gt;1&lt;/v11:AuFee1Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn1Cd&gt;5005&lt;/v11:AuFeeTxn1Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee2Am&gt;3&lt;/v11:AuFee2Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn2Cd&gt;5005&lt;/v11:AuFeeTxn2Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee3Am&gt;5&lt;/v11:AuFee3Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn3Cd&gt;5005&lt;/v11:AuFeeTxn3Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee4Am&gt;8&lt;/v11:AuFee4Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn4Cd&gt;5005&lt;/v11:AuFeeTxn4Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee5Am&gt;13&lt;/v11:AuFee5Am&gt;&#xd;
            &lt;v11:AuFeeTxn5Cd&gt;5005&lt;/v11:AuFeeTxn5Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRqstdTxnAm&gt;${AuTrAm}&lt;/v11:AuRqstdTxnAm&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAcqNtwkId&gt;${__RandomString(3,0123456789,)}&lt;/v11:AuAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnSign&gt;DR&lt;/v11:AuTxnSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuObsDataCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuObsDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTknTxnId&gt;${__RandomString(9,0123456789,)}&lt;/v11:AuTknTxnId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaAuCharSw&gt;D&lt;/v11:AuVisaAuCharSw&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuIncrAuInd&gt;false&lt;/v11:AuIncrAuInd&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:IfGeneratePosted&gt;false&lt;/v11:IfGeneratePosted&gt;&#xd;
            &lt;v11:AuRskScrNum&gt;&lt;/v11:AuRskScrNum&gt;&#xd;
            &lt;v11:AuPosEntModeCd&gt;&lt;/v11:AuPosEntModeCd&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;v11:AuRulAdjScrNum&gt;&lt;/v11:AuRulAdjScrNum&gt;&#xd;
            &lt;v11:De055Cvr&gt;&lt;/v11:De055Cvr&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
            &lt;v11:AvailBalSign&gt;&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:AvlBalOdThldSign&gt;&lt;/v11:AvlBalOdThldSign&gt;&#xd;
            &lt;v11:IpsTxnCatgCd&gt;MDESCOMP&lt;/v11:IpsTxnCatgCd&gt;&#xd;
            &lt;v11:AuIsoProcCd&gt;DE3&lt;/v11:AuIsoProcCd&gt;&#xd;
            &lt;v11:AuTknReqId&gt;40010030273&lt;/v11:AuTknReqId&gt;&#xd;
            &lt;v11:AuTknUnqRef&gt;${AuTknUnqRef}&lt;/v11:AuTknUnqRef&gt;&#xd;
            &lt;v11:AuPanUnqRef&gt;${AuPanUnqRef}&lt;/v11:AuPanUnqRef&gt;&#xd;
            &lt;v11:AuPmtActRefNum&gt;${AuPmtActRefNum}&lt;/v11:AuPmtActRefNum&gt;&#xd;
            &lt;v11:AuDpan&gt;${AuDpan}&lt;/v11:AuDpan&gt;&#xd;
            &lt;v11:AuTknEvntInd&gt;7&lt;/v11:AuTknEvntInd&gt;&#xd;
            &lt;v11:MdesDistChnlSelInd&gt;DE59&lt;/v11:MdesDistChnlSelInd&gt;&#xd;
            &lt;v11:AuVisaMsgRsnCd&gt;${AuVisaMsgRsnCd}&lt;/v11:AuVisaMsgRsnCd&gt;&#xd;
            &lt;v11:TokenUnqDvcId&gt;${TokenUnqDvcId}&lt;/v11:TokenUnqDvcId&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutAuthMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.commons.lang.RandomStringUtils;
import org.apache.commons.lang.StringEscapeUtils;
import java.lang.StringBuilder;

/*
	@By Vivian.Wu
	@Date 18/12/2012
	@Input
		-- Collection charSet; the input char collection
		-- int len; the output string length
	@Output
		-- A random string with the pointed length
	*/
	private String getRandomString(Collection charSet, int len){
		Collection charCollection = charSet.flatten()
		Random rand = new Random(System.currentTimeMillis())
		def randomChars = (0..len).collect { charCollection[rand.nextInt(charCollection.size())] }
		return randomChars.join()
	}
	
def AuTknUnqRef = &apos;DNITHE30190847&apos; + RandomStringUtils.randomNumeric(10)
def AuPanUnqRef = &apos;V-301908471055&apos; + RandomStringUtils.randomNumeric(10)
def AuPmtActRefNum = &apos;V001001301908471055&apos; + RandomStringUtils.randomNumeric(10)
def AuDpan = RandomStringUtils.randomNumeric(4)
def AuVisaMsgRsnCd = RandomStringUtils.randomNumeric(4)
def TokenUnqDvcId = getRandomString([&apos;0&apos;..&apos;9&apos;,&apos;A&apos;..&apos;F&apos;],47)

vars.put(&quot;TokenUnqDvcId&quot;,TokenUnqDvcId);
vars.put(&quot;AuVisaMsgRsnCd&quot;,AuVisaMsgRsnCd);
vars.put(&quot;AuDpan&quot;,AuDpan);
vars.put(&quot;AuPmtActRefNum&quot;,AuPmtActRefNum);
vars.put(&quot;AuPanUnqRef&quot;,AuPanUnqRef);
vars.put(&quot;AuTknUnqRef&quot;,AuTknUnqRef);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AuthTransaction-Provision-VTS" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${ThreadCount}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">SOAPAction</stringProp>
              <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutAuthMessage&quot; </stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,AuTrAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutAuthMessage-VTS" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutAuthMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AuATm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuADt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCrdAccptId&gt;Non Us Domestic&lt;/v11:AuCrdAccptId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrZipCd&gt;91107&lt;/v11:AuMrZipCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCntryCd&gt;USA&lt;/v11:AuMrCntryCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCatgCd&gt;0763&lt;/v11:AuMrCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFgnExpIn&gt;D&lt;/v11:AuFgnExpIn&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAStCd&gt;CA&lt;/v11:AuAStCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuACrdExpDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P1461D,,)}&lt;/v11:AuACrdExpDt&gt;&#xd;
            &lt;v11:AuATrTermId&gt;FLPBLX1028&lt;/v11:AuATrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuOfflnAcsCd&gt;1&lt;/v11:AuOfflnAcsCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuARespCd&gt;APV&lt;/v11:AuARespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrAm&gt;${AuTrAm}&lt;/v11:AuTrAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCurCd&gt;USD&lt;/v11:AuCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnOrigAm&gt;${AuTrAm}&lt;/v11:AuTxnOrigAm&gt;&#xd;
            &lt;v11:AuTrDs&gt;PTS MTF TEST\\Pasadena&lt;/v11:AuTrDs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaRespCd&gt;000&lt;/v11:AuVisaRespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrTm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrTm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRespApvlCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuRespApvlCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAdVerfRsltCd&gt;8&lt;/v11:AuAdVerfRsltCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAUcsEffDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuAUcsEffDt&gt;&#xd;
            &lt;v11:AuTxnStatIn&gt;I&lt;/v11:AuTxnStatIn&gt;&#xd;
            &lt;v11:AuUcsTxnCd&gt;1035&lt;/v11:AuUcsTxnCd&gt;&#xd;
            &lt;v11:AuTxnCatgCd&gt;0763&lt;/v11:AuTxnCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCsbkAm&gt;1&lt;/v11:AuCsbkAm&gt;&#xd;
            &lt;v11:AuMsgTypeCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuPrgDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P14D,,)}&lt;/v11:AuPrgDt&gt;&#xd;
            &lt;v11:AuPosDa&gt;00010170000J&lt;/v11:AuPosDa&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAppTxnCt&gt;8&lt;/v11:AuAppTxnCt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuStipRsnCd&gt;8&lt;/v11:AuStipRsnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee1Am&gt;1&lt;/v11:AuFee1Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn1Cd&gt;5005&lt;/v11:AuFeeTxn1Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee2Am&gt;3&lt;/v11:AuFee2Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn2Cd&gt;5005&lt;/v11:AuFeeTxn2Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee3Am&gt;5&lt;/v11:AuFee3Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn3Cd&gt;5005&lt;/v11:AuFeeTxn3Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee4Am&gt;8&lt;/v11:AuFee4Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn4Cd&gt;5005&lt;/v11:AuFeeTxn4Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee5Am&gt;13&lt;/v11:AuFee5Am&gt;&#xd;
            &lt;v11:AuFeeTxn5Cd&gt;5005&lt;/v11:AuFeeTxn5Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRqstdTxnAm&gt;${AuTrAm}&lt;/v11:AuRqstdTxnAm&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAcqNtwkId&gt;${__RandomString(3,0123456789,)}&lt;/v11:AuAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnSign&gt;DR&lt;/v11:AuTxnSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuObsDataCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuObsDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTknTxnId&gt;${__RandomString(9,0123456789,)}&lt;/v11:AuTknTxnId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaAuCharSw&gt;D&lt;/v11:AuVisaAuCharSw&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuIncrAuInd&gt;false&lt;/v11:AuIncrAuInd&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:IfGeneratePosted&gt;false&lt;/v11:IfGeneratePosted&gt;&#xd;
            &lt;v11:AuRskScrNum&gt;&lt;/v11:AuRskScrNum&gt;&#xd;
            &lt;v11:AuPosEntModeCd&gt;&lt;/v11:AuPosEntModeCd&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;v11:AuRulAdjScrNum&gt;&lt;/v11:AuRulAdjScrNum&gt;&#xd;
            &lt;v11:De055Cvr&gt;&lt;/v11:De055Cvr&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
            &lt;v11:AvailBalSign&gt;&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:AvlBalOdThldSign&gt;&lt;/v11:AvlBalOdThldSign&gt;&#xd;
            &lt;v11:IpsTxnCatgCd&gt;VTS EVNT&lt;/v11:IpsTxnCatgCd&gt;&#xd;
            &lt;v11:AuIsoProcCd&gt;740000&lt;/v11:AuIsoProcCd&gt;&#xd;
            &lt;v11:AuTknReqId&gt;40010030273&lt;/v11:AuTknReqId&gt;&#xd;
            &lt;v11:AuTknUnqRef&gt;${AuTknUnqRef}&lt;/v11:AuTknUnqRef&gt;&#xd;
            &lt;v11:AuPanUnqRef&gt;${AuPanUnqRef}&lt;/v11:AuPanUnqRef&gt;&#xd;
            &lt;v11:AuPmtActRefNum&gt;${AuPmtActRefNum}&lt;/v11:AuPmtActRefNum&gt;&#xd;
            &lt;v11:AuDpan&gt;${AuDpan}&lt;/v11:AuDpan&gt;&#xd;
            &lt;v11:AuTknEvntInd&gt;2&lt;/v11:AuTknEvntInd&gt;&#xd;
            &lt;v11:MdesDistChnlSelInd&gt;DE43&lt;/v11:MdesDistChnlSelInd&gt;&#xd;
            &lt;v11:AuVisaMsgRsnCd&gt;${AuVisaMsgRsnCd}&lt;/v11:AuVisaMsgRsnCd&gt;&#xd;
            &lt;v11:TokenUnqDvcId&gt;${TokenUnqDvcId}&lt;/v11:TokenUnqDvcId&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutAuthMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.commons.lang.RandomStringUtils;
import org.apache.commons.lang.StringEscapeUtils;
import java.lang.StringBuilder;

/*
	@By Vivian.Wu
	@Date 18/12/2012
	@Input
		-- Collection charSet; the input char collection
		-- int len; the output string length
	@Output
		-- A random string with the pointed length
	*/
	private String getRandomString(Collection charSet, int len){
		Collection charCollection = charSet.flatten()
		Random rand = new Random(System.currentTimeMillis())
		def randomChars = (0..len).collect { charCollection[rand.nextInt(charCollection.size())] }
		return randomChars.join()
	}
	
def AuTknUnqRef = &apos;DNITHE30190847&apos; + RandomStringUtils.randomNumeric(10)
def AuPanUnqRef = &apos;V-301908471055&apos; + RandomStringUtils.randomNumeric(10)
def AuPmtActRefNum = &apos;V001001301908471055&apos; + RandomStringUtils.randomNumeric(10)
def AuDpan = RandomStringUtils.randomNumeric(4)
def AuVisaMsgRsnCd = RandomStringUtils.randomNumeric(4)
def TokenUnqDvcId = getRandomString([&apos;0&apos;..&apos;9&apos;,&apos;A&apos;..&apos;F&apos;],47)

vars.put(&quot;TokenUnqDvcId&quot;,TokenUnqDvcId);
vars.put(&quot;AuVisaMsgRsnCd&quot;,AuVisaMsgRsnCd);
vars.put(&quot;AuDpan&quot;,AuDpan);
vars.put(&quot;AuPmtActRefNum&quot;,AuPmtActRefNum);
vars.put(&quot;AuPanUnqRef&quot;,AuPanUnqRef);
vars.put(&quot;AuTknUnqRef&quot;,AuTknUnqRef);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AuhClose-FileGeneration" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">use gbos

select top ${NUMBER_OF_ACCOUNTS} LTRIM(RTRIM(pid.PaymentIdentifierProxy)) as cardproxy
,FORMAT(ProcessorTransactionDate, &apos;yyyy-MM-dd&apos;) authDate
,FORMAT(ProcessorTransactionDate, &apos;HH:mm:ss&apos;) authTime
 --,  SUBSTRING(CAST(aut.AuthorizationSequenceNumber AS varchar), 1,6) authSeq, 
 ,aut.AuthorizationSequenceNumber authSeq, 
 cast(replace(AuthorizationRequestAmount*100, &apos;.&apos;,&apos;&apos;) as integer) as authAmount,  aut.ApprovalCode, aut.HoldExpireDate --,IsOfflineProcessed, IsMatched
from [dbo].[AuthorizeTransaction] aut with(nolock)
inner join paymentidentifier pid with(nolock)
on aut.PaymentIdentifier = pid.PaymentIdentifier
inner join account a with(nolock)
on a.AccountIdentifier = aut.AccountIdentifier
where aut.CreateDate&gt;&apos;${StartDate}&apos; and pid.PaymentIdentifierProxy like &apos;S%&apos; 
and ISMATCHED=0  and a.ProductKey = 4 and len(AuthorizationSequenceNumber) =6
order by newid()</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">cardproxy,authDate,authTime,authSeq,authAmount,ApprovalCode,HoldExpireDate</stringProp>
          <stringProp name="resultVariable">AccountList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.lang3.StringUtils;

var currentDateTime= &quot;${__time(MMddYY&apos;-&apos;HHmmss)}&quot;;

log.info (currentDateTime);

var fileName = &quot;PTS-MTF-GBOS-OPENAUTH-REPORT-&quot; + currentDateTime +&quot;.txt&quot;;

vars.put(&quot;AuthOpenFile&quot;, fileName);
log.info(fileName);

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + fileName,true);
//cardproxy,authDate,authTime,AuthorizationSequenceNumber,authAmount,ApprovalCode,HoldExpireDate
for (var row : vars.getObject(&quot;AccountList&quot;))
{

	var currentLine = StringUtils.rightPad(row.get(&quot;cardproxy&quot;), 14, &apos; &apos;) + row.get(&quot;authTime&quot;) + &quot; &quot; + row.get(&quot;authDate&quot;) +&quot; &quot;+ row.get(&quot;authSeq&quot;) +&quot; &quot; 
	+ StringUtils.leftPad(row.get(&quot;authAmount&quot;).toString(), 15 , &apos;0&apos;) + &quot; APV &quot; + row.get(&quot;ApprovalCode&quot;) + &quot; &quot; + row.get(&quot;HoldExpireDate&quot;) + &quot; 00116 BS001&quot; + System.getProperty(&quot;line.separator&quot;);
	//log.info (currentLine);
	fstream.write(currentLine);
}
fstream.close();
 </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder" enabled="false">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">copy /b /y</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">.\\${AuthOpenFile}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">\\nextestate.com\dfs\BOS-NDM\BOSIPS\AWS_PRF\Inbound\${AuthOpenFile}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}</stringProp>
        </SystemSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PostNetWorkTransaction-Debit" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">80</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${ThreadCount}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">SOAPAction</stringProp>
              <stringProp name="Header.value"> &quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostNetworkMessage&quot; </stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\CardProxiesForSimTran.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,JoPstdAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">true</boolProp>
        </DebugSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">100</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostNetworkMessage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostNetworkMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${__Random(100,900,)}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;DR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;1035&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn&gt;${__javaScript(${__RandomString(6,0123456789,)}+&quot;-&quot;+${__RandomString(12,0123456789,)}+&quot;-&quot;+${__RandomString(6,0123456789,)},)}&lt;/v11:PmVisaArn&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:De1MsgType&gt;1221&lt;/v11:De1MsgType&gt;&#xd;
            &lt;v11:De3ProcessingCode&gt;${__RandomString(6,0123456789,)}&lt;/v11:De3ProcessingCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De4TxnAmt&gt;${__Random(100,900,)}&lt;/v11:De4TxnAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De5ReconAmt&gt;${__Random(100,900,)}&lt;/v11:De5ReconAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De6BillingAmt&gt;${__Random(100,900,)}&lt;/v11:De6BillingAmt&gt;&#xd;
            &lt;v11:De12TxnDtTm&gt;${__time(yyMMddHHmmss,)}&lt;/v11:De12TxnDtTm&gt;&#xd;
            &lt;v11:De22PtOfSrvcDataCd&gt;010011111110&lt;/v11:De22PtOfSrvcDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De25MsgReasonCd&gt;3173&lt;/v11:De25MsgReasonCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De26CrdAccptrBusCd&gt;5542&lt;/v11:De26CrdAccptrBusCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:DE28ReconDt xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De31AcqrRefData&gt;${__RandomString(23,0123456789,)}&lt;/v11:De31AcqrRefData&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De32AcqrngInstId&gt;${__RandomString(11,0123456789,)}&lt;/v11:De32AcqrngInstId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;${__RandomString(12,0123456789,)}&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De38ApprovalCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:De38ApprovalCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De41CrdAccptrTermId&gt;NONUSADOME&lt;/v11:De41CrdAccptrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De42CrdAccptrIdCode&gt;${__RandomString(15,0123456789,)}&lt;/v11:De42CrdAccptrIdCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De43CrdAccptrNmLoc&gt;GreenDot Corporation TestE Main PasadenaThisFillerForPositionFourtyOneToEightyThree9110700000CA USA&lt;/v11:De43CrdAccptrNmLoc&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De49CurCodeTxnX&gt;USD&lt;/v11:De49CurCodeTxnX&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:CashbackAmt&gt;0&lt;/v11:CashbackAmt&gt;&#xd;
            &lt;v11:AuthMatchedInd&gt;N&lt;/v11:AuthMatchedInd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmAcqNtwkId&gt;GDOT&lt;/v11:PmAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmMultiClrSeqNum&gt;0&lt;/v11:PmMultiClrSeqNum&gt;&#xd;
            &lt;v11:PmMultiClrSeqCnt&gt;0&lt;/v11:PmMultiClrSeqCnt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PanUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmtActRefNum xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmSpndAlertCde xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:OnbhlfSrvData xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknTxnId&gt;${__RandomString(64,0123456789abcdef,)}&lt;/v11:TknTxnId&gt;&#xd;
            &lt;v11:PosEntModeCd&gt;&lt;/v11:PosEntModeCd&gt;&#xd;
            &lt;v11:De055Cvm&gt;&lt;/v11:De055Cvm&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostNetworkMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostNetworkMessage" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostNetworkMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${__Random(100,900,)}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;DR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;1035&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn&gt;${__javaScript(${__RandomString(6,0123456789,)}+&quot;-&quot;+${__RandomString(12,0123456789,)}+&quot;-&quot;+${__RandomString(6,0123456789,)},)}&lt;/v11:PmVisaArn&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:De1MsgType&gt;1221&lt;/v11:De1MsgType&gt;&#xd;
            &lt;v11:De3ProcessingCode&gt;${__RandomString(6,0123456789,)}&lt;/v11:De3ProcessingCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De4TxnAmt&gt;${__Random(100,900,)}&lt;/v11:De4TxnAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De5ReconAmt&gt;${__Random(100,900,)}&lt;/v11:De5ReconAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De6BillingAmt&gt;${__Random(100,900,)}&lt;/v11:De6BillingAmt&gt;&#xd;
            &lt;v11:De12TxnDtTm&gt;${__time(yyMMddHHmmss,)}&lt;/v11:De12TxnDtTm&gt;&#xd;
            &lt;v11:De22PtOfSrvcDataCd&gt;010011111110&lt;/v11:De22PtOfSrvcDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De25MsgReasonCd&gt;3173&lt;/v11:De25MsgReasonCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De26CrdAccptrBusCd&gt;5542&lt;/v11:De26CrdAccptrBusCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:DE28ReconDt xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De31AcqrRefData&gt;${__RandomString(23,0123456789,)}&lt;/v11:De31AcqrRefData&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De32AcqrngInstId&gt;${__RandomString(11,0123456789,)}&lt;/v11:De32AcqrngInstId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;${__RandomString(12,0123456789,)}&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De38ApprovalCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:De38ApprovalCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De41CrdAccptrTermId&gt;NONUSADOME&lt;/v11:De41CrdAccptrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De42CrdAccptrIdCode&gt;${__RandomString(15,0123456789,)}&lt;/v11:De42CrdAccptrIdCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De43CrdAccptrNmLoc&gt;GreenDot Corporation TestE Main PasadenaThisFillerForPositionFourtyOneToEightyThree9110700000CA USA&lt;/v11:De43CrdAccptrNmLoc&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De49CurCodeTxnX&gt;USD&lt;/v11:De49CurCodeTxnX&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:CashbackAmt&gt;0&lt;/v11:CashbackAmt&gt;&#xd;
            &lt;v11:AuthMatchedInd&gt;N&lt;/v11:AuthMatchedInd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmAcqNtwkId&gt;GDOT&lt;/v11:PmAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmMultiClrSeqNum&gt;0&lt;/v11:PmMultiClrSeqNum&gt;&#xd;
            &lt;v11:PmMultiClrSeqCnt&gt;0&lt;/v11:PmMultiClrSeqCnt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PanUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmtActRefNum xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmSpndAlertCde xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:OnbhlfSrvData xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknTxnId&gt;${__RandomString(64,0123456789abcdef,)}&lt;/v11:TknTxnId&gt;&#xd;
            &lt;v11:PosEntModeCd&gt;&lt;/v11:PosEntModeCd&gt;&#xd;
            &lt;v11:De055Cvm&gt;&lt;/v11:De055Cvm&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostNetworkMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PostInternalTransaction-DD" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${ThreadCount}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">SOAPAction</stringProp>
              <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostInternalMessage&quot; </stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,JoPstdAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GenerateRandomValues" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;JoPstdAm&quot;, Integer.toString(amount));

</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostInternalMessage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostInternalMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
		&lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${JoPstdAm}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;5598&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoSrceCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDescTx&gt;1-002,ACH In&lt;/v11:JoTxnDescTx&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDisputeId&gt;${__RandomString(10,0123456789,)}&lt;/v11:JoTxnDisputeId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JxTxnComment&gt;5005comment&lt;/v11:JxTxnComment&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoSysGenRefNr&gt;${__RandomString(16,0123456789,)}&lt;/v11:JoSysGenRefNr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnRsnCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoTxnRsnCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostInternalMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PostNetWorkTransaction-Crebit" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${ThreadCount}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">SOAPAction</stringProp>
              <stringProp name="Header.value"> &quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostNetworkMessage&quot; </stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,JoPstdAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostNetworkMessage-credit" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostNetworkMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
         &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${JoPstdAm}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;1035&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn&gt;${__javaScript(${__RandomString(6,0123456789,)}+&quot;-&quot;+${__RandomString(12,0123456789,)}+&quot;-&quot;+${__RandomString(6,0123456789,)},)}&lt;/v11:PmVisaArn&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:De1MsgType&gt;1221&lt;/v11:De1MsgType&gt;&#xd;
            &lt;v11:De3ProcessingCode&gt;${__RandomString(6,0123456789,)}&lt;/v11:De3ProcessingCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De4TxnAmt&gt;${JoPstdAm}&lt;/v11:De4TxnAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De5ReconAmt&gt;${JoPstdAm}&lt;/v11:De5ReconAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De6BillingAmt&gt;${JoPstdAm}&lt;/v11:De6BillingAmt&gt;&#xd;
            &lt;v11:De12TxnDtTm&gt;${__time(yyMMddHHmmss,)}&lt;/v11:De12TxnDtTm&gt;&#xd;
            &lt;v11:De22PtOfSrvcDataCd&gt;010011111110&lt;/v11:De22PtOfSrvcDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De25MsgReasonCd&gt;4361&lt;/v11:De25MsgReasonCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De26CrdAccptrBusCd&gt;0763&lt;/v11:De26CrdAccptrBusCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:DE28ReconDt xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De31AcqrRefData&gt;${__RandomString(23,0123456789,)}&lt;/v11:De31AcqrRefData&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De32AcqrngInstId&gt;${__RandomString(11,0123456789,)}&lt;/v11:De32AcqrngInstId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;${__RandomString(12,0123456789,)}&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De38ApprovalCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:De38ApprovalCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De41CrdAccptrTermId&gt;NONUSADOME&lt;/v11:De41CrdAccptrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De42CrdAccptrIdCode&gt;${__RandomString(15,0123456789,)}&lt;/v11:De42CrdAccptrIdCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De43CrdAccptrNmLoc&gt;GreenDot Corporation TestE Main PasadenaThisFillerForPositionFourtyOneToEightyThree9110700000CA USA&lt;/v11:De43CrdAccptrNmLoc&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De49CurCodeTxnX&gt;USD&lt;/v11:De49CurCodeTxnX&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:CashbackAmt&gt;0&lt;/v11:CashbackAmt&gt;&#xd;
            &lt;v11:AuthMatchedInd&gt;N&lt;/v11:AuthMatchedInd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmAcqNtwkId&gt;GDOT&lt;/v11:PmAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmMultiClrSeqNum&gt;0&lt;/v11:PmMultiClrSeqNum&gt;&#xd;
            &lt;v11:PmMultiClrSeqCnt&gt;0&lt;/v11:PmMultiClrSeqCnt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PanUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmtActRefNum xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmSpndAlertCde xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:OnbhlfSrvData xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknTxnId&gt;${__RandomString(64,0123456789abcdef,)}&lt;/v11:TknTxnId&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostNetworkMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${LoopCount}</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostNetworkMessage-credit" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostNetworkMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
         &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${JoPstdAm}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;1035&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn&gt;${__javaScript(${__RandomString(6,0123456789,)}+&quot;-&quot;+${__RandomString(12,0123456789,)}+&quot;-&quot;+${__RandomString(6,0123456789,)},)}&lt;/v11:PmVisaArn&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:De1MsgType&gt;1221&lt;/v11:De1MsgType&gt;&#xd;
            &lt;v11:De3ProcessingCode&gt;${__RandomString(6,0123456789,)}&lt;/v11:De3ProcessingCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De4TxnAmt&gt;${JoPstdAm}&lt;/v11:De4TxnAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De5ReconAmt&gt;${JoPstdAm}&lt;/v11:De5ReconAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De6BillingAmt&gt;${JoPstdAm}&lt;/v11:De6BillingAmt&gt;&#xd;
            &lt;v11:De12TxnDtTm&gt;${__time(yyMMddHHmmss,)}&lt;/v11:De12TxnDtTm&gt;&#xd;
            &lt;v11:De22PtOfSrvcDataCd&gt;010011111110&lt;/v11:De22PtOfSrvcDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De25MsgReasonCd&gt;4361&lt;/v11:De25MsgReasonCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De26CrdAccptrBusCd&gt;0763&lt;/v11:De26CrdAccptrBusCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:DE28ReconDt xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De31AcqrRefData&gt;${__RandomString(23,0123456789,)}&lt;/v11:De31AcqrRefData&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De32AcqrngInstId&gt;${__RandomString(11,0123456789,)}&lt;/v11:De32AcqrngInstId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;${__RandomString(12,0123456789,)}&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De38ApprovalCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:De38ApprovalCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De41CrdAccptrTermId&gt;NONUSADOME&lt;/v11:De41CrdAccptrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De42CrdAccptrIdCode&gt;${__RandomString(15,0123456789,)}&lt;/v11:De42CrdAccptrIdCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De43CrdAccptrNmLoc&gt;GreenDot Corporation TestE Main PasadenaThisFillerForPositionFourtyOneToEightyThree9110700000CA USA&lt;/v11:De43CrdAccptrNmLoc&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De49CurCodeTxnX&gt;USD&lt;/v11:De49CurCodeTxnX&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:CashbackAmt&gt;0&lt;/v11:CashbackAmt&gt;&#xd;
            &lt;v11:AuthMatchedInd&gt;N&lt;/v11:AuthMatchedInd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmAcqNtwkId&gt;GDOT&lt;/v11:PmAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmMultiClrSeqNum&gt;0&lt;/v11:PmMultiClrSeqNum&gt;&#xd;
            &lt;v11:PmMultiClrSeqCnt&gt;0&lt;/v11:PmMultiClrSeqCnt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PanUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmtActRefNum xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmSpndAlertCde xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:OnbhlfSrvData xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknTxnId&gt;${__RandomString(64,0123456789abcdef,)}&lt;/v11:TknTxnId&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostNetworkMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostNetworkMessage" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostNetworkMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
         &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-08:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${JoPstdAm}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;DR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;1035&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-08:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-08:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-08:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-08:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn&gt;${__javaScript(${__RandomString(6,0123456789,)}+&quot;-&quot;+${__RandomString(12,0123456789,)}+&quot;-&quot;+${__RandomString(6,0123456789,)},)}&lt;/v11:PmVisaArn&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:De1MsgType&gt;1221&lt;/v11:De1MsgType&gt;&#xd;
            &lt;v11:De3ProcessingCode&gt;${__RandomString(6,0123456789,)}&lt;/v11:De3ProcessingCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De4TxnAmt&gt;${JoPstdAm}&lt;/v11:De4TxnAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De5ReconAmt&gt;${JoPstdAm}&lt;/v11:De5ReconAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De6BillingAmt&gt;${JoPstdAm}&lt;/v11:De6BillingAmt&gt;&#xd;
            &lt;v11:De12TxnDtTm&gt;${__time(yyMMddHHmmss,)}&lt;/v11:De12TxnDtTm&gt;&#xd;
            &lt;v11:De22PtOfSrvcDataCd&gt;010011111110&lt;/v11:De22PtOfSrvcDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De25MsgReasonCd&gt;3173&lt;/v11:De25MsgReasonCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De26CrdAccptrBusCd&gt;0763&lt;/v11:De26CrdAccptrBusCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:DE28ReconDt xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De31AcqrRefData&gt;${__RandomString(23,0123456789,)}&lt;/v11:De31AcqrRefData&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De32AcqrngInstId&gt;${__RandomString(11,0123456789,)}&lt;/v11:De32AcqrngInstId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;${__RandomString(12,0123456789,)}&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De38ApprovalCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:De38ApprovalCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De41CrdAccptrTermId&gt;NONUSADOME&lt;/v11:De41CrdAccptrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De42CrdAccptrIdCode&gt;${__RandomString(15,0123456789,)}&lt;/v11:De42CrdAccptrIdCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De43CrdAccptrNmLoc&gt;GreenDot Corporation TestE Main PasadenaThisFillerForPositionFourtyOneToEightyThree9110700000CA USA&lt;/v11:De43CrdAccptrNmLoc&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De49CurCodeTxnX&gt;USD&lt;/v11:De49CurCodeTxnX&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:CashbackAmt&gt;0&lt;/v11:CashbackAmt&gt;&#xd;
            &lt;v11:AuthMatchedInd&gt;N&lt;/v11:AuthMatchedInd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmAcqNtwkId&gt;GDOT&lt;/v11:PmAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmMultiClrSeqNum&gt;0&lt;/v11:PmMultiClrSeqNum&gt;&#xd;
            &lt;v11:PmMultiClrSeqCnt&gt;0&lt;/v11:PmMultiClrSeqCnt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PanUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmtActRefNum xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmSpndAlertCde xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:OnbhlfSrvData xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknTxnId&gt;${__RandomString(64,0123456789abcdef,)}&lt;/v11:TknTxnId&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostNetworkMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AuthTransaction-Declined" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">SOAPAction</stringProp>
              <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutAuthMessage&quot; </stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\CardProxiesForSimTran.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,AuTrAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutAuthMessage" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutAuthMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
         &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AuATm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuADt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCrdAccptId&gt;Non Us Domestic&lt;/v11:AuCrdAccptId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrZipCd&gt;91107&lt;/v11:AuMrZipCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCntryCd&gt;USA&lt;/v11:AuMrCntryCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCatgCd&gt;0763&lt;/v11:AuMrCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFgnExpIn&gt;D&lt;/v11:AuFgnExpIn&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAStCd&gt;CA&lt;/v11:AuAStCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuACrdExpDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P1461D,,)}&lt;/v11:AuACrdExpDt&gt;&#xd;
            &lt;v11:AuATrTermId&gt;FLPBLX1028&lt;/v11:AuATrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuOfflnAcsCd&gt;1&lt;/v11:AuOfflnAcsCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuARespCd&gt;DCL&lt;/v11:AuARespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrAm&gt;${AuTrAm}&lt;/v11:AuTrAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCurCd&gt;USD&lt;/v11:AuCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnOrigAm&gt;${AuTrAm}&lt;/v11:AuTxnOrigAm&gt;&#xd;
            &lt;v11:AuTrDs&gt;PTS MTF TEST\\Pasadena&lt;/v11:AuTrDs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaRespCd&gt;116&lt;/v11:AuVisaRespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrTm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrTm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRespApvlCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuRespApvlCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAdVerfRsltCd&gt;8&lt;/v11:AuAdVerfRsltCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAUcsEffDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuAUcsEffDt&gt;&#xd;
            &lt;v11:AuTxnStatIn&gt;I&lt;/v11:AuTxnStatIn&gt;&#xd;
            &lt;v11:AuUcsTxnCd&gt;1035&lt;/v11:AuUcsTxnCd&gt;&#xd;
            &lt;v11:AuTxnCatgCd&gt;AU&lt;/v11:AuTxnCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCsbkAm&gt;1&lt;/v11:AuCsbkAm&gt;&#xd;
            &lt;v11:AuMsgTypeCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuPrgDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P14D,,)}&lt;/v11:AuPrgDt&gt;&#xd;
            &lt;v11:AuPosDa&gt;00010170000J&lt;/v11:AuPosDa&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAppTxnCt&gt;8&lt;/v11:AuAppTxnCt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuStipRsnCd&gt;8&lt;/v11:AuStipRsnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee1Am&gt;1&lt;/v11:AuFee1Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn1Cd&gt;5005&lt;/v11:AuFeeTxn1Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee2Am&gt;3&lt;/v11:AuFee2Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn2Cd&gt;5005&lt;/v11:AuFeeTxn2Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee3Am&gt;5&lt;/v11:AuFee3Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn3Cd&gt;5005&lt;/v11:AuFeeTxn3Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee4Am&gt;8&lt;/v11:AuFee4Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn4Cd&gt;5005&lt;/v11:AuFeeTxn4Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee5Am&gt;13&lt;/v11:AuFee5Am&gt;&#xd;
            &lt;v11:AuFeeTxn5Cd&gt;5005&lt;/v11:AuFeeTxn5Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRqstdTxnAm&gt;${AuTrAm}&lt;/v11:AuRqstdTxnAm&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAcqNtwkId&gt;${__RandomString(3,0123456789,)}&lt;/v11:AuAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnSign&gt;DR&lt;/v11:AuTxnSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuObsDataCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuObsDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTknTxnId&gt;${__RandomString(9,0123456789,)}&lt;/v11:AuTknTxnId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaAuCharSw&gt;D&lt;/v11:AuVisaAuCharSw&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuIncrAuInd&gt;false&lt;/v11:AuIncrAuInd&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:IfGeneratePosted&gt;false&lt;/v11:IfGeneratePosted&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutAuthMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PostTransaction-1Tans-OneAccount" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">20</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">SOAPAction</stringProp>
              <stringProp name="Header.value"> &quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostNetworkMessage&quot; </stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="AccountProxy" elementType="Argument">
              <stringProp name="Argument.name">AccountProxy</stringProp>
              <stringProp name="Argument.value">S1000004466739</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CardProxy" elementType="Argument">
              <stringProp name="Argument.name">CardProxy</stringProp>
              <stringProp name="Argument.value">S104466744</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="JoPstdAm" elementType="Argument">
              <stringProp name="Argument.name">JoPstdAm</stringProp>
              <stringProp name="Argument.value">111</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\CardProxiesForSimTran.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,JoPstdAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostNetworkMessage" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostNetworkMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
         &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-08:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${JoPstdAm}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;DR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;1035&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-08:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-08:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-08:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-08:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn&gt;${__javaScript(${__RandomString(6,0123456789,)}+&quot;-&quot;+${__RandomString(12,0123456789,)}+&quot;-&quot;+${__RandomString(6,0123456789,)},)}&lt;/v11:PmVisaArn&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:De1MsgType&gt;1221&lt;/v11:De1MsgType&gt;&#xd;
            &lt;v11:De3ProcessingCode&gt;${__RandomString(6,0123456789,)}&lt;/v11:De3ProcessingCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De4TxnAmt&gt;${JoPstdAm}&lt;/v11:De4TxnAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De5ReconAmt&gt;${JoPstdAm}&lt;/v11:De5ReconAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De6BillingAmt&gt;${JoPstdAm}&lt;/v11:De6BillingAmt&gt;&#xd;
            &lt;v11:De12TxnDtTm&gt;${__time(yyMMddHHmmss,)}&lt;/v11:De12TxnDtTm&gt;&#xd;
            &lt;v11:De22PtOfSrvcDataCd&gt;010011111110&lt;/v11:De22PtOfSrvcDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De25MsgReasonCd&gt;3173&lt;/v11:De25MsgReasonCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De26CrdAccptrBusCd&gt;0763&lt;/v11:De26CrdAccptrBusCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:DE28ReconDt xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De31AcqrRefData&gt;${__RandomString(23,0123456789,)}&lt;/v11:De31AcqrRefData&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De32AcqrngInstId&gt;${__RandomString(11,0123456789,)}&lt;/v11:De32AcqrngInstId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;${__RandomString(12,0123456789,)}&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De38ApprovalCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:De38ApprovalCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De41CrdAccptrTermId&gt;NONUSADOME&lt;/v11:De41CrdAccptrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De42CrdAccptrIdCode&gt;${__RandomString(15,0123456789,)}&lt;/v11:De42CrdAccptrIdCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De43CrdAccptrNmLoc&gt;GreenDot Corporation TestE Main PasadenaThisFillerForPositionFourtyOneToEightyThree9110700000CA USA&lt;/v11:De43CrdAccptrNmLoc&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De49CurCodeTxnX&gt;USD&lt;/v11:De49CurCodeTxnX&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:CashbackAmt&gt;0&lt;/v11:CashbackAmt&gt;&#xd;
            &lt;v11:AuthMatchedInd&gt;N&lt;/v11:AuthMatchedInd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmAcqNtwkId&gt;GDOT&lt;/v11:PmAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmMultiClrSeqNum&gt;0&lt;/v11:PmMultiClrSeqNum&gt;&#xd;
            &lt;v11:PmMultiClrSeqCnt&gt;0&lt;/v11:PmMultiClrSeqCnt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PanUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmtActRefNum xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmSpndAlertCde xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:OnbhlfSrvData xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknTxnId&gt;${__RandomString(64,0123456789abcdef,)}&lt;/v11:TknTxnId&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostNetworkMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PostTransaction-1kTans-OneAccount" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1000</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">9</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">SOAPAction</stringProp>
              <stringProp name="Header.value"> &quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostNetworkMessage&quot; </stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="AccountProxy" elementType="Argument">
              <stringProp name="Argument.name">AccountProxy</stringProp>
              <stringProp name="Argument.value">S1000004466739</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CardProxy" elementType="Argument">
              <stringProp name="Argument.name">CardProxy</stringProp>
              <stringProp name="Argument.value">S104466744</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="JoPstdAm" elementType="Argument">
              <stringProp name="Argument.name">JoPstdAm</stringProp>
              <stringProp name="Argument.value">111</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\CardProxiesForSimTran-1k.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,JoPstdAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostNetworkMessage" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostNetworkMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
         &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-08:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${JoPstdAm}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;DR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;1035&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-08:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-08:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-08:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-08:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn&gt;${__javaScript(${__RandomString(6,0123456789,)}+&quot;-&quot;+${__RandomString(12,0123456789,)}+&quot;-&quot;+${__RandomString(6,0123456789,)},)}&lt;/v11:PmVisaArn&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:De1MsgType&gt;1221&lt;/v11:De1MsgType&gt;&#xd;
            &lt;v11:De3ProcessingCode&gt;${__RandomString(6,0123456789,)}&lt;/v11:De3ProcessingCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De4TxnAmt&gt;${JoPstdAm}&lt;/v11:De4TxnAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De5ReconAmt&gt;${JoPstdAm}&lt;/v11:De5ReconAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De6BillingAmt&gt;${JoPstdAm}&lt;/v11:De6BillingAmt&gt;&#xd;
            &lt;v11:De12TxnDtTm&gt;${__time(yyMMddHHmmss,)}&lt;/v11:De12TxnDtTm&gt;&#xd;
            &lt;v11:De22PtOfSrvcDataCd&gt;010011111110&lt;/v11:De22PtOfSrvcDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De25MsgReasonCd&gt;3173&lt;/v11:De25MsgReasonCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De26CrdAccptrBusCd&gt;0763&lt;/v11:De26CrdAccptrBusCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:DE28ReconDt xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De31AcqrRefData&gt;${__RandomString(23,0123456789,)}&lt;/v11:De31AcqrRefData&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De32AcqrngInstId&gt;${__RandomString(11,0123456789,)}&lt;/v11:De32AcqrngInstId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;${__RandomString(12,0123456789,)}&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De38ApprovalCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:De38ApprovalCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De41CrdAccptrTermId&gt;NONUSADOME&lt;/v11:De41CrdAccptrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De42CrdAccptrIdCode&gt;${__RandomString(15,0123456789,)}&lt;/v11:De42CrdAccptrIdCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De43CrdAccptrNmLoc&gt;GreenDot Corporation TestE Main PasadenaThisFillerForPositionFourtyOneToEightyThree9110700000CA USA&lt;/v11:De43CrdAccptrNmLoc&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De49CurCodeTxnX&gt;USD&lt;/v11:De49CurCodeTxnX&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:CashbackAmt&gt;0&lt;/v11:CashbackAmt&gt;&#xd;
            &lt;v11:AuthMatchedInd&gt;N&lt;/v11:AuthMatchedInd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmAcqNtwkId&gt;GDOT&lt;/v11:PmAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmMultiClrSeqNum&gt;0&lt;/v11:PmMultiClrSeqNum&gt;&#xd;
            &lt;v11:PmMultiClrSeqCnt&gt;0&lt;/v11:PmMultiClrSeqCnt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PanUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmtActRefNum xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmSpndAlertCde xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:OnbhlfSrvData xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknTxnId&gt;${__RandomString(64,0123456789abcdef,)}&lt;/v11:TknTxnId&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostNetworkMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PostTransaction-10kTans-OneAccount" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10000</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">SOAPAction</stringProp>
              <stringProp name="Header.value"> &quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostNetworkMessage&quot; </stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="AccountProxy" elementType="Argument">
              <stringProp name="Argument.name">AccountProxy</stringProp>
              <stringProp name="Argument.value">S1000004466758</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CardProxy" elementType="Argument">
              <stringProp name="Argument.name">CardProxy</stringProp>
              <stringProp name="Argument.value">S104466763</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="JoPstdAm" elementType="Argument">
              <stringProp name="Argument.name">JoPstdAm</stringProp>
              <stringProp name="Argument.value">122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="filename">${RootDataDirectory}\CardProxiesForSimTran.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,JoPstdAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostNetworkMessage" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostNetworkMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
         &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${CardProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${JoPstdAm}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;DR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;1035&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn&gt;${__javaScript(${__RandomString(6,0123456789,)}+&quot;-&quot;+${__RandomString(12,0123456789,)}+&quot;-&quot;+${__RandomString(6,0123456789,)},)}&lt;/v11:PmVisaArn&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:De1MsgType&gt;1221&lt;/v11:De1MsgType&gt;&#xd;
            &lt;v11:De3ProcessingCode&gt;${__RandomString(6,0123456789,)}&lt;/v11:De3ProcessingCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De4TxnAmt&gt;${JoPstdAm}&lt;/v11:De4TxnAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De5ReconAmt&gt;${JoPstdAm}&lt;/v11:De5ReconAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De6BillingAmt&gt;${JoPstdAm}&lt;/v11:De6BillingAmt&gt;&#xd;
            &lt;v11:De12TxnDtTm&gt;${__time(yyMMddHHmmss,)}&lt;/v11:De12TxnDtTm&gt;&#xd;
            &lt;v11:De22PtOfSrvcDataCd&gt;010011111110&lt;/v11:De22PtOfSrvcDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De25MsgReasonCd&gt;3173&lt;/v11:De25MsgReasonCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De26CrdAccptrBusCd&gt;0763&lt;/v11:De26CrdAccptrBusCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:DE28ReconDt xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De31AcqrRefData&gt;${__RandomString(23,0123456789,)}&lt;/v11:De31AcqrRefData&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De32AcqrngInstId&gt;${__RandomString(11,0123456789,)}&lt;/v11:De32AcqrngInstId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;${__RandomString(12,0123456789,)}&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De38ApprovalCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:De38ApprovalCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De41CrdAccptrTermId&gt;NONUSADOME&lt;/v11:De41CrdAccptrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De42CrdAccptrIdCode&gt;${__RandomString(15,0123456789,)}&lt;/v11:De42CrdAccptrIdCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De43CrdAccptrNmLoc&gt;GreenDot Corporation TestE Main PasadenaThisFillerForPositionFourtyOneToEightyThree9110700000CA USA&lt;/v11:De43CrdAccptrNmLoc&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De49CurCodeTxnX&gt;USD&lt;/v11:De49CurCodeTxnX&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:CashbackAmt&gt;0&lt;/v11:CashbackAmt&gt;&#xd;
            &lt;v11:AuthMatchedInd&gt;N&lt;/v11:AuthMatchedInd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmAcqNtwkId&gt;GDOT&lt;/v11:PmAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmMultiClrSeqNum&gt;0&lt;/v11:PmMultiClrSeqNum&gt;&#xd;
            &lt;v11:PmMultiClrSeqCnt&gt;0&lt;/v11:PmMultiClrSeqCnt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PanUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmtActRefNum xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmSpndAlertCde xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:OnbhlfSrvData xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknTxnId&gt;${__RandomString(64,0123456789abcdef,)}&lt;/v11:TknTxnId&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostNetworkMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Transaction-DisbursementIn-NonSim" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\CardProxiesForSimTran.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,JoPstdAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer API-DisbursementIn" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;transferIdentifier&quot;: &quot;${__UUID}&quot;,&#xd;
  &quot;transferType&quot;: &quot;disbursementIn&quot;,&#xd;
  &quot;transferAuthorizationType&quot;: &quot;execute&quot;,&#xd;
  &quot;initiator&quot;: &quot;${PartnerAccountIdentifer_1}&quot;,&#xd;
  &quot;transferRoute&quot;: {&#xd;
    &quot;transactionAmount&quot;: 5.00,&#xd;
    &quot;sourceTransferEndpoint&quot;: {&#xd;
      &quot;transferEndpointType&quot;: &quot;programFundingSource&quot;,&#xd;
      &quot;identifier&quot;: &quot;${PartnerAccountIdentifer_1}&quot;,&#xd;
      &quot;currency&quot;: &quot;USD&quot;&#xd;
    },&#xd;
    &quot;targetTransferEndpoint&quot;: {&#xd;
      &quot;transferEndpointType&quot;: &quot;account&quot;,&#xd;
      &quot;identifier&quot;: &quot;${AccountIdentifier}&quot;,&#xd;
      &quot;currency&quot;: &quot;USD&quot;&#xd;
    }&#xd;
  },&#xd;
&quot;fraudData&quot;:       {&#xd;
  &quot;key&quot;: &quot;string&quot;,&#xd;
  &quot;key&quot;: {&quot;prop1&quot;:&quot;test&quot;,&#xd;
  &quot;prop2&quot;:&quot;BaaS&quot;&#xd;
  }&#xd;
}&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/transfers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__property(accessToken,,)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${AccountIdentifier}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1297677681">&quot;description&quot;:&quot;Success&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Transaction-DisbursementOut-NonSim" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\CardProxiesForSimTran.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,JoPstdAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer API-DisbursementOut" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;transferIdentifier&quot;: &quot;${__UUID}&quot;,&#xd;
  &quot;transferType&quot;: &quot;disbursementOut&quot;,&#xd;
  &quot;transferAuthorizationType&quot;: &quot;execute&quot;,&#xd;
  &quot;initiator&quot;: &quot;${AccountIdentifier}&quot;,&#xd;
  &quot;transferRoute&quot;: {&#xd;
    &quot;transactionAmount&quot;: 1.00,&#xd;
    &quot;sourceTransferEndpoint&quot;: {&#xd;
      &quot;transferEndpointType&quot;: &quot;account&quot;,&#xd;
      &quot;identifier&quot;: &quot;${AccountIdentifier}&quot;,&#xd;
      &quot;currency&quot;: &quot;USD&quot;&#xd;
    },&#xd;
    &quot;targetTransferEndpoint&quot;: {&#xd;
      &quot;transferEndpointType&quot;: &quot;programFundingSource&quot;,&#xd;
      &quot;identifier&quot;: &quot;${PartnerAccountIdentifer_1}&quot;,&#xd;
      &quot;currency&quot;: &quot;USD&quot;&#xd;
    }&#xd;
  },&#xd;
&quot;fraudData&quot;:       {&#xd;
  &quot;key&quot;: &quot;string&quot;,&#xd;
  &quot;key&quot;: {&quot;prop1&quot;:&quot;test&quot;,&#xd;
  &quot;prop2&quot;:&quot;BaaS&quot;&#xd;
  }&#xd;
}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/transfers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__property(accessToken,,)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${AccountIdentifier}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1297677681">&quot;description&quot;:&quot;Success&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Transaction-AchOut-NonSim" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\CardProxiesForSimTran.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,JoPstdAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EncryptBankData" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;requestHeader&quot;: {&#xd;
 &quot;requestId&quot;: &quot;${AccountIdentifier}&quot;&#xd;
 },&#xd;
 &quot;version&quot;: &quot;EC_v1&quot;,&#xd;
 &quot;salt&quot;: &quot;${AccountIdentifier}&quot;,&#xd;
 &quot;programCode&quot;: &quot;${ProgramCode}&quot;,&#xd;
 &quot;data&quot;: &quot;{\&quot;routingNumber\&quot;:\&quot;122000661\&quot;,\&quot;firstName\&quot;:\&quot;Perftest\&quot;,\&quot;lastName\&quot;:\&quot;GBOS\&quot;,\&quot;accountType\&quot;:\&quot;Checking\&quot;,\&quot;bankName\&quot;:\&quot;Bank of America\&quot;,\&quot;accountNumber\&quot;:\&quot;${__Random(000000000000,999999999999,)}\&quot;}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${CRYPTO_API}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">119</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">version_Bank;ephemeralPublicKey_Bank;publicKeyHash_Bank;encryptedData_Bank</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedData.version;$.encryptedData.ephemeralPublicKey;$.encryptedData.publicKeyHash;$.encryptedData.data</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Achout API" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;transferIdentifier&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;transferType&quot;:&quot;achOut&quot;,&#xd;
  &quot;currency&quot;: &quot;USD&quot;,&#xd;
  &quot;transferRoute&quot;: {&#xd;
    &quot;transactionAmount&quot;: 1,&#xd;
    &quot;sourceTransferEndpoint&quot;: {&#xd;
      &quot;transferEndpointType&quot;: &quot;account&quot;,&#xd;
      &quot;accountIdentifier&quot;: &quot;${AccountIdentifier}&quot;&#xd;
    },&#xd;
    &quot;targetTransferEndpoint&quot;: {&#xd;
      &quot;encryptedBankAccount&quot;: {&quot;version&quot;:&quot;${version_Bank}&quot;,&quot;ephemeralPublicKey&quot;:&quot;${ephemeralPublicKey_Bank}&quot;,&quot;publicKeyHash&quot;:&quot;${publicKeyHash_Bank}&quot;,&quot;data&quot;:&quot;${encryptedData_Bank}&quot;}&#xd;
    }&#xd;
  },&#xd;
  &quot;fraudData&quot;: {}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/transfers/ach</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__property(accessToken,,)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">119</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${AccountIdentifier}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1297677681">&quot;description&quot;:&quot;Success&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Transaction-SwipeReload-NonSim" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\CardProxiesForSimTran.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,JoPstdAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SwipeReload" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&#xd;
{&#xd;
  &quot;requestHeader&quot;: {&#xd;
    &quot;requestId&quot;: &quot;${__UUID}&quot;&#xd;
  },&#xd;
  &quot;transferIdentifier&quot;: &quot;${__UUID}&quot;,&#xd;
  &quot;transferAuthorizationType&quot;: &quot;execute&quot;,&#xd;
  &quot;transferType&quot;: &quot;swipeReload&quot;,&#xd;
  &quot;initiator&quot;: &quot;${AccountIdentifier}&quot;,&#xd;
  &quot;transferRoute&quot;: {&#xd;
    &quot;transactionAmount&quot;: 1.5,&#xd;
    &quot;sourceTransferEndpoint&quot;: {&#xd;
      &quot;transferEndpointType&quot;: &quot;retailSale&quot;,&#xd;
      &quot;retailSaleData&quot;: {&quot;merchantName&quot;:&quot;Test-Mart&quot;,&quot;storeNumber&quot;:&quot;42&quot;,&quot;city&quot;:&quot;Pasadena&quot;,&quot;state&quot;:&quot;CA&quot;},&#xd;
      &quot;currency&quot;: &quot;USD&quot;&#xd;
    },&#xd;
    &quot;targetTransferEndpoint&quot;: {&#xd;
      &quot;transferEndpointType&quot;: &quot;account&quot;,&#xd;
      &quot;identifier&quot;: &quot;${AccountIdentifier}&quot;,&#xd;
      &quot;currency&quot;: &quot;USD&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${CORE_API}/${ProgramCode}/transfers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1989722788">&quot;message&quot;:&quot;Success&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="UpdateTransactions - GetTransactionFromDB" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">30</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="RESULT_FILE" elementType="Argument">
              <stringProp name="Argument.name">RESULT_FILE</stringProp>
              <stringProp name="Argument.value">TransactionData.csv</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\CardProxiesForSimTran.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,JoPstdAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">
--Select top ${NUMBER_OF_ACCOUNTS}  RTRIM(AccountBalanceExternalProxy) as AccountBalanceExternalProxy, 
--RTRIM(PaymentIdentifierProxy) as PaymentIdentifierProxy, a.AccountIdentifier
--From AccountBalance As ab with(nolock)
--inner Join Account As a with(nolock)
--On ab.AccountKey = a.AccountKey
--INNER JOIN Product AS p with(nolock)
--ON p.ProductKey=a.ProductKey
--inner Join AccountHolder As ah with(nolock)
--On ah.AccountKey = a.AccountKey
--inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
--On ahpi.AccountHolderKey = ah.AccountHolderKey
--inner Join PaymentIdentifier As pid with(nolock)
--On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
--where p.ProductCode=&apos;${ProductCode}&apos;
--and  ab.AvailableBalance&gt;1
--and a.CreateDate BETWEEN &apos;${StartDate}&apos; and &apos;${EndDate}&apos;


select top 60 PostTransactionKey from PostTransaction where AccountIdentifier=&apos;${AccountIdentifier}&apos;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PostTransactionKey</stringProp>
          <stringProp name="resultVariable">AccountList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

// initialize a Random object somewhere; you should only need one
Random random = new Random();

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{
	int day = random.nextInt(30) + 3;

	fstream.write(row.get(&quot;PostTransactionKey&quot;) + &quot;,&quot; + day + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="UpdateTransactions - Update" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\TransactionData.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">PostTransactionKey,day</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Update transaction date" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">
declare @day int
set @day = ${day}

update PostTransaction
set ProcessorBusinessDate = CONVERT(char(10), DATEADD(DAY, -@day, GETDATE()),126),
ProcessorTransactionDate = DATEADD(DAY, -@day, GETDATE()),
TransactionMatchDate = DATEADD(DAY, -@day, GETDATE()),
 TransactionDate = DATEADD(DAY, -@day, GETDATE()),
CreateDate = DATEADD(DAY, -@day, GETDATE()),
ChangeDate= DATEADD(DAY, -@day, GETDATE())
where PostTransactionKey=&apos;${PostTransactionKey}&apos;


</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Smoketest" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">30</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\TJF_CardProxyList-mixed.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,ProgramCode,MqHdrOwnerLevel1</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GenerateRandomValues" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutAuthMessage" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutAuthMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel1}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AuATm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuADt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCrdAccptId&gt;Non Us Domestic&lt;/v11:AuCrdAccptId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrZipCd&gt;91107&lt;/v11:AuMrZipCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCntryCd&gt;USA&lt;/v11:AuMrCntryCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCatgCd&gt;0763&lt;/v11:AuMrCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFgnExpIn&gt;D&lt;/v11:AuFgnExpIn&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAStCd&gt;CA&lt;/v11:AuAStCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuACrdExpDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P1461D,,)}&lt;/v11:AuACrdExpDt&gt;&#xd;
            &lt;v11:AuATrTermId&gt;FLPBLX1028&lt;/v11:AuATrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuOfflnAcsCd&gt;1&lt;/v11:AuOfflnAcsCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuARespCd&gt;APV&lt;/v11:AuARespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrAm&gt;${TransAmt}&lt;/v11:AuTrAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCurCd&gt;USD&lt;/v11:AuCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnOrigAm&gt;${TransAmt}&lt;/v11:AuTxnOrigAm&gt;&#xd;
            &lt;v11:AuTrDs&gt;PTS MTF TEST\\Pasadena&lt;/v11:AuTrDs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaRespCd&gt;000&lt;/v11:AuVisaRespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrTm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrTm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRespApvlCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuRespApvlCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAdVerfRsltCd&gt;8&lt;/v11:AuAdVerfRsltCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAUcsEffDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuAUcsEffDt&gt;&#xd;
            &lt;v11:AuTxnStatIn&gt;I&lt;/v11:AuTxnStatIn&gt;&#xd;
            &lt;v11:AuUcsTxnCd&gt;1035&lt;/v11:AuUcsTxnCd&gt;&#xd;
            &lt;v11:AuTxnCatgCd&gt;0763&lt;/v11:AuTxnCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCsbkAm&gt;1&lt;/v11:AuCsbkAm&gt;&#xd;
            &lt;v11:AuMsgTypeCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuPrgDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P14D,,)}&lt;/v11:AuPrgDt&gt;&#xd;
            &lt;v11:AuPosDa&gt;00010170000J&lt;/v11:AuPosDa&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAppTxnCt&gt;8&lt;/v11:AuAppTxnCt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuStipRsnCd&gt;8&lt;/v11:AuStipRsnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee1Am&gt;1&lt;/v11:AuFee1Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn1Cd&gt;5005&lt;/v11:AuFeeTxn1Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee2Am&gt;3&lt;/v11:AuFee2Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn2Cd&gt;5005&lt;/v11:AuFeeTxn2Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee3Am&gt;5&lt;/v11:AuFee3Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn3Cd&gt;5005&lt;/v11:AuFeeTxn3Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee4Am&gt;8&lt;/v11:AuFee4Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn4Cd&gt;5005&lt;/v11:AuFeeTxn4Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee5Am&gt;13&lt;/v11:AuFee5Am&gt;&#xd;
            &lt;v11:AuFeeTxn5Cd&gt;5005&lt;/v11:AuFeeTxn5Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRqstdTxnAm&gt;${TransAmt}&lt;/v11:AuRqstdTxnAm&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAcqNtwkId&gt;${__RandomString(3,0123456789,)}&lt;/v11:AuAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnSign&gt;DR&lt;/v11:AuTxnSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuObsDataCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuObsDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTknTxnId&gt;${__RandomString(9,0123456789,)}&lt;/v11:AuTknTxnId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaAuCharSw&gt;D&lt;/v11:AuVisaAuCharSw&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuIncrAuInd&gt;false&lt;/v11:AuIncrAuInd&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:IfGeneratePosted&gt;false&lt;/v11:IfGeneratePosted&gt;&#xd;
            &lt;v11:AuRskScrNum&gt;&lt;/v11:AuRskScrNum&gt;&#xd;
            &lt;v11:AuPosEntModeCd&gt;&lt;/v11:AuPosEntModeCd&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;v11:AuRulAdjScrNum&gt;&lt;/v11:AuRulAdjScrNum&gt;&#xd;
            &lt;v11:De055Cvr&gt;&lt;/v11:De055Cvr&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
            &lt;v11:AvailBalSign&gt;&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:AvlBalOdThldSign&gt;&lt;/v11:AvlBalOdThldSign&gt;&#xd;
            &lt;v11:AuIsoProcCd&gt;DE3&lt;/v11:AuIsoProcCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutAuthMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutAuthMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostInternalMessage" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostInternalMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
		&lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel1}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${TransAmt}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;3013&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoSrceCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDescTx&gt;11-004,Interest Paid&lt;/v11:JoTxnDescTx&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDisputeId&gt;${__RandomString(10,0123456789,)}&lt;/v11:JoTxnDisputeId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JxTxnComment&gt;3013comment&lt;/v11:JxTxnComment&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoSysGenRefNr&gt;${__RandomString(16,0123456789,)}&lt;/v11:JoSysGenRefNr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnRsnCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoTxnRsnCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostInternalMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostInternalMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostNetworkMessage-credit" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostNetworkMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
         &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel1}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${TransAmt}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;1035&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn&gt;${__javaScript(${__RandomString(6,0123456789,)}+&quot;-&quot;+${__RandomString(12,0123456789,)}+&quot;-&quot;+${__RandomString(6,0123456789,)},)}&lt;/v11:PmVisaArn&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:De1MsgType&gt;1221&lt;/v11:De1MsgType&gt;&#xd;
            &lt;v11:De3ProcessingCode&gt;${__RandomString(6,0123456789,)}&lt;/v11:De3ProcessingCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De4TxnAmt&gt;${TransAmt}&lt;/v11:De4TxnAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De5ReconAmt&gt;${TransAmt}&lt;/v11:De5ReconAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De6BillingAmt&gt;${TransAmt}&lt;/v11:De6BillingAmt&gt;&#xd;
            &lt;v11:De12TxnDtTm&gt;${__time(yyMMddHHmmss,)}&lt;/v11:De12TxnDtTm&gt;&#xd;
            &lt;v11:De22PtOfSrvcDataCd&gt;010011111110&lt;/v11:De22PtOfSrvcDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De25MsgReasonCd&gt;4361&lt;/v11:De25MsgReasonCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De26CrdAccptrBusCd&gt;0763&lt;/v11:De26CrdAccptrBusCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:DE28ReconDt xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De31AcqrRefData&gt;${__RandomString(23,0123456789,)}&lt;/v11:De31AcqrRefData&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De32AcqrngInstId&gt;${__RandomString(11,0123456789,)}&lt;/v11:De32AcqrngInstId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;${__RandomString(12,0123456789,)}&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De38ApprovalCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:De38ApprovalCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De41CrdAccptrTermId&gt;NONUSADOME&lt;/v11:De41CrdAccptrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De42CrdAccptrIdCode&gt;${__RandomString(15,0123456789,)}&lt;/v11:De42CrdAccptrIdCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De43CrdAccptrNmLoc&gt;GreenDot Corporation TestE Main PasadenaThisFillerForPositionFourtyOneToEightyThree9110700000CA USA&lt;/v11:De43CrdAccptrNmLoc&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De49CurCodeTxnX&gt;USD&lt;/v11:De49CurCodeTxnX&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:CashbackAmt&gt;0&lt;/v11:CashbackAmt&gt;&#xd;
            &lt;v11:AuthMatchedInd&gt;N&lt;/v11:AuthMatchedInd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmAcqNtwkId&gt;GDOT&lt;/v11:PmAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmMultiClrSeqNum&gt;0&lt;/v11:PmMultiClrSeqNum&gt;&#xd;
            &lt;v11:PmMultiClrSeqCnt&gt;0&lt;/v11:PmMultiClrSeqCnt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PanUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmtActRefNum xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmSpndAlertCde xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:OnbhlfSrvData xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknTxnId&gt;${__RandomString(64,0123456789abcdef,)}&lt;/v11:TknTxnId&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostNetworkMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value"> &quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostNetworkMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetQueueDepth-Financial" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:GetQueueDepth&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:queueName&gt;&lt;v11:QueueName&gt;BAAS.MASTERCARD.FINANCIAL.REQ&lt;/v11:QueueName&gt;&lt;/v1:queueName&gt;&#xd;
      &lt;/v1:GetQueueDepth&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/GetQueueDepth&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetQueueDepth-NonFinancial" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:GetQueueDepth&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:queueName&gt;&lt;v11:QueueName&gt;BAAS.MASTERCARD.NONFINANCIAL.REQ&lt;/v11:QueueName&gt;&lt;/v1:queueName&gt;&#xd;
      &lt;/v1:GetQueueDepth&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/GetQueueDepth&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
