<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="DataGenerator-CreateTransactionsForAccounts-ACI" enabled="true">
      <stringProp name="TestPlan.comments">${__P(MqHdrOwnerLevel, BS001)}
${__P(ProductCode,S50001)}
${__P(ProgramCode,stash)}
AccountBalanceType: 1,  spend, 2, non-spend
gbr;S40002;GZ001
estatement: 25045422;25595422
kabbage,51731,GZ002
intuitqb,51738,BS007
flex, 51737,BS022
wf,51736,BS004</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ProgramCode" elementType="Argument">
            <stringProp name="Argument.name">ProgramCode</stringProp>
            <stringProp name="Argument.value">${__P(ProgramCode,wf)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProductCode" elementType="Argument">
            <stringProp name="Argument.name">ProductCode</stringProp>
            <stringProp name="Argument.value">${__P(ProductCode,51736)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MqHdrOwnerLevel" elementType="Argument">
            <stringProp name="Argument.name">MqHdrOwnerLevel</stringProp>
            <stringProp name="Argument.value">${__P(MqHdrOwnerLevel,BS004)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="StartDate" elementType="Argument">
            <stringProp name="Argument.name">StartDate</stringProp>
            <stringProp name="Argument.value">${__P(StartDate,2020-11-18 00:00:00.000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EndDate" elementType="Argument">
            <stringProp name="Argument.name">EndDate</stringProp>
            <stringProp name="Argument.value">${__P(EndDate,2021-12-25 00:32:00.000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RootDataDirectory" elementType="Argument">
            <stringProp name="Argument.name">RootDataDirectory</stringProp>
            <stringProp name="Argument.value">${__P(RootDataDirectory, C:\Performance\data)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NUMBER_OF_ACCOUNTS" elementType="Argument">
            <stringProp name="Argument.name">NUMBER_OF_ACCOUNTS</stringProp>
            <stringProp name="Argument.value">${__P(NUMBER_OF_ACCOUNTS,100000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RESULT_FILE_NAME" elementType="Argument">
            <stringProp name="Argument.name">RESULT_FILE_NAME</stringProp>
            <stringProp name="Argument.value">${__P(ResultFileName, CardProxiesForSimTran)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WORKSPACE_PATH" elementType="Argument">
            <stringProp name="Argument.name">WORKSPACE_PATH</stringProp>
            <stringProp name="Argument.value">${__P(WorkspacePath,C:\Performance\data)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IN_AUTH" elementType="Argument">
            <stringProp name="Argument.name">IN_AUTH</stringProp>
            <stringProp name="Argument.value">${__P(IN_AUTH, Basic Y2xpZW50MjpzZWNyZXQy)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Duration" elementType="Argument">
            <stringProp name="Argument.name">Duration</stringProp>
            <stringProp name="Argument.value">${__P(Duration,1800)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ThreadCount" elementType="Argument">
            <stringProp name="Argument.name">ThreadCount</stringProp>
            <stringProp name="Argument.value">${__P(ThreadCount,15)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LoopCount" elementType="Argument">
            <stringProp name="Argument.name">LoopCount</stringProp>
            <stringProp name="Argument.value">${__P(LoopCount,10000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AccountBalanceType" elementType="Argument">
            <stringProp name="Argument.name">AccountBalanceType</stringProp>
            <stringProp name="Argument.value">${__P(AccountBalanceType,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OpenAuth_FILE_NAME" elementType="Argument">
            <stringProp name="Argument.name">OpenAuth_FILE_NAME</stringProp>
            <stringProp name="Argument.value">${__P(OpenAuth_FILE_NAME, CardProxiesForSimTran.csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MinAccountKey" elementType="Argument">
            <stringProp name="Argument.name">MinAccountKey</stringProp>
            <stringProp name="Argument.value">${__P(MinAccountKey,17720597)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MaxAccountKey" elementType="Argument">
            <stringProp name="Argument.name">MaxAccountKey</stringProp>
            <stringProp name="Argument.value">${__P(MaxAccountKey,27517209)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="GBOS Variable" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BOS_DATABASE" elementType="Argument">
            <stringProp name="Argument.name">BOS_DATABASE</stringProp>
            <stringProp name="Argument.value">pfbosdbag.awsnp.gdotawsnp.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OAUTH_API" elementType="Argument">
            <stringProp name="Argument.name">OAUTH_API</stringProp>
            <stringProp name="Argument.value">https://bospart.prf.uw2.gdotawsnp.com/baas/v1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CORE_API" elementType="Argument">
            <stringProp name="Argument.name">CORE_API</stringProp>
            <stringProp name="Argument.value">https://boscore.prf.uw2.gdotawsnp.com/CoreApi/v1/programs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PARTNER_API" elementType="Argument">
            <stringProp name="Argument.name">PARTNER_API</stringProp>
            <stringProp name="Argument.value">https://bospart.prf.uw2.gdotawsnp.com/baas/v1/programs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CRYPTO_API" elementType="Argument">
            <stringProp name="Argument.name">CRYPTO_API</stringProp>
            <stringProp name="Argument.value">https://boscryt.prf.uw2.gdotawsnp.com/Crypto/V1/encrypt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SimulatorTools_Server" elementType="Argument">
            <stringProp name="Argument.name">SimulatorTools_Server</stringProp>
            <stringProp name="Argument.value">https://gdqatools/GDQATools/GDQA_IPSMQSimulator_Bos/IPSMQSimulatorService.svc</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">on-prem simulator tools endpoint</stringProp>
          </elementProp>
          <elementProp name="Minimum" elementType="Argument">
            <stringProp name="Argument.name">Minimum</stringProp>
            <stringProp name="Argument.value">300</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Maxmum" elementType="Argument">
            <stringProp name="Argument.name">Maxmum</stringProp>
            <stringProp name="Argument.value">350</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">https://gdqatools/GDQATools/GDQA_IPSMQSimulator_Bos/IPSMQSimulatorService.svc
G1PFBOSDB01
 qatool.pie.uw2.gdotawsnp.com
</stringProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="BOS GBOS DB Connection" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">GBOS</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${BOS_DATABASE}:1433;databaseName=GBOS</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">G33Nff4%$^</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">qa_automation</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC Get Partner AccountIdentifier" enabled="true">
        <stringProp name="dataSource">GBOS</stringProp>
        <stringProp name="query">select top 1 a.accountIdentifier from Account a
inner join Product p
on a.Productkey=p.productkey
where p.Productcode=&apos;59000&apos;</stringProp>
        <stringProp name="queryArguments"></stringProp>
        <stringProp name="queryArgumentsTypes"></stringProp>
        <stringProp name="queryTimeout">5</stringProp>
        <stringProp name="queryType">Select Statement</stringProp>
        <stringProp name="resultSetHandler">Store as String</stringProp>
        <stringProp name="resultVariable"></stringProp>
        <stringProp name="variableNames">PartnerAccountIdentifer</stringProp>
        <stringProp name="resultSetMaxRows"></stringProp>
      </JDBCPreProcessor>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Smoketest" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config-TJF" enabled="false">
          <stringProp name="filename">${RootDataDirectory}\TJF_CardProxyList-mixed.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,ProgramCode,MqHdrOwnerLevel1</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">TJF_CardProxyList-mixed.csv</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="filename">${RootDataDirectory}\CardProxiesForSimTran_stash.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,JoPstdAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">CardProxiesForSimTran_ubervd.csv
CardProxiesForSimTran.csv
CardProxiesForSimTran_gbr.csv</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GenerateRandomValues" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutAuthMessage" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutAuthMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AuATm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuADt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCrdAccptId&gt;Non Us Domestic&lt;/v11:AuCrdAccptId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrZipCd&gt;91107&lt;/v11:AuMrZipCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCntryCd&gt;USA&lt;/v11:AuMrCntryCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCatgCd&gt;0763&lt;/v11:AuMrCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFgnExpIn&gt;D&lt;/v11:AuFgnExpIn&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAStCd&gt;CA&lt;/v11:AuAStCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuACrdExpDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P1461D,,)}&lt;/v11:AuACrdExpDt&gt;&#xd;
            &lt;v11:AuATrTermId&gt;FLPBLX1028&lt;/v11:AuATrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuOfflnAcsCd&gt;1&lt;/v11:AuOfflnAcsCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuARespCd&gt;APV&lt;/v11:AuARespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrAm&gt;${TransAmt}&lt;/v11:AuTrAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCurCd&gt;USD&lt;/v11:AuCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnOrigAm&gt;${TransAmt}&lt;/v11:AuTxnOrigAm&gt;&#xd;
            &lt;v11:AuTrDs&gt;PTS MTF TEST\\Pasadena&lt;/v11:AuTrDs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaRespCd&gt;000&lt;/v11:AuVisaRespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrTm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrTm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRespApvlCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuRespApvlCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAdVerfRsltCd&gt;8&lt;/v11:AuAdVerfRsltCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAUcsEffDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuAUcsEffDt&gt;&#xd;
            &lt;v11:AuTxnStatIn&gt;I&lt;/v11:AuTxnStatIn&gt;&#xd;
            &lt;v11:AuUcsTxnCd&gt;1035&lt;/v11:AuUcsTxnCd&gt;&#xd;
            &lt;v11:AuTxnCatgCd&gt;0763&lt;/v11:AuTxnCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCsbkAm&gt;1&lt;/v11:AuCsbkAm&gt;&#xd;
            &lt;v11:AuMsgTypeCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuPrgDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P14D,,)}&lt;/v11:AuPrgDt&gt;&#xd;
            &lt;v11:AuPosDa&gt;00010170000J&lt;/v11:AuPosDa&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAppTxnCt&gt;8&lt;/v11:AuAppTxnCt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuStipRsnCd&gt;8&lt;/v11:AuStipRsnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee1Am&gt;1&lt;/v11:AuFee1Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn1Cd&gt;5005&lt;/v11:AuFeeTxn1Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee2Am&gt;3&lt;/v11:AuFee2Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn2Cd&gt;5005&lt;/v11:AuFeeTxn2Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee3Am&gt;5&lt;/v11:AuFee3Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn3Cd&gt;5005&lt;/v11:AuFeeTxn3Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee4Am&gt;8&lt;/v11:AuFee4Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn4Cd&gt;5005&lt;/v11:AuFeeTxn4Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee5Am&gt;13&lt;/v11:AuFee5Am&gt;&#xd;
            &lt;v11:AuFeeTxn5Cd&gt;5005&lt;/v11:AuFeeTxn5Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRqstdTxnAm&gt;${TransAmt}&lt;/v11:AuRqstdTxnAm&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAcqNtwkId&gt;${__RandomString(3,0123456789,)}&lt;/v11:AuAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnSign&gt;DR&lt;/v11:AuTxnSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuObsDataCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuObsDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTknTxnId&gt;${__RandomString(9,0123456789,)}&lt;/v11:AuTknTxnId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaAuCharSw&gt;D&lt;/v11:AuVisaAuCharSw&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuIncrAuInd&gt;false&lt;/v11:AuIncrAuInd&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:IfGeneratePosted&gt;false&lt;/v11:IfGeneratePosted&gt;&#xd;
            &lt;v11:AuRskScrNum&gt;&lt;/v11:AuRskScrNum&gt;&#xd;
            &lt;v11:AuPosEntModeCd&gt;&lt;/v11:AuPosEntModeCd&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;v11:AuRulAdjScrNum&gt;&lt;/v11:AuRulAdjScrNum&gt;&#xd;
            &lt;v11:De055Cvr&gt;&lt;/v11:De055Cvr&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
            &lt;v11:AvailBalSign&gt;&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:AvlBalOdThldSign&gt;&lt;/v11:AvlBalOdThldSign&gt;&#xd;
            &lt;v11:AuIsoProcCd&gt;DE3&lt;/v11:AuIsoProcCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutAuthMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutAuthMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostInternalMessage" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostInternalMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
		&lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${TransAmt}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;3013&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoSrceCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDescTx&gt;11-004,Interest Paid&lt;/v11:JoTxnDescTx&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDisputeId&gt;${__RandomString(10,0123456789,)}&lt;/v11:JoTxnDisputeId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JxTxnComment&gt;3013comment&lt;/v11:JxTxnComment&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoSysGenRefNr&gt;${__RandomString(16,0123456789,)}&lt;/v11:JoSysGenRefNr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnRsnCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoTxnRsnCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostInternalMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostInternalMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostNetworkMessage-credit" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostNetworkMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
         &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${TransAmt}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;1035&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn&gt;${__javaScript(${__RandomString(6,0123456789,)}+&quot;-&quot;+${__RandomString(12,0123456789,)}+&quot;-&quot;+${__RandomString(6,0123456789,)},)}&lt;/v11:PmVisaArn&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:De1MsgType&gt;1221&lt;/v11:De1MsgType&gt;&#xd;
            &lt;v11:De3ProcessingCode&gt;${__RandomString(6,0123456789,)}&lt;/v11:De3ProcessingCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De4TxnAmt&gt;${TransAmt}&lt;/v11:De4TxnAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De5ReconAmt&gt;${TransAmt}&lt;/v11:De5ReconAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De6BillingAmt&gt;${TransAmt}&lt;/v11:De6BillingAmt&gt;&#xd;
            &lt;v11:De12TxnDtTm&gt;${__time(yyMMddHHmmss,)}&lt;/v11:De12TxnDtTm&gt;&#xd;
            &lt;v11:De22PtOfSrvcDataCd&gt;010011111110&lt;/v11:De22PtOfSrvcDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De25MsgReasonCd&gt;4361&lt;/v11:De25MsgReasonCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De26CrdAccptrBusCd&gt;0763&lt;/v11:De26CrdAccptrBusCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:DE28ReconDt xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De31AcqrRefData&gt;${__RandomString(23,0123456789,)}&lt;/v11:De31AcqrRefData&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De32AcqrngInstId&gt;${__RandomString(11,0123456789,)}&lt;/v11:De32AcqrngInstId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;${__RandomString(12,0123456789,)}&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De38ApprovalCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:De38ApprovalCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De41CrdAccptrTermId&gt;NONUSADOME&lt;/v11:De41CrdAccptrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De42CrdAccptrIdCode&gt;${__RandomString(15,0123456789,)}&lt;/v11:De42CrdAccptrIdCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De43CrdAccptrNmLoc&gt;GreenDot Corporation TestE Main PasadenaThisFillerForPositionFourtyOneToEightyThree9110700000CA USA&lt;/v11:De43CrdAccptrNmLoc&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De49CurCodeTxnX&gt;USD&lt;/v11:De49CurCodeTxnX&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:CashbackAmt&gt;0&lt;/v11:CashbackAmt&gt;&#xd;
            &lt;v11:AuthMatchedInd&gt;N&lt;/v11:AuthMatchedInd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmAcqNtwkId&gt;GDOT&lt;/v11:PmAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmMultiClrSeqNum&gt;0&lt;/v11:PmMultiClrSeqNum&gt;&#xd;
            &lt;v11:PmMultiClrSeqCnt&gt;0&lt;/v11:PmMultiClrSeqCnt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PanUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmtActRefNum xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmSpndAlertCde xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:OnbhlfSrvData xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknTxnId&gt;${__RandomString(64,0123456789abcdef,)}&lt;/v11:TknTxnId&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostNetworkMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value"> &quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostNetworkMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetQueueDepth-Financial-Default" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:GetQueueDepth&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:queueName&gt;&lt;v11:QueueName&gt;DEFAULT.MASTERCARD.FINANCIAL.REQ&lt;/v11:QueueName&gt;&lt;/v1:queueName&gt;&#xd;
      &lt;/v1:GetQueueDepth&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/GetQueueDepth&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetQueueDepth-NonFinancial-Default" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:GetQueueDepth&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:queueName&gt;&lt;v11:QueueName&gt;DEFAULT.MASTERCARD.NONFINANCIAL.REQ&lt;/v11:QueueName&gt;&lt;/v1:queueName&gt;&#xd;
      &lt;/v1:GetQueueDepth&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/GetQueueDepth&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetMessages-Financial-Default" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:GetMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:MaxMessagesToRetrieve&gt;100&lt;/v11:MaxMessagesToRetrieve&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:QueueName&gt;DEFAULT.MASTERCARD.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:GetMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/GetMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetQueueDepth-Exception-Baas" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:GetQueueDepth&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:queueName&gt;&lt;v11:QueueName&gt;GDC.EXCEPTIONS&lt;/v11:QueueName&gt;&lt;/v1:queueName&gt;&#xd;
      &lt;/v1:GetQueueDepth&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/GetQueueDepth&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetQueueDepth-Financial-Baas" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:GetQueueDepth&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:queueName&gt;&lt;v11:QueueName&gt;BAAS.MASTERCARD.FINANCIAL.REQ&lt;/v11:QueueName&gt;&lt;/v1:queueName&gt;&#xd;
      &lt;/v1:GetQueueDepth&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/GetQueueDepth&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetQueueDepth-Financial-Uber" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:GetQueueDepth&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:queueName&gt;&lt;v11:QueueName&gt;UBER.MASTERCARD.FINANCIAL.REQ&lt;/v11:QueueName&gt;&lt;/v1:queueName&gt;&#xd;
      &lt;/v1:GetQueueDepth&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/GetQueueDepth&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetQueueDepth-NonFinancial-BaaS" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:GetQueueDepth&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:queueName&gt;&lt;v11:QueueName&gt;BAAS.MASTERCARD.NONFINANCIAL.REQ&lt;/v11:QueueName&gt;&lt;/v1:queueName&gt;&#xd;
      &lt;/v1:GetQueueDepth&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/GetQueueDepth&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetMessages-Financial-BaaS" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:GetMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:MaxMessagesToRetrieve&gt;100&lt;/v11:MaxMessagesToRetrieve&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:QueueName&gt;BAAS.MASTERCARD.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:GetMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/GetMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetMessages-NonFinancial-BaaS" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:GetMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:MaxMessagesToRetrieve&gt;100&lt;/v11:MaxMessagesToRetrieve&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:QueueName&gt;BAAS.MASTERCARD.NONFINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:GetMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/GetMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetMessages-ExceptionBaaS" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:GetMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:MaxMessagesToRetrieve&gt;100&lt;/v11:MaxMessagesToRetrieve&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:QueueName&gt;GDC.EXCEPTIONS&lt;/v11:QueueName&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:GetMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/GetMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetMessages-Financial-UBER" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:GetMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:MaxMessagesToRetrieve&gt;100&lt;/v11:MaxMessagesToRetrieve&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:QueueName&gt;UBER.MASTERCARD.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:GetMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/GetMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetMessages-Financial-ACI" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:GetMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:MaxMessagesToRetrieve&gt;100&lt;/v11:MaxMessagesToRetrieve&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:GetMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/GetMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetMessages-NonFinancial-ACI" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:GetMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:MaxMessagesToRetrieve&gt;100&lt;/v11:MaxMessagesToRetrieve&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.NONFINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:GetMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/GetMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetQueueDepth-Financial-ACI" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:GetQueueDepth&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:queueName&gt;&lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&lt;/v1:queueName&gt;&#xd;
      &lt;/v1:GetQueueDepth&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/GetQueueDepth&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetQueueDepth-Financial-ACI" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:GetQueueDepth&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:queueName&gt;&lt;v11:QueueName&gt;ACI.NONFINANCIAL.REQ&lt;/v11:QueueName&gt;&lt;/v1:queueName&gt;&#xd;
      &lt;/v1:GetQueueDepth&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/GetQueueDepth&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostInternalMessage-Conversion" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostInternalMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
		&lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;GZ002&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;55811492811983&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;1529770008165795&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${TransAmt}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;3013&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoSrceCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDescTx&gt;11-004,Interest Paid&lt;/v11:JoTxnDescTx&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDisputeId&gt;${__RandomString(10,0123456789,)}&lt;/v11:JoTxnDisputeId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JxTxnComment&gt;3013comment&lt;/v11:JxTxnComment&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoSysGenRefNr&gt;${__RandomString(16,0123456789,)}&lt;/v11:JoSysGenRefNr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnRsnCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoTxnRsnCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostInternalMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostInternalMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GetAccountToSimTrans-ACI" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">kabbage,51731,GZ002</stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">
--distinct
Select  top ${NUMBER_OF_ACCOUNTS} RTRIM(a.ACIAccountExternalID) as ACIAccountExternalID, 
RTRIM(PaymentIdentifierProxy) as PaymentIdentifierProxy, a.AccountIdentifier, ab.AccountBalanceIdentifier,RTRIM(AccountBalanceExternalProxy) as AccountBalanceExternalProxy
From AccountBalance As ab with(nolock)
inner Join Account As a with(nolock)
On ab.AccountKey = a.AccountKey
INNER JOIN Product AS p with(nolock)
ON p.ProductKey=a.ProductKey
INNER JOIN AccountBillCycle abc with (NOLOCK) 
ON abc.AccountKey = a.AccountKey
inner Join AccountHolder As ah with(nolock)
On ah.AccountKey = a.AccountKey
inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
On ahpi.AccountHolderKey = ah.AccountHolderKey
inner Join PaymentIdentifier As pid with(nolock)
On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
--inner join PostTransaction PIT with(NOLOCK) 
--ON PIT.AccountIdentifier = A.AccountIdentifier
where p.ProductCode=&apos;${ProductCode}&apos;
and  ab.AvailableBalance&gt;=0
and a.AccountStatusKey=2 --and AccountBalanceExternalProxy !=&apos;&apos;
--and abc.ActivationDate &lt; GETDATE()-35
--and PIT.ProcessorBusinessDate &gt; GETDATE()-30 and PIT.ProcessorBusinessDate &lt; GETDATE()-4
--and a.CreateDate=&apos;2018-10-29 01:34:30.620&apos;
and ab.AccountBalanceTypeKey  in (1,2)
--and ab.AccountBalanceTypeKey = ${AccountBalanceType}
--order by newid() desc

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">ACIAccountExternalID,PaymentIdentifierProxy,AccountIdentifier,AccountBalanceIdentifier,AccountBalanceExternalProxy</stringProp>
          <stringProp name="resultVariable">AccountList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db - estatement" enabled="false">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">
Select distinct TOP  ${NUMBER_OF_ACCOUNTS} RTRIM(AccountBalanceExternalProxy) as AccountBalanceExternalProxy, 
RTRIM(PaymentIdentifierProxy) as PaymentIdentifierProxy, a.AccountIdentifier
From AccountBalance As ab with(nolock)
inner Join Account As a with(nolock)
On ab.AccountKey = a.AccountKey
INNER JOIN Product AS p with(nolock)
ON p.ProductKey=a.ProductKey
INNER JOIN AccountBillCycle abc with (NOLOCK) 
ON abc.AccountKey = a.AccountKey
inner Join AccountHolder As ah with(nolock)
On ah.AccountKey = a.AccountKey
inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
On ahpi.AccountHolderKey = ah.AccountHolderKey
inner Join PaymentIdentifier As pid with(nolock)
On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
inner join PostTransaction PIT with(NOLOCK) 
ON PIT.AccountIdentifier = A.AccountIdentifier
where p.ProductCode=&apos;${ProductCode}&apos;
and  ab.AvailableBalance&gt;1
and a.AccountStatusKey=2
--and abc.ActivationDate &lt; GETDATE()-33
--and PIT.ProcessorBusinessDate &gt; GETDATE()-30 and PIT.ProcessorBusinessDate &lt; GETDATE()-4
and A.Accountkey&gt;${MinAccountKey}
and A.Accountkey&lt;${MaxAccountKey}
--order by A.accountKey asc
--and a.CreateDate=&apos;2018-10-29 01:34:30.620&apos;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier</stringProp>
          <stringProp name="resultVariable">AccountList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get Account from db - addfriends" enabled="false">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Select  top 50000 RTRIM(AccountBalanceExternalProxy) as AccountBalanceExternalProxy, 
RTRIM(PaymentIdentifierProxy) as PaymentIdentifierProxy, a.AccountIdentifier, ab.AccountBalanceIdentifier
From AccountBalance As ab with(nolock)
inner Join Account As a with(nolock)
On ab.AccountKey = a.AccountKey
INNER JOIN Product AS p with(nolock)
ON p.ProductKey=a.ProductKey
INNER JOIN AccountBillCycle abc with (NOLOCK) 
ON abc.AccountKey = a.AccountKey
inner Join AccountHolder As ah with(nolock)
On ah.AccountKey = a.AccountKey
inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
On ahpi.AccountHolderKey = ah.AccountHolderKey
inner Join PaymentIdentifier As pid with(nolock)
On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
INNER JOIN dbo.PaymentInstrument as pin with(nolock)
ON pin.PaymentIdentifierKey = pid.PaymentIdentifierKey
--inner join PostTransaction PIT with(NOLOCK) 
--ON PIT.AccountIdentifier = A.AccountIdentifier
where p.ProductCode=&apos;S40002&apos;
and  ab.AvailableBalance&gt;=0
and a.AccountStatusKey=2
--and abc.ActivationDate &lt; GETDATE()-35
--and PIT.ProcessorBusinessDate &gt; GETDATE()-30 and PIT.ProcessorBusinessDate &lt; GETDATE()-4
--and a.CreateDate=&apos;2018-10-29 01:34:30.620&apos;
and  a.CreateDate &lt; getDate()-4
--and ab.AvailableBalanceAsOfDate &lt; getDate()-4
--and ab.LedgerBalanceAsOfDate &lt; getDate()-4
and a.CreateDate BETWEEN &apos;2021-01-01&apos; and &apos;2021-06-07&apos;
and ab.AccountBalanceTypeKey  in (1,2)
AND DATEDIFF(d, pin.ActivationDate, &apos;2021-06-09 00:00:00&apos;)
             BETWEEN 0 AND 90
--and ab.AccountBalanceTypeKey = ${AccountBalanceType}
--order by newid() desc

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,AccountBalanceIdentifier</stringProp>
          <stringProp name="resultVariable">AccountList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

// initialize a Random object somewhere; you should only need one
Random random = new Random();

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}_${ProgramCode}.csv&quot;,true);
//AccountBalanceExternalProxy,ACIAccountExternalID,PaymentIdentifierProxy,AccountIdentifier,AccountBalanceIdentifier
for (var row : vars.getObject(&quot;AccountList&quot;))
{
	int amount = random.nextInt(100) + 10;
	fstream.write( row.get(&quot;ACIAccountExternalID&quot;) +  &quot;,&quot; + row.get(&quot;PaymentIdentifierProxy&quot;) +  &quot;,&quot; + row.get(&quot;AccountIdentifier&quot;) +&quot;,&quot;+ amount + &quot;,&quot; + row.get(&quot;AccountBalanceExternalProxy&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
 </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Data Splitter Execution" enabled="false">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\GDQA_PerfDataSplitter\GDQA_PerfDataSplitter.exe</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\SplitFiles</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="LoopCopy" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get current index" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

try{
	log.info(&quot;Current count:&quot; + String.valueOf(${__jm__LoopCopy__idx}+1));
	vars.put(&quot;CurrentIndex&quot;, String.valueOf(${__jm__LoopCopy__idx}+1));
	vars.put(&quot;CurrentRemoteServerIndex&quot;, String.valueOf(${__jm__LoopCopy__idx}+2));
}
catch (Throwable ex)
{
	log.error(&quot;Error in Get-current-index script&quot;, ex);
	throw ex;
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder" enabled="true">
            <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
            <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
            <stringProp name="SystemSampler.command">cmd.exe</stringProp>
            <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">/c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">copy /b /y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">.\\${CurrentIndex}\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">\\\\g1pfbosload0${CurrentRemoteServerIndex}\\data\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\SplitFiles</stringProp>
          </SystemSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GenerateTransaction-APVAuth-PostInt-ACI" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">6</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <stringProp name="ThreadGroup.delay">10</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="TestPlan.comments">For ACI, the programcode is dayforce, the productcode is 51711</stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">SOAPAction</stringProp>
              <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutAuthMessage&quot; </stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="filename">${RootDataDirectory}\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,AuTrAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">ACIAccountExternalID,PaymentIdentifierProxy,AccountIdentifier,AuTrAm,AccountBalanceExternalProxy</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GenerateRandomValues" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(10) + 10;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutAuthMessage-ACI" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutAuthMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AuATm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuADt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCrdAccptId&gt;Non Us Domestic&lt;/v11:AuCrdAccptId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrZipCd&gt;91107&lt;/v11:AuMrZipCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCntryCd&gt;USA&lt;/v11:AuMrCntryCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCatgCd&gt;0763&lt;/v11:AuMrCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFgnExpIn&gt;D&lt;/v11:AuFgnExpIn&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAStCd&gt;CA&lt;/v11:AuAStCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuACrdExpDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P1461D,,)}&lt;/v11:AuACrdExpDt&gt;&#xd;
            &lt;v11:AuATrTermId&gt;FLPBLX1028&lt;/v11:AuATrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuOfflnAcsCd&gt;1&lt;/v11:AuOfflnAcsCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuARespCd&gt;APV&lt;/v11:AuARespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrAm&gt;${TransAmt}&lt;/v11:AuTrAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCurCd&gt;USD&lt;/v11:AuCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnOrigAm&gt;${TransAmt}&lt;/v11:AuTxnOrigAm&gt;&#xd;
            &lt;v11:AuTrDs&gt;PTS MTF TEST\\Pasadena&lt;/v11:AuTrDs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaRespCd&gt;000&lt;/v11:AuVisaRespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrTm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrTm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRespApvlCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuRespApvlCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAdVerfRsltCd&gt;8&lt;/v11:AuAdVerfRsltCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAUcsEffDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuAUcsEffDt&gt;&#xd;
            &lt;v11:AuTxnStatIn&gt;I&lt;/v11:AuTxnStatIn&gt;&#xd;
            &lt;v11:AuUcsTxnCd&gt;1035&lt;/v11:AuUcsTxnCd&gt;&#xd;
            &lt;v11:AuTxnCatgCd&gt;0763&lt;/v11:AuTxnCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCsbkAm&gt;1&lt;/v11:AuCsbkAm&gt;&#xd;
            &lt;v11:AuMsgTypeCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuPrgDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P14D,,)}&lt;/v11:AuPrgDt&gt;&#xd;
            &lt;v11:AuPosDa&gt;00010170000J&lt;/v11:AuPosDa&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAppTxnCt&gt;8&lt;/v11:AuAppTxnCt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuStipRsnCd&gt;8&lt;/v11:AuStipRsnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee1Am&gt;1&lt;/v11:AuFee1Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn1Cd&gt;5005&lt;/v11:AuFeeTxn1Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee2Am&gt;3&lt;/v11:AuFee2Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn2Cd&gt;5005&lt;/v11:AuFeeTxn2Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee3Am&gt;5&lt;/v11:AuFee3Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn3Cd&gt;5005&lt;/v11:AuFeeTxn3Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee4Am&gt;8&lt;/v11:AuFee4Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn4Cd&gt;5005&lt;/v11:AuFeeTxn4Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee5Am&gt;13&lt;/v11:AuFee5Am&gt;&#xd;
            &lt;v11:AuFeeTxn5Cd&gt;5005&lt;/v11:AuFeeTxn5Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRqstdTxnAm&gt;${TransAmt}&lt;/v11:AuRqstdTxnAm&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAcqNtwkId&gt;${__RandomString(3,0123456789,)}&lt;/v11:AuAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnSign&gt;DR&lt;/v11:AuTxnSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuObsDataCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuObsDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTknTxnId&gt;${__RandomString(9,0123456789,)}&lt;/v11:AuTknTxnId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaAuCharSw&gt;D&lt;/v11:AuVisaAuCharSw&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuIncrAuInd&gt;false&lt;/v11:AuIncrAuInd&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:IfGeneratePosted&gt;false&lt;/v11:IfGeneratePosted&gt;&#xd;
            &lt;v11:AuRskScrNum&gt;&lt;/v11:AuRskScrNum&gt;&#xd;
            &lt;v11:AuPosEntModeCd&gt;&lt;/v11:AuPosEntModeCd&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;v11:AuRulAdjScrNum&gt;&lt;/v11:AuRulAdjScrNum&gt;&#xd;
            &lt;v11:De055Cvr&gt;&lt;/v11:De055Cvr&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
            &lt;v11:AvailBalSign&gt;&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:AvlBalOdThldSign&gt;&lt;/v11:AvlBalOdThldSign&gt;&#xd;
            &lt;v11:AuIsoProcCd&gt;DE3&lt;/v11:AuIsoProcCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutAuthMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutAuthMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostInternalMessage-0548" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostInternalMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
		&lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${TransAmt}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;0548&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoSrceCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDescTx&gt;1-014,Swipe Reload&lt;/v11:JoTxnDescTx&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDisputeId&gt;${__RandomString(10,0123456789,)}&lt;/v11:JoTxnDisputeId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JxTxnComment&gt;0548comment&lt;/v11:JxTxnComment&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoSysGenRefNr&gt;${__RandomString(16,0123456789,)}&lt;/v11:JoSysGenRefNr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnRsnCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoTxnRsnCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostInternalMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">3013; 11-004,Interest Paid; 3013comment
4083;9-008,Monthly Maintenance Fee;4083comment
0548,1-014,Swipe Reload</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostInternalMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostInternalMessage-4083" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostInternalMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
		&lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${TransAmt}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;4083&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoSrceCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDescTx&gt;9-008,Monthly Maintenance Fee&lt;/v11:JoTxnDescTx&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDisputeId&gt;${__RandomString(10,0123456789,)}&lt;/v11:JoTxnDisputeId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JxTxnComment&gt;4083comment&lt;/v11:JxTxnComment&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoSysGenRefNr&gt;${__RandomString(16,0123456789,)}&lt;/v11:JoSysGenRefNr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnRsnCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoTxnRsnCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostInternalMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">3013; 11-004,Interest Paid; 3013comment
4083;9-008,Monthly Maintenance Fee;4083comment
0548,1-014,Swipe Reload</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostInternalMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostInternalMessage-4344" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostInternalMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
		&lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${TransAmt}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;4344&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoSrceCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDescTx&gt;11-004 ,Interest Earned Credit&lt;/v11:JoTxnDescTx&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDisputeId&gt;${__RandomString(10,0123456789,)}&lt;/v11:JoTxnDisputeId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JxTxnComment&gt;4344comment&lt;/v11:JxTxnComment&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoSysGenRefNr&gt;${__RandomString(16,0123456789,)}&lt;/v11:JoSysGenRefNr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnRsnCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoTxnRsnCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostInternalMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">3013; 11-004,Interest Paid; 3013comment
4083;9-008,Monthly Maintenance Fee;4083comment
0548,1-014,Swipe Reload
4344;11-004 ,Interest Earned Credit;4344comment</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostInternalMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GenerateTransaction-APVAuth-PostInt-PostNetwork-ACI" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <stringProp name="ThreadGroup.delay">10</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="TestPlan.comments">For ACI, the programcode is dayforce, the productcode is 51711</stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="filename">${RootDataDirectory}\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,AuTrAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">ACIAccountExternalID,PaymentIdentifierProxy,AccountIdentifier,AuTrAm,AccountBalanceExternalProxy</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GenerateRandomValues" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(10) + 10;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutAuthMessage-ACI" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutAuthMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AuATm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuADt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCrdAccptId&gt;Non Us Domestic&lt;/v11:AuCrdAccptId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrZipCd&gt;91107&lt;/v11:AuMrZipCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCntryCd&gt;USA&lt;/v11:AuMrCntryCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCatgCd&gt;0763&lt;/v11:AuMrCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFgnExpIn&gt;D&lt;/v11:AuFgnExpIn&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAStCd&gt;CA&lt;/v11:AuAStCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuACrdExpDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P1461D,,)}&lt;/v11:AuACrdExpDt&gt;&#xd;
            &lt;v11:AuATrTermId&gt;FLPBLX1028&lt;/v11:AuATrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuOfflnAcsCd&gt;1&lt;/v11:AuOfflnAcsCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuARespCd&gt;APV&lt;/v11:AuARespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrAm&gt;${TransAmt}&lt;/v11:AuTrAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCurCd&gt;USD&lt;/v11:AuCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnOrigAm&gt;${TransAmt}&lt;/v11:AuTxnOrigAm&gt;&#xd;
            &lt;v11:AuTrDs&gt;PTS MTF TEST\\Pasadena&lt;/v11:AuTrDs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaRespCd&gt;000&lt;/v11:AuVisaRespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrTm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrTm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRespApvlCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuRespApvlCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAdVerfRsltCd&gt;8&lt;/v11:AuAdVerfRsltCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAUcsEffDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuAUcsEffDt&gt;&#xd;
            &lt;v11:AuTxnStatIn&gt;I&lt;/v11:AuTxnStatIn&gt;&#xd;
            &lt;v11:AuUcsTxnCd&gt;1035&lt;/v11:AuUcsTxnCd&gt;&#xd;
            &lt;v11:AuTxnCatgCd&gt;0763&lt;/v11:AuTxnCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCsbkAm&gt;1&lt;/v11:AuCsbkAm&gt;&#xd;
            &lt;v11:AuMsgTypeCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuPrgDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P14D,,)}&lt;/v11:AuPrgDt&gt;&#xd;
            &lt;v11:AuPosDa&gt;00010170000J&lt;/v11:AuPosDa&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAppTxnCt&gt;8&lt;/v11:AuAppTxnCt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuStipRsnCd&gt;8&lt;/v11:AuStipRsnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee1Am&gt;1&lt;/v11:AuFee1Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn1Cd&gt;5005&lt;/v11:AuFeeTxn1Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee2Am&gt;3&lt;/v11:AuFee2Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn2Cd&gt;5005&lt;/v11:AuFeeTxn2Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee3Am&gt;5&lt;/v11:AuFee3Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn3Cd&gt;5005&lt;/v11:AuFeeTxn3Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee4Am&gt;8&lt;/v11:AuFee4Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn4Cd&gt;5005&lt;/v11:AuFeeTxn4Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee5Am&gt;13&lt;/v11:AuFee5Am&gt;&#xd;
            &lt;v11:AuFeeTxn5Cd&gt;5005&lt;/v11:AuFeeTxn5Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRqstdTxnAm&gt;${TransAmt}&lt;/v11:AuRqstdTxnAm&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAcqNtwkId&gt;${__RandomString(3,0123456789,)}&lt;/v11:AuAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnSign&gt;DR&lt;/v11:AuTxnSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuObsDataCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuObsDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTknTxnId&gt;${__RandomString(9,0123456789,)}&lt;/v11:AuTknTxnId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaAuCharSw&gt;D&lt;/v11:AuVisaAuCharSw&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuIncrAuInd&gt;false&lt;/v11:AuIncrAuInd&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:IfGeneratePosted&gt;false&lt;/v11:IfGeneratePosted&gt;&#xd;
            &lt;v11:AuRskScrNum&gt;&lt;/v11:AuRskScrNum&gt;&#xd;
            &lt;v11:AuPosEntModeCd&gt;&lt;/v11:AuPosEntModeCd&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;v11:AuRulAdjScrNum&gt;&lt;/v11:AuRulAdjScrNum&gt;&#xd;
            &lt;v11:De055Cvr&gt;&lt;/v11:De055Cvr&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
            &lt;v11:AvailBalSign&gt;&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:AvlBalOdThldSign&gt;&lt;/v11:AvlBalOdThldSign&gt;&#xd;
            &lt;v11:AuIsoProcCd&gt;DE3&lt;/v11:AuIsoProcCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutAuthMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(10) + 10;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutAuthMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostNetworkMessage-credit" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostNetworkMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
         &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
             &lt;v11:QueueName&gt;ACI.NONFINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${JoPstdAm}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;1035&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn&gt;${__javaScript(${__RandomString(6,0123456789,)}+&quot;-&quot;+${__RandomString(12,0123456789,)}+&quot;-&quot;+${__RandomString(6,0123456789,)},)}&lt;/v11:PmVisaArn&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:De1MsgType&gt;1221&lt;/v11:De1MsgType&gt;&#xd;
            &lt;v11:De3ProcessingCode&gt;${__RandomString(6,0123456789,)}&lt;/v11:De3ProcessingCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De4TxnAmt&gt;${JoPstdAm}&lt;/v11:De4TxnAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De5ReconAmt&gt;${JoPstdAm}&lt;/v11:De5ReconAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De6BillingAmt&gt;${JoPstdAm}&lt;/v11:De6BillingAmt&gt;&#xd;
            &lt;v11:De12TxnDtTm&gt;${__time(yyMMddHHmmss,)}&lt;/v11:De12TxnDtTm&gt;&#xd;
            &lt;v11:De22PtOfSrvcDataCd&gt;010011111110&lt;/v11:De22PtOfSrvcDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De25MsgReasonCd&gt;4361&lt;/v11:De25MsgReasonCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De26CrdAccptrBusCd&gt;0763&lt;/v11:De26CrdAccptrBusCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:DE28ReconDt xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De31AcqrRefData&gt;${__RandomString(23,0123456789,)}&lt;/v11:De31AcqrRefData&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De32AcqrngInstId&gt;${__RandomString(11,0123456789,)}&lt;/v11:De32AcqrngInstId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;${__RandomString(12,0123456789,)}&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De38ApprovalCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:De38ApprovalCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De41CrdAccptrTermId&gt;NONUSADOME&lt;/v11:De41CrdAccptrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De42CrdAccptrIdCode&gt;${__RandomString(15,0123456789,)}&lt;/v11:De42CrdAccptrIdCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De43CrdAccptrNmLoc&gt;GreenDot Corporation TestE Main PasadenaThisFillerForPositionFourtyOneToEightyThree9110700000CA USA&lt;/v11:De43CrdAccptrNmLoc&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De49CurCodeTxnX&gt;USD&lt;/v11:De49CurCodeTxnX&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:CashbackAmt&gt;0&lt;/v11:CashbackAmt&gt;&#xd;
            &lt;v11:AuthMatchedInd&gt;N&lt;/v11:AuthMatchedInd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmAcqNtwkId&gt;GDOT&lt;/v11:PmAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmMultiClrSeqNum&gt;0&lt;/v11:PmMultiClrSeqNum&gt;&#xd;
            &lt;v11:PmMultiClrSeqCnt&gt;0&lt;/v11:PmMultiClrSeqCnt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PanUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmtActRefNum xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmSpndAlertCde xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:OnbhlfSrvData xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknTxnId&gt;${__RandomString(64,0123456789abcdef,)}&lt;/v11:TknTxnId&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostNetworkMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;JoPstdAm&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
              <elementProp name="SOAPAction&#x9; &quot;http" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value"> &quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostNetworkMessage&quot; </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostInternalMessage-4083" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostInternalMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
		&lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${TransAmt}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;4083&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoSrceCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDescTx&gt;9-008,Monthly Maintenance Fee&lt;/v11:JoTxnDescTx&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDisputeId&gt;${__RandomString(10,0123456789,)}&lt;/v11:JoTxnDisputeId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JxTxnComment&gt;4083comment&lt;/v11:JxTxnComment&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoSysGenRefNr&gt;${__RandomString(16,0123456789,)}&lt;/v11:JoSysGenRefNr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnRsnCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoTxnRsnCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostInternalMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">3013; 11-004,Interest Paid; 3013comment
4083;9-008,Monthly Maintenance Fee;4083comment
0548,1-014,Swipe Reload</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostInternalMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostInternalMessage-4344" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostInternalMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
		&lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${TransAmt}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;4344&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoSrceCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDescTx&gt;11-004 ,Interest Earned Credit&lt;/v11:JoTxnDescTx&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDisputeId&gt;${__RandomString(10,0123456789,)}&lt;/v11:JoTxnDisputeId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JxTxnComment&gt;4344comment&lt;/v11:JxTxnComment&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoSysGenRefNr&gt;${__RandomString(16,0123456789,)}&lt;/v11:JoSysGenRefNr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnRsnCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoTxnRsnCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostInternalMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">3013; 11-004,Interest Paid; 3013comment
4083;9-008,Monthly Maintenance Fee;4083comment
0548,1-014,Swipe Reload
4344;11-004 ,Interest Earned Credit;4344comment</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostInternalMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostInternalMessage-0548" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostInternalMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
		&lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${TransAmt}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;0548&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoSrceCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDescTx&gt;1-014,Swipe Reload&lt;/v11:JoTxnDescTx&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDisputeId&gt;${__RandomString(10,0123456789,)}&lt;/v11:JoTxnDisputeId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JxTxnComment&gt;0548comment&lt;/v11:JxTxnComment&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoSysGenRefNr&gt;${__RandomString(16,0123456789,)}&lt;/v11:JoSysGenRefNr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnRsnCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoTxnRsnCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostInternalMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">3013; 11-004,Interest Paid; 3013comment
4083;9-008,Monthly Maintenance Fee;4083comment
0548,1-014,Swipe Reload</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostInternalMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GenerateTransaction-APVAuth-PostInt-PostNetwork-ACI-wf" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">30</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <stringProp name="ThreadGroup.delay">10</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="TestPlan.comments">For ACI, the programcode is dayforce, the productcode is 51711</stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="filename">${RootDataDirectory}\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,AuTrAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="ProgramCode_Current_wf" elementType="Argument">
              <stringProp name="Argument.name">ProgramCode_Current_wf</stringProp>
              <stringProp name="Argument.value">wf</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="MqHdrOwnerLevel_Current_wf" elementType="Argument">
              <stringProp name="Argument.name">MqHdrOwnerLevel_Current_wf</stringProp>
              <stringProp name="Argument.value">BS004</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">intuitqb,51738,BS007
flex, 51737,BS022
wf,51736,BS004</stringProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\\${RESULT_FILE_NAME}_${ProgramCode_Current_wf}.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">ACIAccountExternalID,PaymentIdentifierProxy,AccountIdentifier,AuTrAm,AccountBalanceExternalProxy</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GenerateRandomValues" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(10) + 10;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutAuthMessage-ACI" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutAuthMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel_Current_wf}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AuATm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuADt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCrdAccptId&gt;Non Us Domestic&lt;/v11:AuCrdAccptId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrZipCd&gt;91107&lt;/v11:AuMrZipCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCntryCd&gt;USA&lt;/v11:AuMrCntryCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCatgCd&gt;0763&lt;/v11:AuMrCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFgnExpIn&gt;D&lt;/v11:AuFgnExpIn&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAStCd&gt;CA&lt;/v11:AuAStCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuACrdExpDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P1461D,,)}&lt;/v11:AuACrdExpDt&gt;&#xd;
            &lt;v11:AuATrTermId&gt;FLPBLX1028&lt;/v11:AuATrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuOfflnAcsCd&gt;1&lt;/v11:AuOfflnAcsCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuARespCd&gt;APV&lt;/v11:AuARespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrAm&gt;${TransAmt}&lt;/v11:AuTrAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCurCd&gt;USD&lt;/v11:AuCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnOrigAm&gt;${TransAmt}&lt;/v11:AuTxnOrigAm&gt;&#xd;
            &lt;v11:AuTrDs&gt;PTS MTF TEST\\Pasadena&lt;/v11:AuTrDs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaRespCd&gt;000&lt;/v11:AuVisaRespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrTm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrTm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRespApvlCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuRespApvlCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAdVerfRsltCd&gt;8&lt;/v11:AuAdVerfRsltCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAUcsEffDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuAUcsEffDt&gt;&#xd;
            &lt;v11:AuTxnStatIn&gt;I&lt;/v11:AuTxnStatIn&gt;&#xd;
            &lt;v11:AuUcsTxnCd&gt;1035&lt;/v11:AuUcsTxnCd&gt;&#xd;
            &lt;v11:AuTxnCatgCd&gt;0763&lt;/v11:AuTxnCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCsbkAm&gt;1&lt;/v11:AuCsbkAm&gt;&#xd;
            &lt;v11:AuMsgTypeCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuPrgDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P14D,,)}&lt;/v11:AuPrgDt&gt;&#xd;
            &lt;v11:AuPosDa&gt;00010170000J&lt;/v11:AuPosDa&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAppTxnCt&gt;8&lt;/v11:AuAppTxnCt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuStipRsnCd&gt;8&lt;/v11:AuStipRsnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee1Am&gt;1&lt;/v11:AuFee1Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn1Cd&gt;5005&lt;/v11:AuFeeTxn1Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee2Am&gt;3&lt;/v11:AuFee2Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn2Cd&gt;5005&lt;/v11:AuFeeTxn2Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee3Am&gt;5&lt;/v11:AuFee3Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn3Cd&gt;5005&lt;/v11:AuFeeTxn3Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee4Am&gt;8&lt;/v11:AuFee4Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn4Cd&gt;5005&lt;/v11:AuFeeTxn4Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee5Am&gt;13&lt;/v11:AuFee5Am&gt;&#xd;
            &lt;v11:AuFeeTxn5Cd&gt;5005&lt;/v11:AuFeeTxn5Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRqstdTxnAm&gt;${TransAmt}&lt;/v11:AuRqstdTxnAm&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAcqNtwkId&gt;${__RandomString(3,0123456789,)}&lt;/v11:AuAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnSign&gt;DR&lt;/v11:AuTxnSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuObsDataCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuObsDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTknTxnId&gt;${__RandomString(9,0123456789,)}&lt;/v11:AuTknTxnId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaAuCharSw&gt;D&lt;/v11:AuVisaAuCharSw&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuIncrAuInd&gt;false&lt;/v11:AuIncrAuInd&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:IfGeneratePosted&gt;false&lt;/v11:IfGeneratePosted&gt;&#xd;
            &lt;v11:AuRskScrNum&gt;&lt;/v11:AuRskScrNum&gt;&#xd;
            &lt;v11:AuPosEntModeCd&gt;&lt;/v11:AuPosEntModeCd&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;v11:AuRulAdjScrNum&gt;&lt;/v11:AuRulAdjScrNum&gt;&#xd;
            &lt;v11:De055Cvr&gt;&lt;/v11:De055Cvr&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
            &lt;v11:AvailBalSign&gt;&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:AvlBalOdThldSign&gt;&lt;/v11:AvlBalOdThldSign&gt;&#xd;
            &lt;v11:AuIsoProcCd&gt;DE3&lt;/v11:AuIsoProcCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutAuthMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(10) + 10;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutAuthMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostNetworkMessage-credit" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostNetworkMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
         &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel_Current_wf}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
             &lt;v11:QueueName&gt;ACI.NONFINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${JoPstdAm}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;1035&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn&gt;${__javaScript(${__RandomString(6,0123456789,)}+&quot;-&quot;+${__RandomString(12,0123456789,)}+&quot;-&quot;+${__RandomString(6,0123456789,)},)}&lt;/v11:PmVisaArn&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:De1MsgType&gt;1221&lt;/v11:De1MsgType&gt;&#xd;
            &lt;v11:De3ProcessingCode&gt;${__RandomString(6,0123456789,)}&lt;/v11:De3ProcessingCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De4TxnAmt&gt;${JoPstdAm}&lt;/v11:De4TxnAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De5ReconAmt&gt;${JoPstdAm}&lt;/v11:De5ReconAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De6BillingAmt&gt;${JoPstdAm}&lt;/v11:De6BillingAmt&gt;&#xd;
            &lt;v11:De12TxnDtTm&gt;${__time(yyMMddHHmmss,)}&lt;/v11:De12TxnDtTm&gt;&#xd;
            &lt;v11:De22PtOfSrvcDataCd&gt;010011111110&lt;/v11:De22PtOfSrvcDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De25MsgReasonCd&gt;4361&lt;/v11:De25MsgReasonCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De26CrdAccptrBusCd&gt;0763&lt;/v11:De26CrdAccptrBusCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:DE28ReconDt xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De31AcqrRefData&gt;${__RandomString(23,0123456789,)}&lt;/v11:De31AcqrRefData&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De32AcqrngInstId&gt;${__RandomString(11,0123456789,)}&lt;/v11:De32AcqrngInstId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;${__RandomString(12,0123456789,)}&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De38ApprovalCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:De38ApprovalCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De41CrdAccptrTermId&gt;NONUSADOME&lt;/v11:De41CrdAccptrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De42CrdAccptrIdCode&gt;${__RandomString(15,0123456789,)}&lt;/v11:De42CrdAccptrIdCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De43CrdAccptrNmLoc&gt;GreenDot Corporation TestE Main PasadenaThisFillerForPositionFourtyOneToEightyThree9110700000CA USA&lt;/v11:De43CrdAccptrNmLoc&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De49CurCodeTxnX&gt;USD&lt;/v11:De49CurCodeTxnX&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:CashbackAmt&gt;0&lt;/v11:CashbackAmt&gt;&#xd;
            &lt;v11:AuthMatchedInd&gt;N&lt;/v11:AuthMatchedInd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmAcqNtwkId&gt;GDOT&lt;/v11:PmAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmMultiClrSeqNum&gt;0&lt;/v11:PmMultiClrSeqNum&gt;&#xd;
            &lt;v11:PmMultiClrSeqCnt&gt;0&lt;/v11:PmMultiClrSeqCnt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PanUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmtActRefNum xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmSpndAlertCde xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:OnbhlfSrvData xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknTxnId&gt;${__RandomString(64,0123456789abcdef,)}&lt;/v11:TknTxnId&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostNetworkMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;JoPstdAm&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
              <elementProp name="SOAPAction&#x9; &quot;http" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value"> &quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostNetworkMessage&quot; </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostInternalMessage-4083" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostInternalMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
		&lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel_Current_wf}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${TransAmt}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;4083&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoSrceCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDescTx&gt;9-008,Monthly Maintenance Fee&lt;/v11:JoTxnDescTx&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDisputeId&gt;${__RandomString(10,0123456789,)}&lt;/v11:JoTxnDisputeId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JxTxnComment&gt;4083comment&lt;/v11:JxTxnComment&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoSysGenRefNr&gt;${__RandomString(16,0123456789,)}&lt;/v11:JoSysGenRefNr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnRsnCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoTxnRsnCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostInternalMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">3013; 11-004,Interest Paid; 3013comment
4083;9-008,Monthly Maintenance Fee;4083comment
0548,1-014,Swipe Reload</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostInternalMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostInternalMessage-4344" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostInternalMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
		&lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel_Current_wf}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${TransAmt}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;4344&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoSrceCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDescTx&gt;11-004 ,Interest Earned Credit&lt;/v11:JoTxnDescTx&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDisputeId&gt;${__RandomString(10,0123456789,)}&lt;/v11:JoTxnDisputeId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JxTxnComment&gt;4344comment&lt;/v11:JxTxnComment&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoSysGenRefNr&gt;${__RandomString(16,0123456789,)}&lt;/v11:JoSysGenRefNr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnRsnCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoTxnRsnCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostInternalMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">3013; 11-004,Interest Paid; 3013comment
4083;9-008,Monthly Maintenance Fee;4083comment
0548,1-014,Swipe Reload
4344;11-004 ,Interest Earned Credit;4344comment</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostInternalMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostInternalMessage-0548" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostInternalMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
		&lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel_Current_wf}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${TransAmt}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;0548&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoSrceCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDescTx&gt;1-014,Swipe Reload&lt;/v11:JoTxnDescTx&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDisputeId&gt;${__RandomString(10,0123456789,)}&lt;/v11:JoTxnDisputeId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JxTxnComment&gt;0548comment&lt;/v11:JxTxnComment&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoSysGenRefNr&gt;${__RandomString(16,0123456789,)}&lt;/v11:JoSysGenRefNr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnRsnCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoTxnRsnCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostInternalMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">3013; 11-004,Interest Paid; 3013comment
4083;9-008,Monthly Maintenance Fee;4083comment
0548,1-014,Swipe Reload</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostInternalMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GenerateTransaction-APVAuth-PostInt-PostNetwork-ACI-flex" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">30</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <stringProp name="ThreadGroup.delay">10</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="TestPlan.comments">For ACI, the programcode is dayforce, the productcode is 51711</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="ProgramCode_Current_flex" elementType="Argument">
              <stringProp name="Argument.name">ProgramCode_Current_flex</stringProp>
              <stringProp name="Argument.value">flex</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="MqHdrOwnerLevel_Current_flex" elementType="Argument">
              <stringProp name="Argument.name">MqHdrOwnerLevel_Current_flex</stringProp>
              <stringProp name="Argument.value">BS022</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">intuitqb,51738,BS007
flex, 51737,BS022
wf,51736,BS004</stringProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\\${RESULT_FILE_NAME}_${ProgramCode_Current_flex}.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">ACIAccountExternalID,PaymentIdentifierProxy,AccountIdentifier,AuTrAm,AccountBalanceExternalProxy</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GenerateRandomValues" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(10) + 10;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutAuthMessage-ACI" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutAuthMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel_Current_flex}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AuATm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuADt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCrdAccptId&gt;Non Us Domestic&lt;/v11:AuCrdAccptId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrZipCd&gt;91107&lt;/v11:AuMrZipCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCntryCd&gt;USA&lt;/v11:AuMrCntryCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCatgCd&gt;0763&lt;/v11:AuMrCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFgnExpIn&gt;D&lt;/v11:AuFgnExpIn&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAStCd&gt;CA&lt;/v11:AuAStCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuACrdExpDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P1461D,,)}&lt;/v11:AuACrdExpDt&gt;&#xd;
            &lt;v11:AuATrTermId&gt;FLPBLX1028&lt;/v11:AuATrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuOfflnAcsCd&gt;1&lt;/v11:AuOfflnAcsCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuARespCd&gt;APV&lt;/v11:AuARespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrAm&gt;${TransAmt}&lt;/v11:AuTrAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCurCd&gt;USD&lt;/v11:AuCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnOrigAm&gt;${TransAmt}&lt;/v11:AuTxnOrigAm&gt;&#xd;
            &lt;v11:AuTrDs&gt;PTS MTF TEST\\Pasadena&lt;/v11:AuTrDs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaRespCd&gt;000&lt;/v11:AuVisaRespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrTm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrTm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRespApvlCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuRespApvlCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAdVerfRsltCd&gt;8&lt;/v11:AuAdVerfRsltCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAUcsEffDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuAUcsEffDt&gt;&#xd;
            &lt;v11:AuTxnStatIn&gt;I&lt;/v11:AuTxnStatIn&gt;&#xd;
            &lt;v11:AuUcsTxnCd&gt;1035&lt;/v11:AuUcsTxnCd&gt;&#xd;
            &lt;v11:AuTxnCatgCd&gt;0763&lt;/v11:AuTxnCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCsbkAm&gt;1&lt;/v11:AuCsbkAm&gt;&#xd;
            &lt;v11:AuMsgTypeCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuPrgDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P14D,,)}&lt;/v11:AuPrgDt&gt;&#xd;
            &lt;v11:AuPosDa&gt;00010170000J&lt;/v11:AuPosDa&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAppTxnCt&gt;8&lt;/v11:AuAppTxnCt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuStipRsnCd&gt;8&lt;/v11:AuStipRsnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee1Am&gt;1&lt;/v11:AuFee1Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn1Cd&gt;5005&lt;/v11:AuFeeTxn1Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee2Am&gt;3&lt;/v11:AuFee2Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn2Cd&gt;5005&lt;/v11:AuFeeTxn2Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee3Am&gt;5&lt;/v11:AuFee3Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn3Cd&gt;5005&lt;/v11:AuFeeTxn3Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee4Am&gt;8&lt;/v11:AuFee4Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn4Cd&gt;5005&lt;/v11:AuFeeTxn4Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee5Am&gt;13&lt;/v11:AuFee5Am&gt;&#xd;
            &lt;v11:AuFeeTxn5Cd&gt;5005&lt;/v11:AuFeeTxn5Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRqstdTxnAm&gt;${TransAmt}&lt;/v11:AuRqstdTxnAm&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAcqNtwkId&gt;${__RandomString(3,0123456789,)}&lt;/v11:AuAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnSign&gt;DR&lt;/v11:AuTxnSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuObsDataCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuObsDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTknTxnId&gt;${__RandomString(9,0123456789,)}&lt;/v11:AuTknTxnId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaAuCharSw&gt;D&lt;/v11:AuVisaAuCharSw&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuIncrAuInd&gt;false&lt;/v11:AuIncrAuInd&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:IfGeneratePosted&gt;false&lt;/v11:IfGeneratePosted&gt;&#xd;
            &lt;v11:AuRskScrNum&gt;&lt;/v11:AuRskScrNum&gt;&#xd;
            &lt;v11:AuPosEntModeCd&gt;&lt;/v11:AuPosEntModeCd&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;v11:AuRulAdjScrNum&gt;&lt;/v11:AuRulAdjScrNum&gt;&#xd;
            &lt;v11:De055Cvr&gt;&lt;/v11:De055Cvr&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
            &lt;v11:AvailBalSign&gt;&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:AvlBalOdThldSign&gt;&lt;/v11:AvlBalOdThldSign&gt;&#xd;
            &lt;v11:AuIsoProcCd&gt;DE3&lt;/v11:AuIsoProcCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutAuthMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(10) + 10;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutAuthMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostNetworkMessage-credit" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostNetworkMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
         &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel_Current_flex}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
             &lt;v11:QueueName&gt;ACI.NONFINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${JoPstdAm}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;1035&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn&gt;${__javaScript(${__RandomString(6,0123456789,)}+&quot;-&quot;+${__RandomString(12,0123456789,)}+&quot;-&quot;+${__RandomString(6,0123456789,)},)}&lt;/v11:PmVisaArn&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:De1MsgType&gt;1221&lt;/v11:De1MsgType&gt;&#xd;
            &lt;v11:De3ProcessingCode&gt;${__RandomString(6,0123456789,)}&lt;/v11:De3ProcessingCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De4TxnAmt&gt;${JoPstdAm}&lt;/v11:De4TxnAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De5ReconAmt&gt;${JoPstdAm}&lt;/v11:De5ReconAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De6BillingAmt&gt;${JoPstdAm}&lt;/v11:De6BillingAmt&gt;&#xd;
            &lt;v11:De12TxnDtTm&gt;${__time(yyMMddHHmmss,)}&lt;/v11:De12TxnDtTm&gt;&#xd;
            &lt;v11:De22PtOfSrvcDataCd&gt;010011111110&lt;/v11:De22PtOfSrvcDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De25MsgReasonCd&gt;4361&lt;/v11:De25MsgReasonCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De26CrdAccptrBusCd&gt;0763&lt;/v11:De26CrdAccptrBusCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:DE28ReconDt xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De31AcqrRefData&gt;${__RandomString(23,0123456789,)}&lt;/v11:De31AcqrRefData&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De32AcqrngInstId&gt;${__RandomString(11,0123456789,)}&lt;/v11:De32AcqrngInstId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;${__RandomString(12,0123456789,)}&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De38ApprovalCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:De38ApprovalCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De41CrdAccptrTermId&gt;NONUSADOME&lt;/v11:De41CrdAccptrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De42CrdAccptrIdCode&gt;${__RandomString(15,0123456789,)}&lt;/v11:De42CrdAccptrIdCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De43CrdAccptrNmLoc&gt;GreenDot Corporation TestE Main PasadenaThisFillerForPositionFourtyOneToEightyThree9110700000CA USA&lt;/v11:De43CrdAccptrNmLoc&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De49CurCodeTxnX&gt;USD&lt;/v11:De49CurCodeTxnX&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:CashbackAmt&gt;0&lt;/v11:CashbackAmt&gt;&#xd;
            &lt;v11:AuthMatchedInd&gt;N&lt;/v11:AuthMatchedInd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmAcqNtwkId&gt;GDOT&lt;/v11:PmAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmMultiClrSeqNum&gt;0&lt;/v11:PmMultiClrSeqNum&gt;&#xd;
            &lt;v11:PmMultiClrSeqCnt&gt;0&lt;/v11:PmMultiClrSeqCnt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PanUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmtActRefNum xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmSpndAlertCde xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:OnbhlfSrvData xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknTxnId&gt;${__RandomString(64,0123456789abcdef,)}&lt;/v11:TknTxnId&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostNetworkMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;JoPstdAm&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
              <elementProp name="SOAPAction&#x9; &quot;http" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value"> &quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostNetworkMessage&quot; </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostInternalMessage-4083" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostInternalMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
		&lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel_Current_flex}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${TransAmt}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;4083&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoSrceCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDescTx&gt;9-008,Monthly Maintenance Fee&lt;/v11:JoTxnDescTx&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDisputeId&gt;${__RandomString(10,0123456789,)}&lt;/v11:JoTxnDisputeId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JxTxnComment&gt;4083comment&lt;/v11:JxTxnComment&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoSysGenRefNr&gt;${__RandomString(16,0123456789,)}&lt;/v11:JoSysGenRefNr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnRsnCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoTxnRsnCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostInternalMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">3013; 11-004,Interest Paid; 3013comment
4083;9-008,Monthly Maintenance Fee;4083comment
0548,1-014,Swipe Reload</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostInternalMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GenerateTransaction-APVAuth-PostInt-PostNetwork-ACI-intuitqb" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">30</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <stringProp name="ThreadGroup.delay">10</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="TestPlan.comments">For ACI, the programcode is dayforce, the productcode is 51711</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="ProgramCode_Current_iq" elementType="Argument">
              <stringProp name="Argument.name">ProgramCode_Current_iq</stringProp>
              <stringProp name="Argument.value">intuitqb</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="MqHdrOwnerLevel_Current_iq" elementType="Argument">
              <stringProp name="Argument.name">MqHdrOwnerLevel_Current_iq</stringProp>
              <stringProp name="Argument.value">BS007</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">intuitqb,51738,BS007
flex, 51737,BS022
wf,51736,BS004</stringProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\\${RESULT_FILE_NAME}_${ProgramCode_Current_iq}.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">ACIAccountExternalID,PaymentIdentifierProxy,AccountIdentifier,AuTrAm,AccountBalanceExternalProxy</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GenerateRandomValues" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(10) + 10;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutAuthMessage-ACI" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutAuthMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel_Current_iq}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AuATm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuADt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCrdAccptId&gt;Non Us Domestic&lt;/v11:AuCrdAccptId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrZipCd&gt;91107&lt;/v11:AuMrZipCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCntryCd&gt;USA&lt;/v11:AuMrCntryCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCatgCd&gt;0763&lt;/v11:AuMrCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFgnExpIn&gt;D&lt;/v11:AuFgnExpIn&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAStCd&gt;CA&lt;/v11:AuAStCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuACrdExpDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P1461D,,)}&lt;/v11:AuACrdExpDt&gt;&#xd;
            &lt;v11:AuATrTermId&gt;FLPBLX1028&lt;/v11:AuATrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuOfflnAcsCd&gt;1&lt;/v11:AuOfflnAcsCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuARespCd&gt;APV&lt;/v11:AuARespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrAm&gt;${TransAmt}&lt;/v11:AuTrAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCurCd&gt;USD&lt;/v11:AuCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnOrigAm&gt;${TransAmt}&lt;/v11:AuTxnOrigAm&gt;&#xd;
            &lt;v11:AuTrDs&gt;PTS MTF TEST\\Pasadena&lt;/v11:AuTrDs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaRespCd&gt;000&lt;/v11:AuVisaRespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrTm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrTm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRespApvlCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuRespApvlCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAdVerfRsltCd&gt;8&lt;/v11:AuAdVerfRsltCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAUcsEffDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuAUcsEffDt&gt;&#xd;
            &lt;v11:AuTxnStatIn&gt;I&lt;/v11:AuTxnStatIn&gt;&#xd;
            &lt;v11:AuUcsTxnCd&gt;1035&lt;/v11:AuUcsTxnCd&gt;&#xd;
            &lt;v11:AuTxnCatgCd&gt;0763&lt;/v11:AuTxnCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCsbkAm&gt;1&lt;/v11:AuCsbkAm&gt;&#xd;
            &lt;v11:AuMsgTypeCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuPrgDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P14D,,)}&lt;/v11:AuPrgDt&gt;&#xd;
            &lt;v11:AuPosDa&gt;00010170000J&lt;/v11:AuPosDa&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAppTxnCt&gt;8&lt;/v11:AuAppTxnCt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuStipRsnCd&gt;8&lt;/v11:AuStipRsnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee1Am&gt;1&lt;/v11:AuFee1Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn1Cd&gt;5005&lt;/v11:AuFeeTxn1Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee2Am&gt;3&lt;/v11:AuFee2Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn2Cd&gt;5005&lt;/v11:AuFeeTxn2Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee3Am&gt;5&lt;/v11:AuFee3Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn3Cd&gt;5005&lt;/v11:AuFeeTxn3Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee4Am&gt;8&lt;/v11:AuFee4Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn4Cd&gt;5005&lt;/v11:AuFeeTxn4Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee5Am&gt;13&lt;/v11:AuFee5Am&gt;&#xd;
            &lt;v11:AuFeeTxn5Cd&gt;5005&lt;/v11:AuFeeTxn5Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRqstdTxnAm&gt;${TransAmt}&lt;/v11:AuRqstdTxnAm&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAcqNtwkId&gt;${__RandomString(3,0123456789,)}&lt;/v11:AuAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnSign&gt;DR&lt;/v11:AuTxnSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuObsDataCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuObsDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTknTxnId&gt;${__RandomString(9,0123456789,)}&lt;/v11:AuTknTxnId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaAuCharSw&gt;D&lt;/v11:AuVisaAuCharSw&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuIncrAuInd&gt;false&lt;/v11:AuIncrAuInd&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:IfGeneratePosted&gt;false&lt;/v11:IfGeneratePosted&gt;&#xd;
            &lt;v11:AuRskScrNum&gt;&lt;/v11:AuRskScrNum&gt;&#xd;
            &lt;v11:AuPosEntModeCd&gt;&lt;/v11:AuPosEntModeCd&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;v11:AuRulAdjScrNum&gt;&lt;/v11:AuRulAdjScrNum&gt;&#xd;
            &lt;v11:De055Cvr&gt;&lt;/v11:De055Cvr&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
            &lt;v11:AvailBalSign&gt;&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:AvlBalOdThldSign&gt;&lt;/v11:AvlBalOdThldSign&gt;&#xd;
            &lt;v11:AuIsoProcCd&gt;DE3&lt;/v11:AuIsoProcCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutAuthMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(10) + 10;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutAuthMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostNetworkMessage-credit" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostNetworkMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
         &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel_Current_iq}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
             &lt;v11:QueueName&gt;ACI.NONFINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${JoPstdAm}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;1035&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn&gt;${__javaScript(${__RandomString(6,0123456789,)}+&quot;-&quot;+${__RandomString(12,0123456789,)}+&quot;-&quot;+${__RandomString(6,0123456789,)},)}&lt;/v11:PmVisaArn&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:De1MsgType&gt;1221&lt;/v11:De1MsgType&gt;&#xd;
            &lt;v11:De3ProcessingCode&gt;${__RandomString(6,0123456789,)}&lt;/v11:De3ProcessingCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De4TxnAmt&gt;${JoPstdAm}&lt;/v11:De4TxnAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De5ReconAmt&gt;${JoPstdAm}&lt;/v11:De5ReconAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De6BillingAmt&gt;${JoPstdAm}&lt;/v11:De6BillingAmt&gt;&#xd;
            &lt;v11:De12TxnDtTm&gt;${__time(yyMMddHHmmss,)}&lt;/v11:De12TxnDtTm&gt;&#xd;
            &lt;v11:De22PtOfSrvcDataCd&gt;010011111110&lt;/v11:De22PtOfSrvcDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De25MsgReasonCd&gt;4361&lt;/v11:De25MsgReasonCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De26CrdAccptrBusCd&gt;0763&lt;/v11:De26CrdAccptrBusCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:DE28ReconDt xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De31AcqrRefData&gt;${__RandomString(23,0123456789,)}&lt;/v11:De31AcqrRefData&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De32AcqrngInstId&gt;${__RandomString(11,0123456789,)}&lt;/v11:De32AcqrngInstId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;${__RandomString(12,0123456789,)}&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De38ApprovalCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:De38ApprovalCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De41CrdAccptrTermId&gt;NONUSADOME&lt;/v11:De41CrdAccptrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De42CrdAccptrIdCode&gt;${__RandomString(15,0123456789,)}&lt;/v11:De42CrdAccptrIdCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De43CrdAccptrNmLoc&gt;GreenDot Corporation TestE Main PasadenaThisFillerForPositionFourtyOneToEightyThree9110700000CA USA&lt;/v11:De43CrdAccptrNmLoc&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De49CurCodeTxnX&gt;USD&lt;/v11:De49CurCodeTxnX&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:CashbackAmt&gt;0&lt;/v11:CashbackAmt&gt;&#xd;
            &lt;v11:AuthMatchedInd&gt;N&lt;/v11:AuthMatchedInd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmAcqNtwkId&gt;GDOT&lt;/v11:PmAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmMultiClrSeqNum&gt;0&lt;/v11:PmMultiClrSeqNum&gt;&#xd;
            &lt;v11:PmMultiClrSeqCnt&gt;0&lt;/v11:PmMultiClrSeqCnt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PanUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmtActRefNum xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmSpndAlertCde xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:OnbhlfSrvData xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknTxnId&gt;${__RandomString(64,0123456789abcdef,)}&lt;/v11:TknTxnId&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostNetworkMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;JoPstdAm&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
              <elementProp name="SOAPAction&#x9; &quot;http" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value"> &quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostNetworkMessage&quot; </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostInternalMessage-4083" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostInternalMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
		&lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel_Current_iq}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${TransAmt}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;4083&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoSrceCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDescTx&gt;9-008,Monthly Maintenance Fee&lt;/v11:JoTxnDescTx&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDisputeId&gt;${__RandomString(10,0123456789,)}&lt;/v11:JoTxnDisputeId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JxTxnComment&gt;4083comment&lt;/v11:JxTxnComment&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoSysGenRefNr&gt;${__RandomString(16,0123456789,)}&lt;/v11:JoSysGenRefNr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnRsnCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoTxnRsnCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostInternalMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">3013; 11-004,Interest Paid; 3013comment
4083;9-008,Monthly Maintenance Fee;4083comment
0548,1-014,Swipe Reload</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostInternalMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GetAccountToSimTrans-ACI-Conversion" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">kabbage,51731,GZ002</stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">
--distinct
--Please use kabbage,51731,GZ002
Select distinct top ${NUMBER_OF_ACCOUNTS} RTRIM(AccountExternalProxy) as AccountExternalProxy, 
RTRIM(PaymentIdentifierProxy) as PaymentIdentifierProxy
From Account As a with(nolock)
INNER JOIN Product AS p with(nolock)
ON p.ProductKey=a.ProductKey
inner Join AccountHolder As ah with(nolock)
On ah.AccountKey = a.AccountKey
inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
On ahpi.AccountHolderKey = ah.AccountHolderKey
inner Join PaymentIdentifier As pid with(nolock)
On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
--inner join PostTransaction PIT with(NOLOCK) 
--ON PIT.AccountIdentifier = A.AccountIdentifier
where p.ProductCode=&apos;${ProductCode}&apos;
and a.AccountStatusKey=2
and  AccountExternalProxy is not null 
and ACIAccountExternalID is not null
and  a.CreateDate &gt; getdate()-365


</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">AccountExternalProxy,PaymentIdentifierProxy</stringProp>
          <stringProp name="resultVariable">AccountList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="TestPlan.comments">Please use kabbage,51731,GZ002</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db - estatement" enabled="false">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">
Select distinct TOP  ${NUMBER_OF_ACCOUNTS} RTRIM(AccountBalanceExternalProxy) as AccountBalanceExternalProxy, 
RTRIM(PaymentIdentifierProxy) as PaymentIdentifierProxy, a.AccountIdentifier
From AccountBalance As ab with(nolock)
inner Join Account As a with(nolock)
On ab.AccountKey = a.AccountKey
INNER JOIN Product AS p with(nolock)
ON p.ProductKey=a.ProductKey
INNER JOIN AccountBillCycle abc with (NOLOCK) 
ON abc.AccountKey = a.AccountKey
inner Join AccountHolder As ah with(nolock)
On ah.AccountKey = a.AccountKey
inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
On ahpi.AccountHolderKey = ah.AccountHolderKey
inner Join PaymentIdentifier As pid with(nolock)
On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
inner join PostTransaction PIT with(NOLOCK) 
ON PIT.AccountIdentifier = A.AccountIdentifier
where p.ProductCode=&apos;${ProductCode}&apos;
and  ab.AvailableBalance&gt;1
and a.AccountStatusKey=2
--and abc.ActivationDate &lt; GETDATE()-33
--and PIT.ProcessorBusinessDate &gt; GETDATE()-30 and PIT.ProcessorBusinessDate &lt; GETDATE()-4
and A.Accountkey&gt;${MinAccountKey}
and A.Accountkey&lt;${MaxAccountKey}
--order by A.accountKey asc
--and a.CreateDate=&apos;2018-10-29 01:34:30.620&apos;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier</stringProp>
          <stringProp name="resultVariable">AccountList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get Account from db - addfriends" enabled="false">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Select  top 50000 RTRIM(AccountBalanceExternalProxy) as AccountBalanceExternalProxy, 
RTRIM(PaymentIdentifierProxy) as PaymentIdentifierProxy, a.AccountIdentifier, ab.AccountBalanceIdentifier
From AccountBalance As ab with(nolock)
inner Join Account As a with(nolock)
On ab.AccountKey = a.AccountKey
INNER JOIN Product AS p with(nolock)
ON p.ProductKey=a.ProductKey
INNER JOIN AccountBillCycle abc with (NOLOCK) 
ON abc.AccountKey = a.AccountKey
inner Join AccountHolder As ah with(nolock)
On ah.AccountKey = a.AccountKey
inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
On ahpi.AccountHolderKey = ah.AccountHolderKey
inner Join PaymentIdentifier As pid with(nolock)
On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
INNER JOIN dbo.PaymentInstrument as pin with(nolock)
ON pin.PaymentIdentifierKey = pid.PaymentIdentifierKey
--inner join PostTransaction PIT with(NOLOCK) 
--ON PIT.AccountIdentifier = A.AccountIdentifier
where p.ProductCode=&apos;S40002&apos;
and  ab.AvailableBalance&gt;=0
and a.AccountStatusKey=2
--and abc.ActivationDate &lt; GETDATE()-35
--and PIT.ProcessorBusinessDate &gt; GETDATE()-30 and PIT.ProcessorBusinessDate &lt; GETDATE()-4
--and a.CreateDate=&apos;2018-10-29 01:34:30.620&apos;
and  a.CreateDate &lt; getDate()-4
--and ab.AvailableBalanceAsOfDate &lt; getDate()-4
--and ab.LedgerBalanceAsOfDate &lt; getDate()-4
and a.CreateDate BETWEEN &apos;2021-01-01&apos; and &apos;2021-06-07&apos;
and ab.AccountBalanceTypeKey  in (1,2)
AND DATEDIFF(d, pin.ActivationDate, &apos;2021-06-09 00:00:00&apos;)
             BETWEEN 0 AND 90
--and ab.AccountBalanceTypeKey = ${AccountBalanceType}
--order by newid() desc

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,AccountBalanceIdentifier</stringProp>
          <stringProp name="resultVariable">AccountList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

// initialize a Random object somewhere; you should only need one
Random random = new Random();

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}_${ProgramCode}_Conversion.csv&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{
	int amount = random.nextInt(100) + 10;
	fstream.write(row.get(&quot;AccountExternalProxy&quot;) +  &quot;,&quot; + row.get(&quot;PaymentIdentifierProxy&quot;) +&quot;,&quot;+ amount + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
 </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Data Splitter Execution" enabled="false">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\GDQA_PerfDataSplitter\GDQA_PerfDataSplitter.exe</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\SplitFiles</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="LoopCopy" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get current index" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

try{
	log.info(&quot;Current count:&quot; + String.valueOf(${__jm__LoopCopy__idx}+1));
	vars.put(&quot;CurrentIndex&quot;, String.valueOf(${__jm__LoopCopy__idx}+1));
	vars.put(&quot;CurrentRemoteServerIndex&quot;, String.valueOf(${__jm__LoopCopy__idx}+2));
}
catch (Throwable ex)
{
	log.error(&quot;Error in Get-current-index script&quot;, ex);
	throw ex;
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder" enabled="true">
            <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
            <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
            <stringProp name="SystemSampler.command">cmd.exe</stringProp>
            <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">/c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">copy /b /y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">.\\${CurrentIndex}\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">\\\\g1pfbosload0${CurrentRemoteServerIndex}\\data\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\SplitFiles</stringProp>
          </SystemSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PostInternalTransaction-ACI-Convresion" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">kabbage,51731,GZ002</stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\\${RESULT_FILE_NAME}_${ProgramCode}_Conversion.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountExternalProxy,PaymentIdentifierProxy,JoPstdAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">CardProxiesForSimTran_ubervd.csv
CardProxiesForSimTran.csv
CardProxiesForSimTran_gbr.csv</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostInternalMessage-Conversion" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostInternalMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
		&lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;GZ002&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${TransAmt}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;3013&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoSrceCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDescTx&gt;11-004,Interest Paid&lt;/v11:JoTxnDescTx&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDisputeId&gt;${__RandomString(10,0123456789,)}&lt;/v11:JoTxnDisputeId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JxTxnComment&gt;3013comment&lt;/v11:JxTxnComment&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoSysGenRefNr&gt;${__RandomString(16,0123456789,)}&lt;/v11:JoSysGenRefNr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnRsnCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoTxnRsnCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostInternalMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostInternalMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AuthTransaction-ACI-Convresion" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">kabbage,51731,GZ002</stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\\${RESULT_FILE_NAME}_${ProgramCode}_Conversion.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountExternalProxy,PaymentIdentifierProxy,JoPstdAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">CardProxiesForSimTran_ubervd.csv
CardProxiesForSimTran.csv
CardProxiesForSimTran_gbr.csv</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostInternalMessage-Conversion" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostInternalMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
		&lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;GZ002&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${TransAmt}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;3013&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoSrceCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDescTx&gt;11-004,Interest Paid&lt;/v11:JoTxnDescTx&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDisputeId&gt;${__RandomString(10,0123456789,)}&lt;/v11:JoTxnDisputeId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JxTxnComment&gt;3013comment&lt;/v11:JxTxnComment&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoSysGenRefNr&gt;${__RandomString(16,0123456789,)}&lt;/v11:JoSysGenRefNr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnRsnCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoTxnRsnCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostInternalMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostInternalMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutAuthMessage-Conversion" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutAuthMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;!--&lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;--&gt;&#xd;
            &lt;v11:AuATm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuADt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCrdAccptId&gt;Non Us Domestic&lt;/v11:AuCrdAccptId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrZipCd&gt;91107&lt;/v11:AuMrZipCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCntryCd&gt;USA&lt;/v11:AuMrCntryCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCatgCd&gt;0763&lt;/v11:AuMrCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFgnExpIn&gt;D&lt;/v11:AuFgnExpIn&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAStCd&gt;CA&lt;/v11:AuAStCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuACrdExpDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P1461D,,)}&lt;/v11:AuACrdExpDt&gt;&#xd;
            &lt;v11:AuATrTermId&gt;FLPBLX1028&lt;/v11:AuATrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuOfflnAcsCd&gt;1&lt;/v11:AuOfflnAcsCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuARespCd&gt;APV&lt;/v11:AuARespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrAm&gt;${TransAmt}&lt;/v11:AuTrAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCurCd&gt;USD&lt;/v11:AuCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnOrigAm&gt;${TransAmt}&lt;/v11:AuTxnOrigAm&gt;&#xd;
            &lt;v11:AuTrDs&gt;PTS MTF TEST\\Pasadena&lt;/v11:AuTrDs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaRespCd&gt;000&lt;/v11:AuVisaRespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrTm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrTm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRespApvlCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuRespApvlCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAdVerfRsltCd&gt;8&lt;/v11:AuAdVerfRsltCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAUcsEffDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuAUcsEffDt&gt;&#xd;
            &lt;v11:AuTxnStatIn&gt;I&lt;/v11:AuTxnStatIn&gt;&#xd;
            &lt;v11:AuUcsTxnCd&gt;1035&lt;/v11:AuUcsTxnCd&gt;&#xd;
            &lt;v11:AuTxnCatgCd&gt;0763&lt;/v11:AuTxnCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCsbkAm&gt;1&lt;/v11:AuCsbkAm&gt;&#xd;
            &lt;v11:AuMsgTypeCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuPrgDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P14D,,)}&lt;/v11:AuPrgDt&gt;&#xd;
            &lt;v11:AuPosDa&gt;00010170000J&lt;/v11:AuPosDa&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAppTxnCt&gt;8&lt;/v11:AuAppTxnCt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuStipRsnCd&gt;8&lt;/v11:AuStipRsnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee1Am&gt;1&lt;/v11:AuFee1Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn1Cd&gt;5005&lt;/v11:AuFeeTxn1Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee2Am&gt;3&lt;/v11:AuFee2Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn2Cd&gt;5005&lt;/v11:AuFeeTxn2Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee3Am&gt;5&lt;/v11:AuFee3Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn3Cd&gt;5005&lt;/v11:AuFeeTxn3Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee4Am&gt;8&lt;/v11:AuFee4Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn4Cd&gt;5005&lt;/v11:AuFeeTxn4Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee5Am&gt;13&lt;/v11:AuFee5Am&gt;&#xd;
            &lt;v11:AuFeeTxn5Cd&gt;5005&lt;/v11:AuFeeTxn5Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRqstdTxnAm&gt;${TransAmt}&lt;/v11:AuRqstdTxnAm&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAcqNtwkId&gt;${__RandomString(3,0123456789,)}&lt;/v11:AuAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnSign&gt;DR&lt;/v11:AuTxnSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuObsDataCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuObsDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTknTxnId&gt;${__RandomString(9,0123456789,)}&lt;/v11:AuTknTxnId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaAuCharSw&gt;D&lt;/v11:AuVisaAuCharSw&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuIncrAuInd&gt;false&lt;/v11:AuIncrAuInd&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:IfGeneratePosted&gt;false&lt;/v11:IfGeneratePosted&gt;&#xd;
            &lt;v11:AuRskScrNum&gt;&lt;/v11:AuRskScrNum&gt;&#xd;
            &lt;v11:AuPosEntModeCd&gt;&lt;/v11:AuPosEntModeCd&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;v11:AuRulAdjScrNum&gt;&lt;/v11:AuRulAdjScrNum&gt;&#xd;
            &lt;v11:De055Cvr&gt;&lt;/v11:De055Cvr&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
            &lt;v11:AvailBalSign&gt;&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:AvlBalOdThldSign&gt;&lt;/v11:AvlBalOdThldSign&gt;&#xd;
            &lt;v11:AuIsoProcCd&gt;DE3&lt;/v11:AuIsoProcCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutAuthMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutAuthMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
