<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Data Generation-GbOS-Account" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="PROPFILE" elementType="Argument">
            <stringProp name="Argument.name">PROPFILE</stringProp>
            <stringProp name="Argument.value">${__P(PROPFILE,C:\QA\Performance\Jmeter\GBOS\PropertyFiles\intuitqb.properties)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WORKSPACE_PATH" elementType="Argument">
            <stringProp name="Argument.name">WORKSPACE_PATH</stringProp>
            <stringProp name="Argument.value">${__P(WORKSPACE_PATH,C:\QA\Performance\Jmeter\GBOS\DataGenerator)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NUMOFTHREADS_GEN" elementType="Argument">
            <stringProp name="Argument.name">NUMOFTHREADS_GEN</stringProp>
            <stringProp name="Argument.value">${__P(NUMOFTHREADS_GEN,30)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMUP_PERIOD_GEN" elementType="Argument">
            <stringProp name="Argument.name">RAMUP_PERIOD_GEN</stringProp>
            <stringProp name="Argument.value">${__P(RAMUP_PERIOD,5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOOP_COUNT_GEN" elementType="Argument">
            <stringProp name="Argument.name">LOOP_COUNT_GEN</stringProp>
            <stringProp name="Argument.value">${__P(LOOP_COUNT_GEN, 10000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NUMBER_OF_ACCOUNTS" elementType="Argument">
            <stringProp name="Argument.name">NUMBER_OF_ACCOUNTS</stringProp>
            <stringProp name="Argument.value">${__P(NUMBER_OF_ACCOUNTS, 300)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DEFAULT_ACCESS_TOKEN" elementType="Argument">
            <stringProp name="Argument.name">DEFAULT_ACCESS_TOKEN</stringProp>
            <stringProp name="Argument.value">${__P(DEFAULT_ACCESS_TOKEN,+S0jAi1MqvvNqqA4H6ybKQ==)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="QATOOL_ENDPOINT" elementType="Argument">
            <stringProp name="Argument.name">QATOOL_ENDPOINT</stringProp>
            <stringProp name="Argument.value">${__P(QATOOL_ENDPOINT, http://g1pfbosqatools01:8082/GBOSQAToolService.svc/)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SIM_ENDPOINT" elementType="Argument">
            <stringProp name="Argument.name">SIM_ENDPOINT</stringProp>
            <stringProp name="Argument.value">${__P(SIM_ENDPOINT, https://gdqatools/GDQATools/GDQA_IPSMQSimulator_Bos/IPSMQSimulatorService.svc)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IsAWS" elementType="Argument">
            <stringProp name="Argument.name">IsAWS</stringProp>
            <stringProp name="Argument.value">${__P(IsAWS, true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="START_DATE" elementType="Argument">
            <stringProp name="Argument.name">START_DATE</stringProp>
            <stringProp name="Argument.value">${__P(START_DATE, 2017-01-11 09:00:00.410)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="END_DATE" elementType="Argument">
            <stringProp name="Argument.name">END_DATE</stringProp>
            <stringProp name="Argument.value">${__P(END_DATE, 2021-01-01 00:32:00.000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GSS_DB" elementType="Argument">
            <stringProp name="Argument.name">GSS_DB</stringProp>
            <stringProp name="Argument.value">${__P(GSS_DB, G1PFGSSDB01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BOS_CAS_DB" elementType="Argument">
            <stringProp name="Argument.name">BOS_CAS_DB</stringProp>
            <stringProp name="Argument.value">${__P(BOS_CAS_DB,G1PFBOSCRMDB01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BOS-CRYPTO-TPK" elementType="Argument">
            <stringProp name="Argument.name">BOS-CRYPTO-TPK</stringProp>
            <stringProp name="Argument.value">${__P(BOS-CRYPTO-TPK)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOOPCOPY_SWITCHVAL" elementType="Argument">
            <stringProp name="Argument.name">LOOPCOPY_SWITCHVAL</stringProp>
            <stringProp name="Argument.value">${__P(LOOPCOPY_SWITCHVAL,Copy-AWS)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CURRENT_CONTROLLER" elementType="Argument">
            <stringProp name="Argument.name">CURRENT_CONTROLLER</stringProp>
            <stringProp name="Argument.value">${__P(CURRENT_CONTROLLER,GetMRDCFulfillment-Paging)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">
        <stringProp name="propFilePath">${PROPFILE}</stringProp>
      </com.tag.jmeter.ext.config.PropertyReader>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="SetVariableValuesPerCurrent Env" enabled="true">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters">${IsAWS}</stringProp>
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="script">String isAWS = &quot;${IsAWS}&quot;;


if(isAWS == &quot;false&quot;)
{
	//props.put(&quot;BOS_DB&quot;, &quot;G1PFBOSDB01&quot;);	
	vars.put(&quot;CRYPTO_API&quot;, &quot;https://boscryt/Crypto/V1&quot; );
	vars.put(&quot;OAUTH_API&quot;, &quot;https://bospart/baas/v1&quot; );
	vars.put(&quot;TOKENIZER_API&quot;, &quot;https://bostk/Tokenizer/v1/api&quot; );
	vars.put(&quot;IbmMQType&quot;, &quot;OnPrem&quot;);
}else{
	//Will be replaced by AWS_PRF endpoints later
	//props.put(&quot;BOS_DB&quot;, &quot;pibosdbag.awsnp.gdotawsnp.com&quot; );
	/*
	 * Read properties from Jmeter Test Plan lever User defined variables*/
	 /*
	vars.put(&quot;CRYPTO_API&quot;, &quot;https://&quot; + vars.get(&quot;CRYP_Host&quot;) + &quot;/Crypto/V1&quot; );
	vars.put(&quot;OAUTH_API&quot;, &quot;https://&quot; + vars.get(&quot;PRT_Host&quot;) + &quot;/baas/v1&quot; );
	vars.put(&quot;TOKENIZER_API&quot;, &quot;https://&quot; + vars.get(&quot;TKN_Host&quot;) + &quot;/Tokenizer/v1/api&quot; );
	*/

	//Read properties from .properties file
	vars.put(&quot;CRYPTO_API&quot;, &quot;https://${__P(CRYP_Host)}/Crypto/V1&quot; );
	vars.put(&quot;OAUTH_API&quot;, &quot;https://${__P(PRT_Host)}/baas/v1&quot; );
	vars.put(&quot;TOKENIZER_API&quot;, &quot;https://${__P(TKN_Host)}/Tokenizer/v1/api&quot; );
	vars.put(&quot;IbmMQType&quot;, &quot;AWS&quot;);
	vars.put(&quot;ProgramCode&quot;, &quot;${__P(PROGRAMCODE)}&quot; );
	vars.put(&quot;ProductCode&quot;, &quot;${__P(PRODUCT_CODE)}&quot; );
	vars.put(&quot;AUTH&quot;, &quot;${__P(AUTH)}&quot; );
	vars.put(&quot;BOS-CRYPTO-TPK&quot;, &quot;${__P(BOS-CRYPTO-TPK)}&quot; );
	//vars.put(&quot;BOS_DB&quot;, &quot;${__P(BOS_DB)}&quot; );
}

//Read properties from Jmeter Test Plan lever User defined variables
vars.put(&quot;QATOOL_API&quot;, vars.get(&quot;QATOOL_ENDPOINT&quot;));
vars.put(&quot;SimulatorService&quot;, vars.get(&quot;SIM_ENDPOINT&quot;));
vars.put(&quot;QAToolsServer&quot;, &quot;gdqatools&quot; );
vars.put(&quot;StartDate&quot;, vars.get(&quot;START_DATE&quot;));
vars.put(&quot;EndDate&quot;, vars.get(&quot;END_DATE&quot;));
vars.put(&quot;RequestPhysicalPlasticFlag&quot;, &quot;true&quot; );
</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="GBOS Variable" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="QATOOL_API" elementType="Argument">
            <stringProp name="Argument.name">QATOOL_API</stringProp>
            <stringProp name="Argument.value">${QATOOL_ENDPOINT}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SimulatorService" elementType="Argument">
            <stringProp name="Argument.name">SimulatorService</stringProp>
            <stringProp name="Argument.value">${SIM_ENDPOINT}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="QAToolsServer" elementType="Argument">
            <stringProp name="Argument.name">QAToolsServer</stringProp>
            <stringProp name="Argument.value">gdqatools</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="StartDate" elementType="Argument">
            <stringProp name="Argument.name">StartDate</stringProp>
            <stringProp name="Argument.value">${START_DATE}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EndDate" elementType="Argument">
            <stringProp name="Argument.name">EndDate</stringProp>
            <stringProp name="Argument.value">${END_DATE}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RequestPhysicalPlasticFlag" elementType="Argument">
            <stringProp name="Argument.name">RequestPhysicalPlasticFlag</stringProp>
            <stringProp name="Argument.value">true</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="BOS GBOS DB Connection" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">GBOS</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${__P(BOS_DB)}:1433;databaseName=GBOS</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">G33Nff4%$^</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">qa_automation</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="BOS CAS DB Connection" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">CAS</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${BOS_CAS_DB}:1433;databaseName=CAS</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">G33Nff4%$^</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">qa_automation</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="GSS DB Connection-Retail" enabled="true">
        <stringProp name="dataSource">Retail</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${GSS_DB}:1433;databaseName=Retail;</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">qa_automation</stringProp>
        <stringProp name="password">G33Nff4%$^</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="GSS DB Connection-Billpay" enabled="true">
        <stringProp name="dataSource">BillPay</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${GSS_DB}:1433;databaseName=BillPay;</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">qa_automation</stringProp>
        <stringProp name="password">G33Nff4%$^</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json </stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Debug Only" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Cleanup existing files-All" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Delete existing file-1" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

log.info(FileServer.getFileServer().getBaseDir());

try{
	List files = FileUtils.listFiles(new File(vars.get(&quot;WORKSPACE_PATH&quot;) + File.separator + &quot;multi-thread&quot;), new String[]{&quot;csv&quot;}, true);
	for (File file : files) {
		file.delete();
	}

	List files = FileUtils.listFiles(new File(vars.get(&quot;WORKSPACE_PATH&quot;) + File.separator + &quot;SplitFiles&quot;), new String[]{&quot;csv&quot;}, true);
	for (File file : files) {
		file.delete();
	}
}
catch (Throwable ex)
{
	log.error(&quot;Error in Cleanup existing files&quot;, ex);
	throw ex;
}
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Delete existing file" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

log.info(FileServer.getFileServer().getBaseDir());

try{
	List files = FileUtils.listFiles(new File(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator + &quot;multi-thread&quot;), new String[]{&quot;csv&quot;}, true);
	for (File file : files) {
		file.delete();
	}
}
catch (Throwable ex)
{
	log.error(&quot;Error in Cleanup existing files&quot;, ex);
	throw ex;
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Get AccountData from DB" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="RESULT_FILE_NAME" elementType="Argument">
              <stringProp name="Argument.name">RESULT_FILE_NAME</stringProp>
              <stringProp name="Argument.value">${__P(ResultFileName, account-from-db.csv)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Delete existing file" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

log.info(vars.get (&quot;WORKSPACE_PATH&quot;));

try{
	File file = new File(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;);

	List files = FileUtils.listFiles(new File(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator + &quot;multi-thread&quot;), new String[]{&quot;csv&quot;}, true);
	for (File file : files) {
	file.delete();
	}

	if (file.exists())
	{
		//FileServer.getFileServer().closeFile(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME_P}&quot;);
		//FileServer.getFileServer().closeFile(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;);
		FileServer.getFileServer().closeFiles();
		//FileUtils.deleteQuietly(file);
	 	//FileDeleteStrategy.FORCE.delete(file);
	 	System.gc();
	 	file.setWritable(true);
	 	
	 	if (!file.delete()) 
       	{ 
                log.error(&quot;Couldn&apos;t delete file&quot;); 
        	} 
        	else 
        	{ 
                log.info(&quot;Successfully deleted file: &quot; + file.getName()); 
        	}
	}
} catch (FileNotFoundException e) {
    log.error(&quot;FileNotFoundException in Delete csv files&quot;, e);
    //e.printStackTrace();
} catch (IOException e) {
    log.error(&quot;IOException in Delete csv files&quot;, e);
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
          <stringProp name="SwitchController.value">${CURRENT_CONTROLLER}</stringProp>
        </SwitchController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Tailfin_GetAccount_UpdateTerms_GetUsers" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">
select top ${NUMBER_OF_ACCOUNTS} a.AccountIdentifier
from Account a
inner join Product p (nolock) on (p.ProductKey = a.ProductKey)
inner join Program pg (nolock) on (pg.ProgramKey = p.ProgramKey)
inner join AccountStatus s (nolock) on (a.AccountStatusKey = s.AccountStatusKey)
inner join AccountHolder h (nolock) on (h.AccountKey = a.AccountKey)
--inner join AccountBalance ab (nolock) on (ab.AccountKey = a.AccountKey)
--inner join Currency cur (nolock) on (cur.CurrencyKey = ab.CurrencyKey)
--inner join ConsumerProfile cp (nolock) on (cp.ConsumerProfileKey = h.ConsumerProfileKey)
--inner join ConsumerProfileIdentity cpi (nolock) on cpi.ConsumerProfileKey=cp.ConsumerProfileKey
--inner join ConsumerProfilePhone cpp (nolock) on cpp.ConsumerProfileKey = cp.ConsumerProfileKey
--inner join AccountHolder_PaymentIdentifier ap (nolock) on (ap.AccountHolderKey = h.AccountHolderKey)
where p.productCode=&apos;${ProductCode}&apos;
--and cpi.IdentityTypeKey=1
and a.CreateDate between &apos;${StartDate}&apos; and &apos;${EndDate}&apos;
order by a.CreateDate desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">AccountIdentifier</stringProp>
              <stringProp name="resultVariable">AccountList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3</stringProp>
            </LoopController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{

//	String RequestId = java.util.UUID.randomUUID().toString();
	fstream.write(row.get(&quot;AccountIdentifier&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="NonTailfin_GetAccount_UpdateTerms_GetUsers" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">
select top ${NUMBER_OF_ACCOUNTS} a.AccountIdentifier
from Account a
inner join Product p (nolock) on (p.ProductKey = a.ProductKey)
inner join Program pg (nolock) on (pg.ProgramKey = p.ProgramKey)
inner join AccountStatus s (nolock) on (a.AccountStatusKey = s.AccountStatusKey)
inner join AccountHolder h (nolock) on (h.AccountKey = a.AccountKey)
inner join AccountBalance ab (nolock) on (ab.AccountKey = a.AccountKey)
inner join Currency cur (nolock) on (cur.CurrencyKey = ab.CurrencyKey)
inner join ConsumerProfile cp (nolock) on (cp.ConsumerProfileKey = h.ConsumerProfileKey)
inner join ConsumerProfileIdentity cpi (nolock) on cpi.ConsumerProfileKey=cp.ConsumerProfileKey
inner join ConsumerProfilePhone cpp (nolock) on cpp.ConsumerProfileKey = cp.ConsumerProfileKey
inner join AccountHolder_PaymentIdentifier ap (nolock) on (ap.AccountHolderKey = h.AccountHolderKey)
where p.productCode=&apos;${ProductCode}&apos;
and cpi.IdentityTypeKey=1
and a.CreateDate between &apos;${StartDate}&apos; and &apos;${EndDate}&apos;
order by a.CreateDate desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">AccountIdentifier</stringProp>
              <stringProp name="resultVariable">AccountList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3</stringProp>
            </LoopController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{

//	String RequestId = java.util.UUID.randomUUID().toString();
	fstream.write(row.get(&quot;AccountIdentifier&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Int1099Form_GetAccount_UpdateTerms_GetUsers" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">/*
select top ${NUMBER_OF_ACCOUNTS} a.AccountIdentifier
from Account a
inner join Product p (nolock) on (p.ProductKey = a.ProductKey)
inner join Program pg (nolock) on (pg.ProgramKey = p.ProgramKey)
inner join AccountStatus s (nolock) on (a.AccountStatusKey = s.AccountStatusKey)
inner join AccountHolder h (nolock) on (h.AccountKey = a.AccountKey)
inner join AccountBalance ab (nolock) on (ab.AccountKey = a.AccountKey)
inner join Currency cur (nolock) on (cur.CurrencyKey = ab.CurrencyKey)
inner join ConsumerProfile cp (nolock) on (cp.ConsumerProfileKey = h.ConsumerProfileKey)
inner join ConsumerProfileIdentity cpi (nolock) on cpi.ConsumerProfileKey=cp.ConsumerProfileKey
inner join ConsumerProfilePhone cpp (nolock) on cpp.ConsumerProfileKey = cp.ConsumerProfileKey
inner join AccountHolder_PaymentIdentifier ap (nolock) on (ap.AccountHolderKey = h.AccountHolderKey)
where p.productCode=&apos;${ProductCode}&apos;
and cpi.IdentityTypeKey=1
and a.CreateDate between &apos;${StartDate}&apos; and &apos;${EndDate}&apos;
and a.accountkey between 20643816 and 23573293
order by a.CreateDate desc
*/

select top ${NUMBER_OF_ACCOUNTS} AccountIdentifier	--, count(postinternaltransactionkey) total_trans_count,sum(TransactionAmount) sumamount
	 from postinternaltransaction with(nolock)
	where ProcessorTransactionDate&lt;&apos;2020-01-01&apos; and TransClassKey=135
	and Accountidentifier in (
	Select AccountIdentifier From Account 
	Where Productkey=25 and AccountExternalProxy is not null)
	group by AccountIdentifier
	having sum(TransactionAmount)&gt;=10 --count(postinternaltransactionkey)&gt;2
	--order by total_trans_count des</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">AccountIdentifier</stringProp>
              <stringProp name="resultVariable">AccountList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{

//	String RequestId = java.util.UUID.randomUUID().toString();
	fstream.write(row.get(&quot;AccountIdentifier&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetP2POnhold" enabled="true"/>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetP2POnhold" enabled="true"/>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetP2POnhold" enabled="true"/>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetP2POnhold" enabled="true"/>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetP2POnhold" enabled="true"/>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetP2POnhold" enabled="true"/>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SearchAccount" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">
select top ${NUMBER_OF_ACCOUNTS} a.AccountIdentifier, cpp.PhoneNumber, cp.ConsumerProfileKey, cpi.IdentityToken
from Account a
inner join Product p (nolock) on (p.ProductKey = a.ProductKey)
inner join Program pg (nolock) on (pg.ProgramKey = p.ProgramKey)
inner join AccountStatus s (nolock) on (a.AccountStatusKey = s.AccountStatusKey)
inner join AccountHolder h (nolock) on (h.AccountKey = a.AccountKey)
inner join AccountBalance ab (nolock) on (ab.AccountKey = a.AccountKey)
inner join Currency cur (nolock) on (cur.CurrencyKey = ab.CurrencyKey)
inner join ConsumerProfile cp (nolock) on (cp.ConsumerProfileKey = h.ConsumerProfileKey)
inner join ConsumerProfileIdentity cpi (nolock) on cpi.ConsumerProfileKey=cp.ConsumerProfileKey
inner join ConsumerProfilePhone cpp (nolock) on cpp.ConsumerProfileKey = cp.ConsumerProfileKey
inner join AccountHolder_PaymentIdentifier ap (nolock) on (ap.AccountHolderKey = h.AccountHolderKey)
where p.productCode=&apos;${ProductCode}&apos;
and cpi.IdentityTypeKey=1
and a.CreateDate between &apos;${StartDate}&apos; and &apos;${EndDate}&apos;
order by a.CreateDate desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">AccountIdentifier,PhoneNumber,ConsumerProfileKey,IdentityToken</stringProp>
              <stringProp name="resultVariable">AccountList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{

	String RequestId = java.util.UUID.randomUUID().toString();
	fstream.write(row.get(&quot;AccountIdentifier&quot;) + &quot;,&quot; + row.get(&quot;PhoneNumber&quot;) + &quot;,&quot; + row.get(&quot;ConsumerProfileKey&quot;) + &quot;,&quot; + row.get(&quot;IdentityToken&quot;) + &quot;,&quot; + RequestId + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetStatements" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">Select  TOP ${NUMBER_OF_ACCOUNTS} a.AccountIdentifier as accountIdentifier
--, @startDate as startDate
--, @endDate as endDate
From AccountBalance As ab with(nolock)
inner Join Account As a with(nolock)
On ab.AccountKey = a.AccountKey
INNER JOIN Product AS p with(nolock)
ON p.ProductKey=a.ProductKey
INNER JOIN AccountBillCycle abc with (NOLOCK) 
ON abc.AccountKey = a.AccountKey
inner Join AccountHolder As ah with(nolock)
On ah.AccountKey = a.AccountKey
inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
On ahpi.AccountHolderKey = ah.AccountHolderKey
inner Join PaymentIdentifier As pid with(nolock)
On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
inner join PostTransaction PIT with(NOLOCK) 
ON PIT.AccountIdentifier = A.AccountIdentifier
where p.ProductCode=&apos;${ProductCode}&apos;
and  ab.AvailableBalance&gt;1
and abc.ActivationDate &lt; GETDATE()-33
and PIT.ProcessorBusinessDate &gt; GETDATE()-30 and PIT.ProcessorBusinessDate &lt; GETDATE()-4
and a.CreateDate &gt;&apos;${START_DATE}&apos; and a.CreateDate &lt;&apos;${END_DATE}&apos;
Order by a.CreateDate desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">accountIdentifier,sartDate,endDate</stringProp>
              <stringProp name="resultVariable">AccountList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{
	fstream.write(row.get(&quot;accountIdentifier&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="UpdateAddress" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select top ${NUMBER_OF_ACCOUNTS} a.accountIdentifier, CP.ConsumerProfileIdentifier as &apos;userIdentifier&apos; 
from Account a
inner join Product p with(nolock) on a.productkey=p.productkey
INNER JOIN AccountHolder AH with(NOLOCK) ON AH.AccountKey = A.AccountKey
INNER JOIN ConsumerProfileIdentity CPI with(NOLOCK) ON CPI.ConsumerProfileKey = AH.ConsumerProfileKey
INNER JOIN ConsumerProfile CP with(NOLOCK) ON CP.ConsumerProfileKey = AH.ConsumerProfileKey
INNER JOIN ConsumerProfileAddress CPA with(NOLOCK) ON CPA.ConsumerProfileKey = CP.ConsumerProfileKey
where AccountStatusKey=2
and p.productCode=&apos;${ProductCode}&apos;
and a.CreateDate BETWEEN &apos;${StartDate}&apos; and &apos;${EndDate}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">accountIdentifier,userIdentifier</stringProp>
              <stringProp name="resultVariable">AccountList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{
	fstream.write(row.get(&quot;accountIdentifier&quot;) + &quot;,&quot; + row.get(&quot;userIdentifier&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="UpdateUser" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select top ${NUMBER_OF_ACCOUNTS} a.accountIdentifier, CP.ConsumerProfileIdentifier as &apos;userIdentifier&apos; 
from Account a
inner join Product p with(nolock) on a.productkey=p.productkey
INNER JOIN AccountHolder AH with(NOLOCK) ON AH.AccountKey = A.AccountKey
INNER JOIN ConsumerProfileIdentity CPI with(NOLOCK) ON CPI.ConsumerProfileKey = AH.ConsumerProfileKey
INNER JOIN ConsumerProfile CP with(NOLOCK) ON CP.ConsumerProfileKey = AH.ConsumerProfileKey
INNER JOIN ConsumerProfileAddress CPA with(NOLOCK) ON CPA.ConsumerProfileKey = CP.ConsumerProfileKey
where AccountStatusKey=2
and p.productCode=&apos;${ProductCode}&apos;
and a.CreateDate BETWEEN &apos;${StartDate}&apos; and &apos;${EndDate}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">accountIdentifier,userIdentifier</stringProp>
              <stringProp name="resultVariable">AccountList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{
	fstream.write(row.get(&quot;accountIdentifier&quot;) + &quot;,&quot; + row.get(&quot;userIdentifier&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetACHTransfers" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
select top ${NUMBER_OF_ACCOUNTS} a.AccountIdentifier
,CONVERT(VARCHAR(10),GETDATE()-30,120) as StartDate
, CONVERT(VARCHAR(10),GETDATE(),120) as EndDate
from FundTransferDetail ftd
inner join FundTransfer f (nolock) on (f.FundTransferKey = ftd.FundTransferKey)
inner join identifiertype it (nolock) on (it.identifiertypekey = ftd.identifiertypekey)
inner join FundTransferStatus fs (nolock) on (fs.FundTransferStatuskey = ftd.FundTransferStatuskey)
inner join FundTransferType ftt(nolock) on ftt.FundTransferTypeKey = f.FundTransferTypeKey
inner join Account a (nolock) on a.AccountIdentifier=f.InitiatorAccountIdentifier
inner join Product p (nolock) on a.ProductKey = p.ProductKey
inner join Program pg (nolock) on p.ProgramKey = pg.ProgramKey
where  f.FundTransferTypeKey =3 --7 means achpull
and ftd.IdentifierTypeKey=3 
and pg.ProgramCode= &apos;${ProgramCode}&apos;
and p.ProductCode = &apos;${ProductCode}&apos;
and f.CreateDate between DATEADD(day,-30,GETDATE()) and GETDATE()
group by a.AccountIdentifier</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">AccountIdentifier,StartDate,EndDate</stringProp>
              <stringProp name="resultVariable">AccountList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{
	fstream.write(row.get(&quot;AccountIdentifier&quot;) + &quot;,&quot; + row.get(&quot;StartDate&quot;) + &quot;,&quot; +  row.get(&quot;EndDate&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetMRDCTransfers" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
select top ${NUMBER_OF_ACCOUNTS} f.InitiatorAccountIdentifier as AccountIdentifier
,ftd.TransactionReferenceID as TransferIdentifier
,CONVERT(VARCHAR(10),GETDATE()-30,120) as StartDate
, CONVERT(VARCHAR(10),GETDATE(),120) as EndDate
from FundTransferDetail ftd
inner join FundTransfer f (nolock) on (f.FundTransferKey = ftd.FundTransferKey)
inner join identifiertype it (nolock) on (it.identifiertypekey = ftd.identifiertypekey)
inner join FundTransferStatus fs (nolock) on (fs.FundTransferStatuskey = ftd.FundTransferStatuskey)
inner join FundTransferType ftt(nolock) on ftt.FundTransferTypeKey = f.FundTransferTypeKey
inner join FundTransferDelayType fd (nolock) on fd.FundTransferDelayTypeKey = f.FundTransferDelayTypeKey
inner join transClass tc (nolock) on (tc.transClasskey = ftd.transClasskey)
inner join Account a (nolock) on a.AccountIdentifier=f.InitiatorAccountIdentifier
inner join Product p (nolock) on a.ProductKey = p.ProductKey
inner join Program pg (nolock) on p.ProgramKey = pg.ProgramKey
where ftd.IsSource=1
and f.FundTransferTypeKey =9 
--and fs.FundTransferStatus=&apos;Pending&apos;
and pg.ProgramCode= &apos;${ProgramCode}&apos;
and p.ProductCode = &apos;${ProductCode}&apos;
and f.CreateDate between DATEADD(day,-30,GETDATE()) and GETDATE()
 order by ftd.FundTransferDetailkey desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">AccountIdentifier,TransferIdentifier,StartDate,EndDate</stringProp>
              <stringProp name="resultVariable">AccountList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{

	fstream.write(row.get(&quot;AccountIdentifier&quot;) + &quot;,&quot; + row.get(&quot;TransferIdentifier&quot;) + &quot;,&quot; + row.get(&quot;StartDate&quot;) + &quot;,&quot; +  row.get(&quot;EndDate&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetMRDCCheck" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
select top ${NUMBER_OF_ACCOUNTS} f.InitiatorAccountIdentifier as AccountIdentifier
,ftd.TransactionReferenceID as TransferIdentifier
from FundTransferDetail ftd
inner join FundTransfer f (nolock) on (f.FundTransferKey = ftd.FundTransferKey)
inner join identifiertype it (nolock) on (it.identifiertypekey = ftd.identifiertypekey)
inner join FundTransferStatus fs (nolock) on (fs.FundTransferStatuskey = ftd.FundTransferStatuskey)
inner join FundTransferType ftt(nolock) on ftt.FundTransferTypeKey = f.FundTransferTypeKey
inner join FundTransferDelayType fd (nolock) on fd.FundTransferDelayTypeKey = f.FundTransferDelayTypeKey
inner join transClass tc (nolock) on (tc.transClasskey = ftd.transClasskey)
inner join Account a (nolock) on a.AccountIdentifier=f.InitiatorAccountIdentifier
inner join Product p (nolock) on a.ProductKey = p.ProductKey
inner join Program pg (nolock) on p.ProgramKey = pg.ProgramKey
where ftd.IsSource=1
and f.FundTransferTypeKey =9 
--and fs.FundTransferStatus=&apos;Pending&apos;
and pg.ProgramCode= &apos;${ProgramCode}&apos;
and p.ProductCode = &apos;${ProductCode}&apos;
and f.CreateDate between DATEADD(day,-30,GETDATE()) and GETDATE()
 order by ftd.FundTransferDetailkey desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">AccountIdentifier,TransferIdentifier</stringProp>
              <stringProp name="resultVariable">AccountList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{

	fstream.write(row.get(&quot;AccountIdentifier&quot;) + &quot;,&quot; + row.get(&quot;TransferIdentifier&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="UpdateMRDCCheck" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
select top ${NUMBER_OF_ACCOUNTS} f.InitiatorAccountIdentifier as AccountIdentifier
,ftd.TransactionReferenceID as TransferIdentifier
from FundTransferDetail ftd
inner join FundTransfer f (nolock) on (f.FundTransferKey = ftd.FundTransferKey)
inner join identifiertype it (nolock) on (it.identifiertypekey = ftd.identifiertypekey)
inner join FundTransferStatus fs (nolock) on (fs.FundTransferStatuskey = ftd.FundTransferStatuskey)
inner join FundTransferType ftt(nolock) on ftt.FundTransferTypeKey = f.FundTransferTypeKey
inner join FundTransferDelayType fd (nolock) on fd.FundTransferDelayTypeKey = f.FundTransferDelayTypeKey
inner join transClass tc (nolock) on (tc.transClasskey = ftd.transClasskey)
inner join Account a (nolock) on a.AccountIdentifier=f.InitiatorAccountIdentifier
inner join Product p (nolock) on a.ProductKey = p.ProductKey
inner join Program pg (nolock) on p.ProgramKey = pg.ProgramKey
where ftd.IsSource=1
and f.FundTransferTypeKey =9 
and fs.FundTransferStatus=&apos;Pending&apos;
and pg.ProgramCode= &apos;${ProgramCode}&apos;
and p.ProductCode = &apos;${ProductCode}&apos;
and f.CreateDate between DATEADD(day,-30,GETDATE()) and GETDATE()
 order by ftd.FundTransferDetailkey desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">AccountIdentifier,TransferIdentifier</stringProp>
              <stringProp name="resultVariable">AccountList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{

	fstream.write(row.get(&quot;AccountIdentifier&quot;) + &quot;,&quot; + row.get(&quot;TransferIdentifier&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetP2POnhold" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get accountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">
select top ${NUMBER_OF_ACCOUNTS}
 ftd.Identifier
from FundTransfer t
inner join FundTransferType tt (nolock) on t.FundTransferTypeKey = tt.FundTransferTypeKey
inner join FundTransferDelayType dt (nolock) on t.FundTransferDelayTypeKey = dt.FundTransferDelayTypeKey
inner join FundTransferStatus ts (nolock) on t.FundTransferStatusKey = ts.FundTransferStatusKey
inner join FundTransferDetail ftd (nolock) on ftd.FundTransferKey=t.FundTransferKey
inner join Account a (nolock) on a.AccountIdentifier=ftd.Identifier
inner join Product p (nolock) on a.ProductKey = p.ProductKey
inner join Program pg (nolock) on p.ProgramKey = pg.ProgramKey
where tt.FundTransferType = &apos;Peer to Peer Transfer&apos;
and dt.FundTransferDelayType = &apos;Approval Required&apos;
and ts.FundTransferStatus = &apos;Pending&apos;
and t.CreateDate &gt; DATEADD(day,-13,GETDATE())
and t.SourceHandle is not NULL
and t.TargetHandle is not NULL
and pg.ProgramCode= &apos;${ProgramCode}&apos;
and p.ProductCode=&apos;${ProductCode}&apos;
--and ftd.IsSource=1 --0</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">Identifier</stringProp>
              <stringProp name="resultVariable">AccountIdentifierList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountIdentifierList&quot;))
{
	
	fstream.write(row.get(&quot;Identifier&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GBR_GetAllExternalCards" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select distinct top ${NUMBER_OF_ACCOUNTS} AccountIdentifier
from AccountExternalPaymentIdentifier i (nolock)
join ExternalPaymentIdentifierStatus s (nolock) on i.ExternalPaymentIdentifierStatusKey = s.ExternalPaymentIdentifierStatusKey
join Account a (nolock) on i.AccountKey = a.AccountKey
join Association c (nolock) on i.AssociationKey = c.AssociationKey
where s.ExternalPaymentIdentifierStatusKey=1
AND a.productkey = (
select productkey from product where ProductCode =&apos;${ProductCode}&apos;)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">AccountIdentifier</stringProp>
              <stringProp name="resultVariable">AccountList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{
	fstream.write(row.get(&quot;AccountIdentifier&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GBR_DelExternalCard" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select top ${NUMBER_OF_ACCOUNTS} AccountIdentifier, i.AccountExternalPaymentIdentifier
from AccountExternalPaymentIdentifier i (nolock)
join ExternalPaymentIdentifierStatus s (nolock) on i.ExternalPaymentIdentifierStatusKey = s.ExternalPaymentIdentifierStatusKey
join Account a (nolock) on i.AccountKey = a.AccountKey
join Association c (nolock) on i.AssociationKey = c.AssociationKey
where s.ExternalPaymentIdentifierStatusKey=1
AND a.productkey = (
select productkey from product where ProductCode =&apos;${ProductCode}&apos;)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">AccountIdentifier,AccountExternalPaymentIdentifier</stringProp>
              <stringProp name="resultVariable">AccountList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{
	fstream.write(row.get(&quot;AccountIdentifier&quot;) + &quot;,&quot; + row.get(&quot;AccountExternalPaymentIdentifier&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Kyc2" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select top ${NUMBER_OF_ACCOUNTS}
a.AccountIdentifier as accountIdentifier,
cp.ConsumerProfileIdentifier as userIdentifier,
cp.Last4SSN as last4SSN
from VerificationRequest vr (nolock)
inner join AccountHolder ah (nolock) on ah.AccountHolderKey = vr.AccountHolderKey
inner join AccountHolderCure ahc (nolock) on ahc.AccountHolderCureKey = ah.AccountHolderCureKey
inner join VerificationActivity va (nolock) on va.VerificationRequestKey = vr.VerificationRequestKey
inner join VerificationStatus vs (nolock) on vs.VerificationStatusKey = vr.VerificationStatusKey
inner join VerificationActivityType vat (nolock) on vat.VerificationActivityTypeKey = va.VerificationActivityTypeKey
inner join Product pr (nolock) on pr.ProductKey = vr.ProductKey
inner join Account a (nolock) on a.AccountKey = ah.AccountKey
inner join ConsumerProfile cp (nolock) on cp.ConsumerProfileKey = ah.ConsumerProfileKey
where 
 pr.ProductCode = &apos;${ProductCode}&apos;
and vs.VerificationStatus = &apos;Failed&apos; 
and vat.VerificationActivityType = &apos;CIP / KYC&apos; 
and ahc.AccountHolderCure = &apos;KYC2&apos;

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">accountIdentifier,useIdentifier,last4SSN</stringProp>
              <stringProp name="resultVariable">AccountDataList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountDataList&quot;))
{
	fstream.write(row.get(&quot;accountIdentifier&quot;) + &quot;,&quot; + row.get(&quot;userIdentifier&quot;)+&quot;,&quot;+row.get(&quot;last4SSN&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="P2POnhold" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get accountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">
select top ${NUMBER_OF_ACCOUNTS}
 ftd.Identifier,t.FundTransferToken
from FundTransfer t
inner join FundTransferType tt (nolock) on t.FundTransferTypeKey = tt.FundTransferTypeKey
inner join FundTransferDelayType dt (nolock) on t.FundTransferDelayTypeKey = dt.FundTransferDelayTypeKey
inner join FundTransferStatus ts (nolock) on t.FundTransferStatusKey = ts.FundTransferStatusKey
inner join FundTransferDetail ftd (nolock) on ftd.FundTransferKey=t.FundTransferKey
inner join Account a (nolock) on a.AccountIdentifier=ftd.Identifier
inner join Product p (nolock) on a.ProductKey = p.ProductKey
inner join Program pg (nolock) on p.ProgramKey = pg.ProgramKey
where tt.FundTransferType = &apos;Peer to Peer Transfer&apos;
and dt.FundTransferDelayType = &apos;Approval Required&apos;
and ts.FundTransferStatus = &apos;Pending&apos;
and t.CreateDate &gt; DATEADD(day,-13,GETDATE())
and t.SourceHandle is not NULL
and t.TargetHandle is not NULL
and pg.ProgramCode= &apos;${ProgramCode}&apos;
and p.ProductCode=&apos;${ProductCode}&apos;
and ftd.IsSource=1 --0</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">Identifier,FundTransferToken</stringProp>
              <stringProp name="resultVariable">AccountIdentifierList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountIdentifierList&quot;))
{
	
	fstream.write(row.get(&quot;Identifier&quot;) + &quot;,&quot; + row.get(&quot;FundTransferToken&quot;)+ System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CloseAccount" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">
select top ${NUMBER_OF_ACCOUNTS} a.AccountIdentifier
from Account a
inner join Product p (nolock) on (p.ProductKey = a.ProductKey)
inner join Program pg (nolock) on (pg.ProgramKey = p.ProgramKey)
inner join AccountStatus s (nolock) on (a.AccountStatusKey = s.AccountStatusKey)
inner join AccountHolder h (nolock) on (h.AccountKey = a.AccountKey)
inner join AccountBalance ab (nolock) on (ab.AccountKey = a.AccountKey)
inner join Currency cur (nolock) on (cur.CurrencyKey = ab.CurrencyKey)
inner join ConsumerProfile cp (nolock) on (cp.ConsumerProfileKey = h.ConsumerProfileKey)
inner join ConsumerProfileIdentity cpi (nolock) on cpi.ConsumerProfileKey=cp.ConsumerProfileKey
inner join ConsumerProfilePhone cpp (nolock) on cpp.ConsumerProfileKey = cp.ConsumerProfileKey
inner join AccountHolder_PaymentIdentifier ap (nolock) on (ap.AccountHolderKey = h.AccountHolderKey)
where p.productCode=&apos;${ProductCode}&apos;
and cpi.IdentityTypeKey=1
and a.AccountStatuskey=2
and ab.AVAILABLEBALANCE&gt;0
and a.CreateDate between &apos;${StartDate}&apos; and &apos;${EndDate}&apos;
order by a.CreateDate asc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">AccountIdentifier</stringProp>
              <stringProp name="resultVariable">AccountList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{

//	String RequestId = java.util.UUID.randomUUID().toString();
	fstream.write(row.get(&quot;AccountIdentifier&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PutAccountStatus" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">
select top ${NUMBER_OF_ACCOUNTS} a.AccountIdentifier
from Account a
inner join Product p (nolock) on (p.ProductKey = a.ProductKey)
inner join Program pg (nolock) on (pg.ProgramKey = p.ProgramKey)
inner join AccountStatus s (nolock) on (a.AccountStatusKey = s.AccountStatusKey)
inner join AccountHolder h (nolock) on (h.AccountKey = a.AccountKey)
inner join AccountBalance ab (nolock) on (ab.AccountKey = a.AccountKey)
inner join Currency cur (nolock) on (cur.CurrencyKey = ab.CurrencyKey)
inner join ConsumerProfile cp (nolock) on (cp.ConsumerProfileKey = h.ConsumerProfileKey)
inner join ConsumerProfileIdentity cpi (nolock) on cpi.ConsumerProfileKey=cp.ConsumerProfileKey
inner join ConsumerProfilePhone cpp (nolock) on cpp.ConsumerProfileKey = cp.ConsumerProfileKey
inner join AccountHolder_PaymentIdentifier ap (nolock) on (ap.AccountHolderKey = h.AccountHolderKey)
where p.productCode=&apos;${ProductCode}&apos;
and cpi.IdentityTypeKey=1
and a.AccountStatuskey=2
and ab.AVAILABLEBALANCE&gt;0
and a.CreateDate between &apos;${StartDate}&apos; and &apos;${EndDate}&apos;
order by a.CreateDate asc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">AccountIdentifier</stringProp>
              <stringProp name="resultVariable">AccountList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{

//	String RequestId = java.util.UUID.randomUUID().toString();
	fstream.write(row.get(&quot;AccountIdentifier&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetAccount-OD" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT distinct top  ${NUMBER_OF_ACCOUNTS} a.AccountIdentifier
        FROM Account a  (nolock)
            INNER JOIN dbo.AccountHolder ah (nolock)
                ON a.AccountKey = ah.AccountKey
            INNER JOIN dbo.AccountHolderAgreement aha (nolock)
                ON ah.AccountHolderKey = aha.AccountHolderKey
                   AND aha.HasAccepted = 1
                   AND aha.OptoutDate IS NULL
            INNER JOIN dbo.AccountBillCycle abc (nolock)
                ON abc.AccountKey = a.AccountKey
            inner join dbo.AccountSubscription acs (nolock)
                on acs.AccountKey = a.AccountKey
            inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
                On ahpi.AccountHolderKey = ah.AccountHolderKey
            inner Join PaymentIdentifier As pid with(nolock)
                On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
                    and pid.PaymentIdentifierStatusKey=1
            left JOIN dbo.ProductAgreementType pat  (nolock)
                ON pat.ProductAgreementTypeKey = aha.ProductAgreementTypeKey
            left JOIN dbo.BrandAgreementType bat  (nolock)
                ON bat.BrandAgreementTypeKey = pat.BrandAgreementTypeKey
                    and bat.BrandAgreementTypeIdentifier like &apos;overdraft%&apos;
            where        
            a.ProductKey=9</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">AccountIdentifier</stringProp>
              <stringProp name="resultVariable">AccountList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3</stringProp>
            </LoopController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{

//	String RequestId = java.util.UUID.randomUUID().toString();
	fstream.write(row.get(&quot;AccountIdentifier&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetLinkedAccount" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">
select top ${NUMBER_OF_ACCOUNTS} a.AccountIdentifier
from Account a with(nolock)
inner join AccountLink al with(nolock)
on a.accountkey = al.PrimaryAccountKey
inner join Product p with(nolock)
on a.productkey = p.productkey
where p.productCode=&apos;${ProductCode}&apos;
and a.CreateDate between &apos;${StartDate}&apos; and &apos;${EndDate}&apos;
--order by a.CreateDate desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">AccountIdentifier</stringProp>
              <stringProp name="resultVariable">AccountList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{

//	String RequestId = java.util.UUID.randomUUID().toString();
	fstream.write(row.get(&quot;AccountIdentifier&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetMRDCFulfillment-SingleTransfer" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select  top ${NUMBER_OF_ACCOUNTS}
a.AccountIdentifier, ft.FundTransferToken, ft.TransactionDate,ft.CreateDate
from account a with(nolock)
inner join product p with(nolock)
on a.productkey=p.productkey
inner join FundTransfer ft with(nolock)
on ft.InitiatorAccountIdentifier = a.AccountIdentifier
where p.ProductCode=&apos;${ProductCode}&apos; and ft.FundTransferTypeKey=9
 order by ft.FundTransferkey desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">AccountIdentifier,FundTransferToken,TransactionDate,CreateDate</stringProp>
              <stringProp name="resultVariable">AccountList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{

	fstream.write(row.get(&quot;AccountIdentifier&quot;) + &quot;,&quot; + row.get(&quot;FundTransferToken&quot;) + &quot;,&quot; + row.get(&quot;TransactionDate&quot;)+ &quot;,&quot; + row.get(&quot;CreateDate&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetMRDCFulfillment-Paging" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">
select  top ${NUMBER_OF_ACCOUNTS}
a.AccountIdentifier, min(ft.TransactionDate) As TransStartDate, max(ft.TransactionDate) As TransEndDate
 from account a with(nolock)
inner join product p with(nolock)
on a.productkey=p.productkey
inner join FundTransfer ft with(nolock)
on ft.InitiatorAccountIdentifier = a.AccountIdentifier
where p.ProductCode=&apos;${ProductCode}&apos; and ft.FundTransferTypeKey=9
and ft.CreateDate between DATEADD(day,-60,GETDATE()) and GETDATE()
group by a.AccountIdentifier
--having count(a.accountidentifier)&gt;1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">AccountIdentifier,TransStartDate,TransEndDate</stringProp>
              <stringProp name="resultVariable">AccountList</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{

	fstream.write(row.get(&quot;AccountIdentifier&quot;) + &quot;,&quot; + row.get(&quot;TransStartDate&quot;) + &quot;,&quot; + row.get(&quot;TransEndDate&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Multi-Thread Data Generator" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${NUMOFTHREADS_GEN}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMUP_PERIOD_GEN}</stringProp>
        <longProp name="ThreadGroup.start_time">1498168968000</longProp>
        <longProp name="ThreadGroup.end_time">1498168968000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
          <stringProp name="SwitchController.value">${CURRENT_CONTROLLER}</stringProp>
        </SwitchController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Tailfin_GetAccount_UpdateTerms_GetUsers" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="version" elementType="Argument">
                  <stringProp name="Argument.name">version</stringProp>
                  <stringProp name="Argument.value">EC_v1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">AccountIdentifier</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{

String accessToken = &quot;${access_token}&quot;;
String accountIdentifier = vars.get (&quot;AccountIdentifier&quot;);	//&quot;${AccountIdentifier}&quot;;


FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + accountIdentifier + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="NonTailfin_GetAccount_UpdateTerms_GetUsers" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="version" elementType="Argument">
                  <stringProp name="Argument.name">version</stringProp>
                  <stringProp name="Argument.value">EC_v1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">AccountIdentifier</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{

String accessToken = &quot;${access_token}&quot;;
String accountIdentifier = vars.get (&quot;AccountIdentifier&quot;);	//&quot;${AccountIdentifier}&quot;;


FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + accountIdentifier + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Int1099Form_GetAccount_UpdateTerms_GetUsers" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="version" elementType="Argument">
                  <stringProp name="Argument.name">version</stringProp>
                  <stringProp name="Argument.value">EC_v1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">AccountIdentifier</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{

String accessToken = &quot;${access_token}&quot;;
String accountIdentifier = vars.get (&quot;AccountIdentifier&quot;);	//&quot;${AccountIdentifier}&quot;;


FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + accountIdentifier + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SearchAccount" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="version" elementType="Argument">
                  <stringProp name="Argument.name">version</stringProp>
                  <stringProp name="Argument.value">EC_v1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">AccountIdentifier,PhoneNumber,ConsumerProfileKey,IdentityToken,RequestId</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetDecDOB" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:GetDOB&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:Consprofilekey&gt;${ConsumerProfileKey}&lt;/v11:Consprofilekey&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:IbmMQType&gt;${IbmMQType}&lt;/v11:IbmMQType&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:GetDOB&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${QAToolsServer}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${SimulatorService}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/GetDOB</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                <stringProp name="XPathExtractor.default">0000-00-00</stringProp>
                <stringProp name="XPathExtractor.refname">DOB</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//DOB[1]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSSN" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;token&quot;: &quot;${IdentityToken}&quot;,&#xd;
  &quot;requestHeader&quot;: {&#xd;
    &quot;requestId&quot;: &quot;${__UUID}&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${TOKENIZER_API}/Ssn/deTokenize</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
                  <stringProp name="-1997086917">&quot;subStatusCode&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ssn</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.ssn</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AccountData Encryption" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
 &quot;requestHeader&quot;: {&#xd;
 &quot;requestId&quot;: &quot;${RequestId}&quot;&#xd;
 },&#xd;
 &quot;version&quot;: &quot;${version}&quot;,&#xd;
 &quot;salt&quot;: &quot;${RequestId}&quot;,&#xd;
 &quot;programCode&quot;: &quot;${ProgramCode}&quot;,&#xd;
 &quot;data&quot;:&quot;{\&quot;dob\&quot;:\&quot;${DOB}\&quot;,\&quot;PhoneNumber\&quot;:\&quot;${PhoneNumber}\&quot;,\&quot;MetadataCategory\&quot;:\&quot;micro\&quot;,\&quot;SSN\&quot;:\&quot;${ssn}\&quot;}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CRYPTO_API}/encrypt</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                    <stringProp name="Header.value">${BOS-CRYPTO-TPK}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Data Fields From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">encryptedData;ephemeralPublicKey;publicKeyHash;version</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedData.data;$.encryptedData.ephemeralPublicKey;$.encryptedData.publicKeyHash;$.encryptedData.version</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{

String encryptedData = &quot;${encryptedData}&quot;;
String ephemeralPublicKey = &quot;${ephemeralPublicKey}&quot;;
String publicKeyHash = &quot;${publicKeyHash}&quot;;
String version = &quot;${version}&quot;;
String accessToken = &quot;${access_token}&quot;;
String accountIdentifier = vars.get (&quot;AccountIdentifier&quot;);	//&quot;${AccountIdentifier}&quot;;
String requestId = vars.get(&quot;RequestId&quot;);


FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + accountIdentifier + &quot;,&quot; + encryptedData + &quot;,&quot; + ephemeralPublicKey + &quot;,&quot; + publicKeyHash + &quot;,&quot; 
			+ version + &quot;,&quot; + requestId + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetStatements" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">accountIdentifier,startDate,endDate</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token;token_type;expires_in;scope</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token;$.token_type;$.expires_in;$.scope</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{
String AccountIdentifier = &quot;${accountIdentifier}&quot;;
String accessToken = &quot;${access_token}&quot;;


FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + AccountIdentifier + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="UpdateAddress" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">accountIdentifier,userIdentifier</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate enrollment data" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${ProductCode},${ProgramCode}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.lang.RandomStringUtils;

try{
	def address1 = RandomStringUtils.randomNumeric(5) + &apos; &apos; + &apos; Foothill Blvd&apos;
	def address2 = &apos;SUITE &apos; + RandomStringUtils.randomNumeric(3)
	def zipCode = RandomStringUtils.randomNumeric(5)
//	def address1 = &apos;3465 EAST FOOTHILL BLVD&apos; //&apos;3465 E FOOTHILL BLVD&apos;
//	def address2 = &apos;SUITE &apos; + RandomStringUtils.randomNumeric(3)
//	def zipCode = &apos;91107&apos;
	
	def RequestId = java.util.UUID.randomUUID()
	vars.put(&quot;RequestID&quot;, RequestId.toString())


	// address Data
	vars.put(&quot;AddressLine1&quot;, address1)
	vars.put(&quot;AddressLine2&quot;, address2)
	vars.put(&quot;City&quot;, &quot;Pasadena&quot;)
	vars.put(&quot;State&quot;, &quot;CA&quot;)
	vars.put(&quot;ZipCode&quot;, zipCode)
	vars.put(&quot;AddressType&quot;, &quot;home&quot;)
	vars.put(&quot;isDefault&quot;, &quot;true&quot;)
	vars.put(&quot;IsVerified&quot;,&quot;true&quot;)

	vars.put(&quot;version&quot;, &quot;EC_v1&quot;)
	//vars.put(&quot;ProgramName&quot;, vars.get(&apos;ProgramCode&apos;))

}catch (Throwable ex)
{
	log.error(&quot;Error in Generate address data&quot;, ex);
	throw ex;
}
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token;token_type;expires_in;scope</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token;$.token_type;$.expires_in;$.scope</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AddressData Encryption" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
 &quot;requestHeader&quot;: {&#xd;
 &quot;requestId&quot;: &quot;${RequestID}&quot;&#xd;
 },&#xd;
 &quot;version&quot;: &quot;${version}&quot;,&#xd;
 &quot;salt&quot;: &quot;${RequestID}&quot;,&#xd;
 &quot;programCode&quot;: &quot;${ProgramCode}&quot;,&#xd;
 &quot;data&quot;: &quot;{\&quot;ProfileData\&quot;:{\&quot;Addresses\&quot;:[{\&quot;AddressLine1\&quot;:\&quot;${AddressLine1}\&quot;,\&quot;AddressLine2\&quot;:\&quot;${AddressLine2}\&quot;,\&quot;City\&quot;:\&quot;${City}\&quot;,\&quot;State\&quot;:\&quot;${State}\&quot;,\&quot;ZipCode\&quot;:\&quot;${ZipCode}\&quot;,\&quot;Type\&quot;:\&quot;${AddressType}\&quot;,\&quot;IsDefault\&quot;:${isDefault},\&quot;IsVerified\&quot;:${IsVerified}}]}}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CRYPTO_API}/encrypt</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                    <stringProp name="Header.value">${BOS-CRYPTO-TPK}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Data Fields From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">encryptedData;ephemeralPublicKey;publicKeyHash;version;requestId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedData.data;$.encryptedData.ephemeralPublicKey;$.encryptedData.publicKeyHash;$.encryptedData.version;$.responseHeader.responseId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import java.util.UUID;   

try{
	String encryptedData = &quot;${encryptedData}&quot;;
	String ephemeralPublicKey = &quot;${ephemeralPublicKey}&quot;;
	String publicKeyHash = &quot;${publicKeyHash}&quot;;
	String version = &quot;${version}&quot;;
	String accountIdentifier = &quot;${accountIdentifier}&quot;;
	String userIdentifier = &quot;${userIdentifier}&quot;;
	String accessToken = &quot;${access_token}&quot;;
	String requestId = &quot;${requestId}&quot;;


	//FileWriter fstream = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;, true);
	FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;)  + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;, true);
	
	fstream.write(accessToken + &quot;,&quot; + encryptedData + &quot;,&quot; + ephemeralPublicKey + &quot;,&quot; + publicKeyHash + &quot;,&quot; 
			+ version + &quot;,&quot; + accountIdentifier + &quot;,&quot; + userIdentifier + &quot;,&quot; + requestId + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="UpdateUser" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">accountIdentifier,userIdentifier</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate enrollment data" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${ProductCode},${ProgramCode}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.util.Arrays
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.apache.commons.lang.StringEscapeUtils
import org.apache.commons.lang.RandomStringUtils

try{
	def addressline1 = RandomStringUtils.randomNumeric(5) + &apos; &apos; + &apos; Foothill Blvd&apos;
def addressline2 = &apos;SUITE &apos; + RandomStringUtils.randomNumeric(3)
def isAddressVerified  = &quot;true&quot;
def IsAddressDefault  = &quot;true&quot;
def addressType  = &quot;home&quot;
def city = &quot;Pasadena&quot;
def state = &quot;CA&quot;
def zipCode = RandomStringUtils.randomNumeric(5)
//def isEmailVerified = testRunner.testCase.getPropertyValue(&quot;IsMailVerified&quot;)
//def dateOfBirth = testRunner.testCase.getPropertyValue(&quot;dateOfBirth&quot;)

def emailAddress =UUID.randomUUID().toString().substring(0,7) + &quot;@greendotcorp.com&quot;
def firstPhoneNumber = RandomStringUtils.randomNumeric(10)
def firstPhoneType = &quot;Mobile&quot;
def secondPhoneNumber = &quot;&quot;
def secondPhoneType = &quot;&quot;

//def isDefaultPhone = testRunner.testCase.getPropertyValue(&quot;IsPhoneNumberDefault&quot;)
//def isPhoneVerified = testRunner.testCase.getPropertyValue(&quot;IsPhoneNumberVerified&quot;)



JSONObject finalObj = new JSONObject()
//Boolean isFirstNameSet = ( firstName != null &amp;&amp; firstName != &quot;&quot;)
//Boolean isLastNameSet = ( lastName != null &amp;&amp; lastName != &quot;&quot;) 
//Boolean isMiddleNameSet = ( middleName != null &amp;&amp; middleName != &quot;&quot;)
Boolean isAddressLine1Set = (addressline1 != null &amp;&amp; addressline1 != &quot;&quot;)
Boolean isAddressLine2Set = (addressline2 != null &amp;&amp; addressline2 != &quot;&quot;)
Boolean isCitySet = (city != null &amp;&amp; city != &quot;&quot;)
Boolean isStateSet = (state != null &amp;&amp; state != &quot;&quot;)
Boolean isZipCodeSet = (zipCode != null &amp;&amp; zipCode != &quot;&quot;) 
Boolean isAddressTypeSet = (addressType != null &amp;&amp; addressType != &quot;&quot;)
Boolean isAddressVerifiedSet =(isAddressVerified != null &amp;&amp; isAddressVerified != &quot;&quot;)
Boolean isAddressDefaultSet =  (IsAddressDefault != null &amp;&amp; IsAddressDefault != &quot;&quot;)



JSONObject ProfileData = new JSONObject()
JSONArray addresses = new JSONArray()
JSONObject address = new JSONObject()
JSONObject peerTransferAcceptPreferenceSet = new JSONObject()


if (isAddressLine2Set ) {
	address.put(&quot;AddressLine2&quot;,addressline2)
}

if ( isAddressLine1Set || isCitySet || isStateSet || isZipCodeSet || isAddressTypeSet || isAddressVerifiedSet || isAddressDefaultSet ) {
		address.put(&quot;AddressLine1&quot;,addressline1)
		address.put(&quot;City&quot;,city)
		address.put(&quot;State&quot;,state)
		address.put(&quot;ZipCode&quot;, zipCode)
		address.put(&quot;Type&quot;, addressType)
		address.put(&quot;IsVerified&quot;, Boolean.parseBoolean(isAddressVerified))
		address.put(&quot;IsDefault&quot;, Boolean.parseBoolean(IsAddressDefault))
	addresses.add(address)
}
if ( isAddressLine2Set || isAddressLine1Set || isCitySet || isStateSet || isZipCodeSet || isAddressTypeSet || isAddressVerifiedSet || isAddressDefaultSet ){
	ProfileData.put(&quot;Addresses&quot;,addresses)
	finalObj.put(&quot;ProfileData&quot;,ProfileData)
}


Boolean IsEmailAddressSet = (emailAddress != null &amp;&amp; emailAddress !=&quot;&quot;)
//Boolean IsEmailVerified = (isEmailVerified != null &amp;&amp; isEmailVerified !=&quot;&quot;)

if ( IsEmailAddressSet ) {
	JSONObject emailData = new JSONObject()
	emailData.put (&quot;emailAddress&quot;,emailAddress)
	finalObj.put(&quot;email&quot;,emailData)
}


//
Boolean IsFirstPhoneNumberSet = ( firstPhoneNumber != null &amp;&amp; firstPhoneNumber !=&quot;&quot;)
Boolean IsFirstPhoneTypeSet= ( firstPhoneType != null &amp;&amp; firstPhoneType !=&quot;&quot;)
//Boolean IsPhoneDefaultSet = (isDefaultPhone != null &amp;&amp; isDefaultPhone !=&quot;&quot;)
//Boolean IsPhoneVerifiedSet = (isPhoneVerified != null &amp;&amp; isPhoneVerified !=&quot;&quot;)
Boolean IsSecondPhoneNumberSet = ( secondPhoneNumber != null &amp;&amp; secondPhoneNumber !=&quot;&quot;)
Boolean IsSecondPhoneTypeSet= ( secondPhoneType != null &amp;&amp; secondPhoneType !=&quot;&quot;)
JSONArray phones = new JSONArray()
if ( IsFirstPhoneNumberSet || IsFirstPhoneTypeSet   ){ //|| IsPhoneDefaultSet || IsPhoneVerifiedSet
	JSONObject phone = new JSONObject()
	phone.put (&quot;number&quot;,firstPhoneNumber)
	phone.put(&quot;type&quot;,firstPhoneType)
	phone.put(&quot;isDefault&quot;, false)
	phone.put(&quot;IsVerified&quot;, false)

	phones.add(phone)
}
if ( IsSecondPhoneNumberSet || IsSecondPhoneTypeSet   ){ //|| IsPhoneDefaultSet || IsPhoneVerifiedSet
	JSONObject phone = new JSONObject()
	phone.put (&quot;number&quot;,secondPhoneNumber)
	phone.put(&quot;type&quot;,secondPhoneType)
	phone.put(&quot;isDefault&quot;, false)
	phone.put(&quot;IsVerified&quot;, false)
	phones.add(phone)
}
if ( IsFirstPhoneNumberSet || IsSecondPhoneNumberSet ){
	finalObj.put(&quot;phoneNumbers&quot;,phones)	
}


//log.info (finalObj.toJSONString())
//log.info (StringEscapeUtils.escapeJava(finalObj.toJSONString()))
vars.put(&quot;Version&quot;, &quot;EC_v1&quot;)
vars.put(&quot;profiledata&quot;, StringEscapeUtils.escapeJava(finalObj.toJSONString()))
def RequestId = java.util.UUID.randomUUID()
vars.put(&quot;RequestID&quot;, RequestId.toString())

}catch (Throwable ex)
{
	log.error(&quot;Error in Generate address data&quot;, ex);
	throw ex;
}
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token;token_type;expires_in;scope</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token;$.token_type;$.expires_in;$.scope</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AddressData Encryption" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
 &quot;requestHeader&quot;: {&#xd;
 &quot;requestId&quot;: &quot;${RequestID}&quot;&#xd;
 },&#xd;
 &quot;version&quot;: &quot;${Version}&quot;,&#xd;
 &quot;salt&quot;: &quot;${RequestID}&quot;,&#xd;
 &quot;programCode&quot;: &quot;${ProgramCode}&quot;,&#xd;
 &quot;data&quot;: &quot;${profiledata}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CRYPTO_API}/encrypt</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                    <stringProp name="Header.value">${BOS-CRYPTO-TPK}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Data Fields From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">encryptedData;ephemeralPublicKey;publicKeyHash;version;requestId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedData.data;$.encryptedData.ephemeralPublicKey;$.encryptedData.publicKeyHash;$.encryptedData.version;$.responseHeader.responseId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import java.util.UUID;   

try{
	String encryptedData = &quot;${encryptedData}&quot;;
	String ephemeralPublicKey = &quot;${ephemeralPublicKey}&quot;;
	String publicKeyHash = &quot;${publicKeyHash}&quot;;
	String version = &quot;${version}&quot;;
	String accountIdentifier = &quot;${accountIdentifier}&quot;;
	String userIdentifier = &quot;${userIdentifier}&quot;;
	String accessToken = &quot;${access_token}&quot;;
	String requestId = &quot;${requestId}&quot;;


	//FileWriter fstream = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;, true);
	FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;)  + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;, true);
	
	fstream.write(accessToken + &quot;,&quot; + encryptedData + &quot;,&quot; + ephemeralPublicKey + &quot;,&quot; + publicKeyHash + &quot;,&quot; 
			+ version + &quot;,&quot; + accountIdentifier + &quot;,&quot; + userIdentifier + &quot;,&quot; + requestId + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetACHTransfers" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="version" elementType="Argument">
                  <stringProp name="Argument.name">version</stringProp>
                  <stringProp name="Argument.value">EC_v1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">AccountIdentifier,StartDate,EndDate</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{

String accessToken = &quot;${access_token}&quot;;
String accountIdentifier = vars.get (&quot;AccountIdentifier&quot;);	//&quot;${AccountIdentifier}&quot;;
String startdate = &quot;${StartDate}&quot;;
String enddate = &quot;${EndDate}&quot;;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + accountIdentifier + &quot;,&quot; + startdate + &quot;,&quot; + enddate + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetMRDCTransfers" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="version" elementType="Argument">
                  <stringProp name="Argument.name">version</stringProp>
                  <stringProp name="Argument.value">EC_v1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">AccountIdentifier,TransferIdentifier,StartDate,EndDate</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{

String transferIdentifier = &quot;${TransferIdentifier}&quot;;
String accessToken = &quot;${access_token}&quot;;
String accountIdentifier = vars.get (&quot;AccountIdentifier&quot;);	//&quot;${AccountIdentifier}&quot;;
String startdate = &quot;${StartDate}&quot;;
String enddate = &quot;${EndDate}&quot;;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + accountIdentifier + &quot;,&quot; + transferIdentifier + &quot;,&quot; + startdate + &quot;,&quot; + enddate + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetMRDCCheck" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="version" elementType="Argument">
                  <stringProp name="Argument.name">version</stringProp>
                  <stringProp name="Argument.value">EC_v1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">AccountIdentifier,TransferIdentifier</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{

String transferIdentifier = &quot;${TransferIdentifier}&quot;;
String accessToken = &quot;${access_token}&quot;;
String accountIdentifier = vars.get (&quot;AccountIdentifier&quot;);	//&quot;${AccountIdentifier}&quot;;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + accountIdentifier + &quot;,&quot; + transferIdentifier + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="UpdateMRDCCheck" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="version" elementType="Argument">
                  <stringProp name="Argument.name">version</stringProp>
                  <stringProp name="Argument.value">EC_v1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">AccountIdentifier,TransferIdentifier</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{

String transferIdentifier = &quot;${TransferIdentifier}&quot;;
String accessToken = &quot;${access_token}&quot;;
String accountIdentifier = vars.get (&quot;AccountIdentifier&quot;);	//&quot;${AccountIdentifier}&quot;;
String transferAuthorizationType= &quot;accept&quot;;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + accountIdentifier + &quot;,&quot; + transferIdentifier + &quot;,&quot; + transferAuthorizationType + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetP2POnhold" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">accountIdentifier</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{
String accountIdentifier = &quot;${accountIdentifier}&quot;;
String accessToken = &quot;${access_token}&quot;;


FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + accountIdentifier + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GBR_GetAllExternalCards" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="version" elementType="Argument">
                  <stringProp name="Argument.name">version</stringProp>
                  <stringProp name="Argument.value">EC_v1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">AccountIdentifier</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{

String accessToken = &quot;${access_token}&quot;;
String accountIdentifier = vars.get (&quot;AccountIdentifier&quot;);	//&quot;${AccountIdentifier}&quot;;



FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + accountIdentifier + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GBR_DelExternalCard" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="version" elementType="Argument">
                  <stringProp name="Argument.name">version</stringProp>
                  <stringProp name="Argument.value">EC_v1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">AccountIdentifier,AccountExternalPaymentIdentifier</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{

String accessToken = &quot;${access_token}&quot;;
String accountIdentifier = vars.get (&quot;AccountIdentifier&quot;);	//&quot;${AccountIdentifier}&quot;;
String accountExternalPaymentIdentifier = vars.get(&quot;AccountExternalPaymentIdentifier&quot;);



FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + accountIdentifier + &quot;,&quot; + accountExternalPaymentIdentifier + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Kyc2" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">accountIdentifier,userIdentifier,last4SSN</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="kyc2Data Encryption" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
 &quot;requestHeader&quot;: {&#xd;
 &quot;requestId&quot;: &quot;${userIdentifier}&quot;&#xd;
 },&#xd;
 &quot;version&quot;: &quot;EC_v1&quot;,&#xd;
 &quot;salt&quot;: &quot;${userIdentifier}&quot;,&#xd;
 &quot;programCode&quot;: &quot;${ProgramCode}&quot;,&#xd;
 &quot;data&quot;: &quot;{\&quot;ssn\&quot;:\&quot;10${__Random(100,999,)}${last4SSN}\&quot;}&quot;&#xd;
&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CRYPTO_API}/encrypt</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                    <stringProp name="Header.value">${BOS-CRYPTO-TPK}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Data Fields From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">encryptedData;ephemeralPublicKey;publicKeyHash;version</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedData.data;$.encryptedData.ephemeralPublicKey;$.encryptedData.publicKeyHash;$.encryptedData.version</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token;token_type;expires_in;scope</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token;$.token_type;$.expires_in;$.scope</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{
String accountIdentifier = &quot;${accountIdentifier}&quot;;
String userIdentifier = &quot;${userIdentifier}&quot;;
String accessToken = &quot;${access_token}&quot;;
String encryptedData = &quot;${encryptedData}&quot;;
String ephemeralPublicKey = &quot;${ephemeralPublicKey}&quot;;
String publicKeyHash = &quot;${publicKeyHash}&quot;;
String version = &quot;${version}&quot;;


FileWriter fstream = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + encryptedData + &quot;,&quot; + ephemeralPublicKey + &quot;,&quot; + publicKeyHash + &quot;,&quot; + version +&quot;,&quot; + accountIdentifier + &quot;,&quot; + userIdentifier + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="P2POnhold" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">accountIdentifier,transferIdentifier</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{
String accountIdentifier = &quot;${accountIdentifier}&quot;;
String isSource = &quot;true&quot;;
String transferIdentifier = &quot;${transferIdentifier}&quot;;
String transferAuthorizationType = &quot;cancel&quot;;//when the type is execute, only for target account
String accessToken = &quot;${access_token}&quot;;


FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + accountIdentifier + &quot;,&quot; + transferAuthorizationType + &quot;,&quot; + isSource + &quot;,&quot; + transferIdentifier + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CloseAccount" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="version" elementType="Argument">
                  <stringProp name="Argument.name">version</stringProp>
                  <stringProp name="Argument.value">EC_v1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">AccountIdentifier</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{

String accessToken = &quot;${access_token}&quot;;
String accountIdentifier = vars.get (&quot;AccountIdentifier&quot;);	//&quot;${AccountIdentifier}&quot;;


FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + accountIdentifier + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PutAccountStatus" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="version" elementType="Argument">
                  <stringProp name="Argument.name">version</stringProp>
                  <stringProp name="Argument.value">EC_v1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">AccountIdentifier</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{

String accessToken = &quot;${access_token}&quot;;
String accountIdentifier = vars.get (&quot;AccountIdentifier&quot;);	//&quot;${AccountIdentifier}&quot;;


FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + accountIdentifier + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetAccount-OD" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="version" elementType="Argument">
                  <stringProp name="Argument.name">version</stringProp>
                  <stringProp name="Argument.value">EC_v1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">AccountIdentifier</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{

String accessToken = &quot;${access_token}&quot;;
String accountIdentifier = vars.get (&quot;AccountIdentifier&quot;);	//&quot;${AccountIdentifier}&quot;;


FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + accountIdentifier + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetLinkedAccount" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="version" elementType="Argument">
                  <stringProp name="Argument.name">version</stringProp>
                  <stringProp name="Argument.value">EC_v1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">AccountIdentifier</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{

String accessToken = &quot;${access_token}&quot;;
String accountIdentifier = vars.get (&quot;AccountIdentifier&quot;);	//&quot;${AccountIdentifier}&quot;;


FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + accountIdentifier + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetMRDCFulfillment-SingleTransfer" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="version" elementType="Argument">
                  <stringProp name="Argument.name">version</stringProp>
                  <stringProp name="Argument.value">EC_v1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">AccountIdentifier,FundTransferToken,TransactionDate,CreateDate</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{

String accessToken = &quot;${access_token}&quot;;
String accountIdentifier = vars.get (&quot;AccountIdentifier&quot;);	//&quot;${AccountIdentifier}&quot;;
String fundTransferToken = vars.get (&quot;FundTransferToken&quot;);	
String startDate = vars.get (&quot;TransactionDate&quot;);	
startDate = startDate.split(&quot; &quot;)[0];
String endDate = startDate;

//AccountIdentifier,FundTransferToken,TransactionDate,CreateDate

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + accountIdentifier + &quot;,&quot; + fundTransferToken + &quot;,&quot; + startDate  + &quot;,&quot; + endDate + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetMRDCFulfillment-Paging" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="OUTPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="INPUT_FILE" elementType="Argument">
                  <stringProp name="Argument.name">INPUT_FILE</stringProp>
                  <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="version" elementType="Argument">
                  <stringProp name="Argument.name">version</stringProp>
                  <stringProp name="Argument.value">EC_v1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">AccountIdentifier,TransStartDate,TransEndDate</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{
//AccountIdentifier,StartDate,EndDate
String accessToken = &quot;${access_token}&quot;;
String accountIdentifier = vars.get (&quot;AccountIdentifier&quot;);	//&quot;${AccountIdentifier}&quot;;
String startDate = vars.get (&quot;TransStartDate&quot;);	
String endDate = vars.get (&quot;TransEndDate&quot;);	
startDate = startDate.split(&quot; &quot;)[0];
endDate = endDate.split(&quot; &quot;)[0];

//AccountIdentifier,FundTransferToken,TransactionDate,CreateDate
log.info(&quot;Startdate:&quot; + startDate);
log.info(&quot;EndDate:&quot; + endDate);

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + accountIdentifier + &quot;,&quot; + startDate  + &quot;,&quot; + endDate + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SplitFiles and CopyToSharedFolder" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller_API" enabled="true">
          <stringProp name="SwitchController.value">${CURRENT_CONTROLLER}</stringProp>
        </SwitchController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Tailfin_GetAccount_UpdateTerms_GetUsers" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;getaccountdata.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="NonTailfin_GetAccount_UpdateTerms_GetUsers" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;getaccountdata.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Int1099Form_GetAccount_UpdateTerms_GetUsers" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;getaccountdata.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SearchAccount" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;searchaccountdata.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetStatements" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;getestatementdata.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="UpdateAddress" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;updateAddressdata.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="UpdateUser" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;updateUserdata.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetACHTransfers" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;getachdata.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetMRDCTransfers" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;getmrdctransferdata.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetMRDCCheck" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;getcheckdata.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="UpdateMRDCCheck" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;updatecheckdata.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetP2POnhold" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;getp2ponholddata.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GBR_GetAllExternalCards" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;getexternalcardsdata.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GBR_DelExternalCard" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;delexternalcarddata.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Kyc2" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;Kyc2data.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="P2POnhold" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;p2ponholddata.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CloseAccount" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;closeaccountdata.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PutAccountStatus" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;putaccountdata.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetAccount-OD" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;getaccountdata.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetLinkedAccount" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;getLinkedaccountdata.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetMRDCFulfillment-SingleTransfer" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;getmrdcFulfillmentdata.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetMRDCFulfillment-Paging" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;getmrdcFulfillmentdataPaging.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Delete source file" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">DEL /F /Q</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${RESULT_FILE_NAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}</stringProp>
        </SystemSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Combine Multi-Thread files into one" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">copy /b</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\multi-thread\multi-thread-out*</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\multi-thread\\${DATA_FILE_NAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\multi-thread</stringProp>
        </SystemSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Data Splitter Execution" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\GDQA_PerfDataSplitter\GDQA_PerfDataSplitter.exe</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\multi-thread\\${DATA_FILE_NAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\SplitFiles</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${DATA_FILE_NAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree/>
        <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller_Copy" enabled="true">
          <stringProp name="SwitchController.value">${LOOPCOPY_SWITCHVAL}</stringProp>
        </SwitchController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="LoopCopy" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">3</stringProp>
          </LoopController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get current index" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

try{
	log.info(&quot;Current count:&quot; + String.valueOf(${__jm__LoopCopy__idx}+1));
	vars.put(&quot;CurrentIndex&quot;, String.valueOf(${__jm__LoopCopy__idx}+1));
	vars.put(&quot;CurrentRemoteServerIndex&quot;, String.valueOf(${__jm__LoopCopy__idx}+2));
}
catch (Throwable ex)
{
	log.error(&quot;Error in Get-current-index script&quot;, ex);
	throw ex;
}</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder-1" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd.exe</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">copy /b /y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">.\\${CurrentIndex}\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">\\\\g1pfbosload0${CurrentRemoteServerIndex}\\data\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\SplitFiles</stringProp>
            </SystemSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Copy-AWS" enabled="true"/>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder-10.62.11.121" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd.exe</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">copy /b /y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">.\\1\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">\\\\10.62.11.121\\data\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\SplitFiles</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder-10.62.9.110" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd.exe</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">copy /b /y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">.\\2\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">\\\\10.62.9.110\\data\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\SplitFiles</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder-10.62.10.96" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd.exe</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">copy /b /y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">.\\3\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">\\\\10.62.10.96\\data\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\SplitFiles</stringProp>
            </SystemSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
