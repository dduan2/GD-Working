<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Data Generation- for virtual accounts" enabled="true">
      <stringProp name="TestPlan.comments">Please change below variable value by your current test needs:
PROPFILE_NAME	${__P(PROPFILE_NAME,stash.properties)}</stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="PROPFILE" elementType="Argument">
            <stringProp name="Argument.name">PROPFILE</stringProp>
            <stringProp name="Argument.value">${__P(PROPFILE,C:\QA\Performance\Jmeter\GBOS\PropertyFiles\spark.properties)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WORKSPACE_PATH" elementType="Argument">
            <stringProp name="Argument.name">WORKSPACE_PATH</stringProp>
            <stringProp name="Argument.value">${__P(WORKSPACE_PATH,C:\QA\Performance\Jmeter\GBOS\DataGenerator)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NUMOFTHREADS_GEN" elementType="Argument">
            <stringProp name="Argument.name">NUMOFTHREADS_GEN</stringProp>
            <stringProp name="Argument.value">${__P(NUMOFTHREADS_GEN,30)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMUP_PERIOD_GEN" elementType="Argument">
            <stringProp name="Argument.name">RAMUP_PERIOD_GEN</stringProp>
            <stringProp name="Argument.value">${__P(RAMUP_PERIOD,5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOOP_COUNT_GEN" elementType="Argument">
            <stringProp name="Argument.name">LOOP_COUNT_GEN</stringProp>
            <stringProp name="Argument.value">${__P(LOOP_COUNT_GEN, 10000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NUMBER_OF_ACCOUNTS" elementType="Argument">
            <stringProp name="Argument.name">NUMBER_OF_ACCOUNTS</stringProp>
            <stringProp name="Argument.value">${__P(NUMBER_OF_ACCOUNTS,25000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DEFAULT_ACCESS_TOKEN" elementType="Argument">
            <stringProp name="Argument.name">DEFAULT_ACCESS_TOKEN</stringProp>
            <stringProp name="Argument.value">${__P(DEFAULT_ACCESS_TOKEN,+S0jAi1MqvvNqqA4H6ybKQ==)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="QATOOL_ENDPOINT" elementType="Argument">
            <stringProp name="Argument.name">QATOOL_ENDPOINT</stringProp>
            <stringProp name="Argument.value">${__P(QATOOL_ENDPOINT, http://g1pfbosqatools01:8082/GBOSQAToolService.svc/)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SIM_ENDPOINT" elementType="Argument">
            <stringProp name="Argument.name">SIM_ENDPOINT</stringProp>
            <stringProp name="Argument.value">${__P(SIM_ENDPOINT, https://gdqatools/GDQATools/GDQA_IPSMQSimulator_Bos/IPSMQSimulatorService.svc)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IsAWS" elementType="Argument">
            <stringProp name="Argument.name">IsAWS</stringProp>
            <stringProp name="Argument.value">${__P(IsAWS, true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="START_DATE" elementType="Argument">
            <stringProp name="Argument.name">START_DATE</stringProp>
            <stringProp name="Argument.value">${__P(START_DATE, 2020-07-19 00:00:00.410)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="END_DATE" elementType="Argument">
            <stringProp name="Argument.name">END_DATE</stringProp>
            <stringProp name="Argument.value">${__P(END_DATE, 2020-12-18 00:32:00.000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GSS_DB" elementType="Argument">
            <stringProp name="Argument.name">GSS_DB</stringProp>
            <stringProp name="Argument.value">${__P(GSS_DB, G1PFGSSDB01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BOS_CAS_DB" elementType="Argument">
            <stringProp name="Argument.name">BOS_CAS_DB</stringProp>
            <stringProp name="Argument.value">${__P(BOS_CAS_DB,G1PFBOSCRMDB01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOOPCOPY_SWITCHVAL" elementType="Argument">
            <stringProp name="Argument.name">LOOPCOPY_SWITCHVAL</stringProp>
            <stringProp name="Argument.value">${__P(LOOPCOPY_SWITCHVAL,Copy-AWS)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CurrentController" elementType="Argument">
            <stringProp name="Argument.name">CurrentController</stringProp>
            <stringProp name="Argument.value">${__P(CurrentController,Disbursemen-Ach)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AccountNumber" elementType="Argument">
            <stringProp name="Argument.name">AccountNumber</stringProp>
            <stringProp name="Argument.value">${__P(AccountNumber, 5102589781711369)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">
        <stringProp name="propFilePath">${PROPFILE}</stringProp>
      </com.tag.jmeter.ext.config.PropertyReader>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="SetVariableValuesPerCurrent Env" enabled="true">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters">${IsAWS}</stringProp>
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="script">String isAWS = &quot;${IsAWS}&quot;;


if(isAWS == &quot;false&quot;)
{
	//props.put(&quot;BOS_DB&quot;, &quot;G1PFBOSDB01&quot;);	
	vars.put(&quot;CRYPTO_API&quot;, &quot;https://boscryt/Crypto/V1&quot; );
	vars.put(&quot;OAUTH_API&quot;, &quot;https://bospart/baas/v1&quot; );
	vars.put(&quot;TOKENIZER_API&quot;, &quot;https://bostk/Tokenizer/v1/api&quot; );
	vars.put(&quot;IbmMQType&quot;, &quot;OnPrem&quot;);
}else{
	//Will be replaced by AWS_PRF endpoints later
	//props.put(&quot;BOS_DB&quot;, &quot;pibosdbag.awsnp.gdotawsnp.com&quot; );
	/*
	 * Read properties from Jmeter Test Plan lever User defined variables*/
	 /*
	vars.put(&quot;CRYPTO_API&quot;, &quot;https://&quot; + vars.get(&quot;CRYP_Host&quot;) + &quot;/Crypto/V1&quot; );
	vars.put(&quot;OAUTH_API&quot;, &quot;https://&quot; + vars.get(&quot;PRT_Host&quot;) + &quot;/baas/v1&quot; );
	vars.put(&quot;TOKENIZER_API&quot;, &quot;https://&quot; + vars.get(&quot;TKN_Host&quot;) + &quot;/Tokenizer/v1/api&quot; );
	*/

	//Read properties from .properties file
	vars.put(&quot;CRYPTO_API&quot;, &quot;https://${__P(CRYP_Host)}/Crypto/V1&quot; );
	vars.put(&quot;OAUTH_API&quot;, &quot;https://${__P(PRT_Host)}/baas/v1&quot; );
	vars.put(&quot;TOKENIZER_API&quot;, &quot;https://${__P(TKN_Host)}/Tokenizer/v1/api&quot; );
	vars.put(&quot;IbmMQType&quot;, &quot;AWS&quot;);
	vars.put(&quot;ProgramCode&quot;, &quot;${__P(PROGRAMCODE)}&quot; );
	vars.put(&quot;ProductCode&quot;, &quot;${__P(PRODUCT_CODE)}&quot; );
	vars.put(&quot;AUTH&quot;, &quot;${__P(AUTH)}&quot; );
	vars.put(&quot;BOS-CRYPTO-TPK&quot;, &quot;${__P(BOS-CRYPTO-TPK)}&quot; );
	//vars.put(&quot;BOS_DB&quot;, &quot;${__P(BOS_DB)}&quot; );
}

//Read properties from Jmeter Test Plan lever User defined variables
vars.put(&quot;QATOOL_API&quot;, vars.get(&quot;QATOOL_ENDPOINT&quot;));
vars.put(&quot;SimulatorService&quot;, vars.get(&quot;SIM_ENDPOINT&quot;));
vars.put(&quot;QAToolsServer&quot;, &quot;gdqatools&quot; );
vars.put(&quot;StartDate&quot;, vars.get(&quot;START_DATE&quot;));
vars.put(&quot;EndDate&quot;, vars.get(&quot;END_DATE&quot;));
vars.put(&quot;RequestPhysicalPlasticFlag&quot;, &quot;true&quot; );</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="GBOS Variable" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="QATOOL_API" elementType="Argument">
            <stringProp name="Argument.name">QATOOL_API</stringProp>
            <stringProp name="Argument.value">${QATOOL_ENDPOINT}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProgramCode" elementType="Argument">
            <stringProp name="Argument.name">ProgramCode</stringProp>
            <stringProp name="Argument.value">${PROGRAMCODE}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProductCode" elementType="Argument">
            <stringProp name="Argument.name">ProductCode</stringProp>
            <stringProp name="Argument.value">${PRODUCT_CODE}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SimulatorService" elementType="Argument">
            <stringProp name="Argument.name">SimulatorService</stringProp>
            <stringProp name="Argument.value">${SIM_ENDPOINT}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="QAToolsServer" elementType="Argument">
            <stringProp name="Argument.name">QAToolsServer</stringProp>
            <stringProp name="Argument.value">gdqatools</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="StartDate" elementType="Argument">
            <stringProp name="Argument.name">StartDate</stringProp>
            <stringProp name="Argument.value">${START_DATE}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EndDate" elementType="Argument">
            <stringProp name="Argument.name">EndDate</stringProp>
            <stringProp name="Argument.value">${END_DATE}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RequestPhysicalPlasticFlag" elementType="Argument">
            <stringProp name="Argument.name">RequestPhysicalPlasticFlag</stringProp>
            <stringProp name="Argument.value">true</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="BOS GBOS DB Connection" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">GBOS</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${__P(BOS_DB)}:1433;databaseName=GBOS</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">G33Nff4%$^</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">qa_automation</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="BOS CAS DB Connection" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">CAS</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${BOS_CAS_DB}:1433;databaseName=CAS</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">G33Nff4%$^</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">qa_automation</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="GSS DB Connection-Retail" enabled="true">
        <stringProp name="dataSource">Retail</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${GSS_DB}:1433;databaseName=Retail;</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">qa_automation</stringProp>
        <stringProp name="password">G33Nff4%$^</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="GSS DB Connection-Billpay" enabled="true">
        <stringProp name="dataSource">BillPay</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${GSS_DB}:1433;databaseName=BillPay;</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">qa_automation</stringProp>
        <stringProp name="password">G33Nff4%$^</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Debug Only" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Cleanup existing files-All" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Delete existing file-1" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

log.info(FileServer.getFileServer().getBaseDir());

try{
	List files = FileUtils.listFiles(new File(vars.get(&quot;WORKSPACE_PATH&quot;) + File.separator + &quot;multi-thread&quot;), new String[]{&quot;csv&quot;}, true);
	for (File file : files) {
		file.delete();
	}

	List files = FileUtils.listFiles(new File(vars.get(&quot;WORKSPACE_PATH&quot;) + File.separator + &quot;SplitFiles&quot;), new String[]{&quot;csv&quot;}, true);
	for (File file : files) {
		file.delete();
	}
}
catch (Throwable ex)
{
	log.error(&quot;Error in Cleanup existing files&quot;, ex);
	throw ex;
}
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Delete existing file" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

log.info(FileServer.getFileServer().getBaseDir());

try{
	List files = FileUtils.listFiles(new File(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator + &quot;multi-thread&quot;), new String[]{&quot;csv&quot;}, true);
	for (File file : files) {
		file.delete();
	}
}
catch (Throwable ex)
{
	log.error(&quot;Error in Cleanup existing files&quot;, ex);
	throw ex;
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Get AccountId from DB - Disbursemen" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="RESULT_FILE_NAME" elementType="Argument">
              <stringProp name="Argument.name">RESULT_FILE_NAME</stringProp>
              <stringProp name="Argument.value">${__P(ResultFileName, account-from-db.csv)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Delete existing file" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

log.info(vars.get (&quot;WORKSPACE_PATH&quot;));

try{
	File file = new File(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;);

	List files = FileUtils.listFiles(new File(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator + &quot;multi-thread&quot;), new String[]{&quot;csv&quot;}, true);
	for (File file : files) {
	file.delete();
	}

	if (file.exists())
	{
		//FileServer.getFileServer().closeFile(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME_P}&quot;);
		//FileServer.getFileServer().closeFile(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;);
		FileServer.getFileServer().closeFiles();
	
		//FileUtils.deleteQuietly(file);
	 	//FileDeleteStrategy.FORCE.delete(file);
	 	System.gc();
	 	file.setWritable(true);
	 	
	 	if (!file.delete()) 
       	{ 
                log.error(&quot;Couldn&apos;t delete file&quot;); 
        	} 
        	else 
        	{ 
                log.info(&quot;Successfully deleted file: &quot; + file.getName()); 
        	}
	}
} catch (FileNotFoundException e) {
    log.error(&quot;FileNotFoundException in Delete csv files&quot;, e);
    //e.printStackTrace();
} catch (IOException e) {
    log.error(&quot;IOException in Delete csv files&quot;, e);
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get PartnerAccountData from db" enabled="false">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select top 1 a.accountIdentifier from Account a
inner join Product p
on a.Productkey=p.productkey
where p.Productcode=&apos;59000&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">accountIdentifier</stringProp>
          <stringProp name="resultVariable">SourceAccountIdentifierList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get UserAccountData from db" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select top ${NUMBER_OF_ACCOUNTS} a.AccountIdentifier
from Account a
inner join Product p (nolock) on (p.ProductKey = a.ProductKey)
inner join Program pg (nolock) on (pg.ProgramKey = p.ProgramKey)
inner join AccountStatus s (nolock) on (a.AccountStatusKey = s.AccountStatusKey)
inner join AccountHolder h (nolock) on (h.AccountKey = a.AccountKey)
--inner join AccountBalance ab (nolock) on (ab.AccountKey = a.AccountKey)
--inner join Currency cur (nolock) on (cur.CurrencyKey = ab.CurrencyKey)
--inner join ConsumerProfile cp (nolock) on (cp.ConsumerProfileKey = h.ConsumerProfileKey)
--inner join ConsumerProfileIdentity cpi (nolock) on cpi.ConsumerProfileKey=cp.ConsumerProfileKey
--inner join ConsumerProfilePhone cpp (nolock) on cpp.ConsumerProfileKey = cp.ConsumerProfileKey
--inner join AccountHolder_PaymentIdentifier ap (nolock) on (ap.AccountHolderKey = h.AccountHolderKey)
where p.productCode=&apos;${ProductCode}&apos;
--and cpi.IdentityTypeKey=1
and a.CreateDate between &apos;${StartDate}&apos; and &apos;${EndDate}&apos;
order by a.CreateDate desc</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">AccountIdentifier</stringProp>
          <stringProp name="resultVariable">accountIdentifierList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;accountIdentifierList&quot;))
{
	fstream.write(row.get(&quot;AccountIdentifier&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Multi-Thread Data Generator - Disbursement" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${NUMOFTHREADS_GEN}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMUP_PERIOD_GEN}</stringProp>
        <longProp name="ThreadGroup.start_time">1498168968000</longProp>
        <longProp name="ThreadGroup.end_time">1498168968000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OUTPUT_FILE" elementType="Argument">
              <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
              <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="INPUT_FILE" elementType="Argument">
              <stringProp name="Argument.name">INPUT_FILE</stringProp>
              <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv </stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="INPUT_FILE_BANKCARD" elementType="Argument">
              <stringProp name="Argument.name">INPUT_FILE_BANKCARD</stringProp>
              <stringProp name="Argument.value">${WORKSPACE_PATH}\EnrollAccount-Tailfin.csv</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="INPUT_FILE_ACH" elementType="Argument">
              <stringProp name="Argument.name">INPUT_FILE_ACH</stringProp>
              <stringProp name="Argument.value">${WORKSPACE_PATH}\BankInfo-Tailfin.csv</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
          <stringProp name="SwitchController.value">${CurrentController}</stringProp>
        </SwitchController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Disbursemen-CashLink" enabled="true"/>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config-Account" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">accountIdentifier</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate enrollment data" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.lang.RandomStringUtils;

try{
def firstName = RandomStringUtils.randomAlphabetic(8)
def lastName = RandomStringUtils.randomAlphabetic(8)
def sSNSuffix = &quot;&quot;
def ssn = &quot;10&quot; + RandomStringUtils.randomNumeric(7)
def address1 = &quot;1&quot; + RandomStringUtils.randomNumeric(5) + &apos; &apos; + &apos; Foothill Blvd&apos;
def address2 = &apos;SUITE &apos; + RandomStringUtils.randomNumeric(3)
def zipCode = &quot;9&quot; + RandomStringUtils.randomNumeric(4)
def email = RandomStringUtils.randomAlphabetic(15)+&apos;@greendotcorp.com&apos;
TimeZone.setDefault(TimeZone.getTimeZone(&apos;UTC&apos;))
def now = new Date()
now = now.format(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;&quot;)
//now = now.format(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss&apos;Z&apos;&quot;)

def RequestId = java.util.UUID.randomUUID()

vars.put(&quot;TermsAcceptanceDateTime&quot;, now)
vars.put(&quot;RequestId&quot;, RequestId.toString())


// Personal Data
vars.put(&quot;Title&quot;, &quot;Mr&quot;)
vars.put(&quot;FirstName&quot;, firstName)
vars.put(&quot;MiddleInitials&quot;, &quot;K&quot;)
vars.put(&quot;LastName&quot;, lastName)
vars.put(&quot;AddressLine1&quot;, address1)
vars.put(&quot;AddressLine2&quot;, address2)
vars.put(&quot;City&quot;, &quot;Pasadena&quot;)
vars.put(&quot;State&quot;, &quot;CA&quot;)
vars.put(&quot;ZipCode&quot;, zipCode)
vars.put(&quot;Type&quot;, &quot;home&quot;)

//end of Personal Data
//Personal Data-Part2

vars.put(&quot;SSN&quot;, ssn)
vars.put(&quot;SSNSuffix&quot;, sSNSuffix)
vars.put(&quot;DateOfBirth&quot;, &quot;1987-02-02&quot;)
vars.put(&quot;Email&quot;, email)

def phoneNum = &apos;6&apos; + RandomStringUtils.randomNumeric(9);
vars.put(&quot;PhoneNumber&quot;, phoneNum) //&quot;6505268188&quot;

vars.put(&quot;PhoneType&quot;, &quot;Mobile&quot;)

//End of Personal Data 2
//Encrypted Data part
vars.put(&quot;encryptedUserDataVersion&quot;, RequestId.toString())
vars.put(&quot;EphemeralPublicKey&quot;, RequestId.toString())
vars.put(&quot;PublicKeyHash&quot;, RequestId.toString())
vars.put(&quot;salt&quot;, RequestId.toString())
vars.put(&quot;Version&quot;, &quot;EC_v1&quot;)
vars.put(&quot;ProgramName&quot;, &quot;${ProgramCode}&quot;)


// Terms acceptance
vars.put(&quot;TermsIdentifier&quot;, RequestId.toString())
vars.put(&quot;TermsAcceptanceDateTime&quot;, now)


// Account Data
vars.put(&quot;ProductCode&quot;, &quot;${ProductCode}&quot;)
vars.put(&quot;AccountType&quot;, &quot;Savings&quot;)
vars.put(&quot;Currency&quot;, &quot;USD&quot;)
vars.put(&quot;PurseIdentifier&quot;, RequestId.toString())
vars.put(&quot;PurseType&quot;, &quot;Primary&quot;)
vars.put(&quot;UserIdentifier&quot;, RequestId.toString())

vars.put(&quot;ContactType&quot;, &quot;email&quot;)
vars.put(&quot;ContractHandle&quot;, email)

}catch (Throwable ex)
{
	log.error(&quot;Error in Generate enrollment data&quot;, ex);
	throw ex;
}
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate CashLink Json" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.util.Arrays
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.apache.commons.lang.StringEscapeUtils
import org.apache.commons.lang.RandomStringUtils;

def programCode = &quot;${ProgramCode}&quot;;
def FirstName= &quot;${FirstName}&quot;;
def MiddleName = &quot;${LastName}&quot;;
def LastName = &quot;${LastName}&quot;;
def dateOfBirth = &quot;${DateOfBirth}&quot;;
def email = &quot;${Email}&quot;;
def IsMailVerified = &quot;true&quot;
def phone = &quot;${PhoneNumber}&quot;;
def identificationID=&apos;8239A&apos;;
def identificationType = &apos;drivingLicense&apos;;
def ssn = &quot;${SSN}&quot;;
def identificationIssuedBy =&apos;testCard&apos;;
def now = new Date();
now = now.format(&quot;yyyy-MM-dd&quot;);
def identificationExpiryDate =now;
def addressline1 = &quot;${AddressLine1}&quot;;
def AddressLine2 = &quot;${AddressLine2}&quot;;
def city = &quot;${City}&quot;;
def zipcode = &quot;${ZipCode}&quot;;
def state = &quot;${State}&quot;;
def Currency = &quot;USD&quot;
def Amt= RandomStringUtils.randomNumeric(2)
def Txndesc=&quot;Test Txn&quot;
def Txndate=now;
log.info (Currency);
log.info (Amt);
log.info (Txndesc);
log.info (Txndate);
vars.put(&quot;output_Currency&quot;, Currency);
vars.put(&quot;output_Amt&quot;, Amt);
vars.put(&quot;output_Txndesc&quot;, Txndesc);
vars.put(&quot;output_Txndate&quot;, Txndate);


JSONObject cash = new JSONObject()
cash.put(&quot;FirstName&quot;,FirstName)
cash.put(&quot;LastName&quot;,LastName)
cash.put(&quot;email&quot;,email)
cash.put(&quot;phone&quot;,phone)
cash.put(&quot;ssn&quot;,ssn)
cash.put(&quot;identificationID&quot;,identificationID)
cash.put(&quot;identificationType&quot;,identificationType)
cash.put(&quot;identificationIssuedBy&quot;,identificationIssuedBy)
cash.put(&quot;identificationExpiryDate&quot;,identificationExpiryDate)
cash.put(&quot;dateOfBirth&quot;,dateOfBirth)

JSONObject address = new JSONObject()
address.put(&quot;addressline1&quot;,addressline1)	
address.put(&quot;city&quot;,city)
address.put(&quot;State&quot;,state)
address.put(&quot;zipcode&quot;, zipcode)


JSONObject finalObj = new JSONObject()
cash.put(&quot;address&quot;,address)
finalObj.put(&quot;cash&quot;,cash)


log.info (finalObj.toJSONString());
vars.put(&quot;out_json_cardlink&quot;, StringEscapeUtils.escapeJava(finalObj.toJSONString()));

vars.put(&quot;salt_cl&quot;,java.util.UUID.randomUUID().toString());


</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EncrptCashLink" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
 &quot;requestHeader&quot;: {&#xd;
 &quot;requestId&quot;: &quot;${salt_cl}&quot;&#xd;
 },&#xd;
 &quot;version&quot;: &quot;EC_v1&quot;,&#xd;
 &quot;salt&quot;: &quot;${salt_cl}&quot;,&#xd;
 &quot;programCode&quot;: &quot;${ProgramCode}&quot;,&#xd;
 &quot;data&quot;:&quot;${out_json_cardlink}&quot;&#xd;
 }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CRYPTO_API}/encrypt</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                    <stringProp name="Header.value">${BOS-CRYPTO-TPK}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">version_cl;ephemeralPublicKey_cl;publicKeyHash_cl;encryptedData_cl;responseId_cl</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedData.version;$.encryptedData.ephemeralPublicKey;$.encryptedData.publicKeyHash;$.encryptedData.data;$.responseHeader.responseId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Append results to OUTPUT file" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${SourceAccountIdentifier} ${TargetAccountIdentifier} ${access_token}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

try{
	String sourceAccountIdentifier = args[0];
	String targetAccountIdentifier = args[1];
	String accessToken = args[2];
	double transAmount=1.00;


	FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
	fstream.write(accessToken + &quot;,&quot; + sourceAccountIdentifier + &quot;,&quot; + targetAccountIdentifier + &quot;,&quot; + transAmount + System.getProperty(&quot;line.separator&quot;));
	fstream.close();
	
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{
String accountIdentifier = &quot;${accountIdentifier}&quot;;
String accessToken = &quot;${access_token}&quot;;
double transAmount=1.00;
String version_cl = &quot;${version_cl}&quot;;
String ephemeralPublicKey_cl = &quot;${ephemeralPublicKey_cl}&quot;;
String publicKeyHash_cl = &quot;${publicKeyHash_cl}&quot;;
String encryptedData_cl = &quot;${encryptedData_cl}&quot;;
String responseId_cl = &quot;${responseId_cl}&quot;;


FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
	fstream.write(accessToken + &quot;,&quot; + accountIdentifier + &quot;,&quot; + version_cl + &quot;,&quot; + ephemeralPublicKey_cl  + &quot;,&quot; + publicKeyHash_cl + &quot;,&quot; + encryptedData_cl + &quot;,&quot; + responseId_cl + System.getProperty(&quot;line.separator&quot;));
	fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Disbursemen-BankCard" enabled="true"/>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config-Account" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">accountIdentifier</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config-BankCard" enabled="true">
              <stringProp name="filename">${INPUT_FILE_BANKCARD}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">Link_FName,Link_LName,Link_Email,Link_Phone,Link_DOB,Link_SSN,Link_Add1,Link_Add2,Link_City,Link_State,Link_Zip,Link_ExpMo,Link_ExpYr,Link_AcctNum</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate enrollment data" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.lang.RandomStringUtils;

try{
def firstName = RandomStringUtils.randomAlphabetic(8)
def lastName = RandomStringUtils.randomAlphabetic(8)
def sSNSuffix = &quot;&quot;
def ssn = &quot;10&quot; + RandomStringUtils.randomNumeric(7)
def address1 = &quot;1&quot; + RandomStringUtils.randomNumeric(5) + &apos; &apos; + &apos; Foothill Blvd&apos;
def address2 = &apos;SUITE &apos; + RandomStringUtils.randomNumeric(3)
def zipCode = &quot;9&quot; + RandomStringUtils.randomNumeric(4)
def email = RandomStringUtils.randomAlphabetic(15)+&apos;@greendotcorp.com&apos;
TimeZone.setDefault(TimeZone.getTimeZone(&apos;UTC&apos;))
def now = new Date()
now = now.format(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;&quot;)
//now = now.format(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss&apos;Z&apos;&quot;)

def RequestId = java.util.UUID.randomUUID()

vars.put(&quot;TermsAcceptanceDateTime&quot;, now)
vars.put(&quot;RequestId&quot;, RequestId.toString())


// Personal Data
vars.put(&quot;Title&quot;, &quot;Mr&quot;)
vars.put(&quot;FirstName&quot;, firstName)
vars.put(&quot;MiddleInitials&quot;, &quot;K&quot;)
vars.put(&quot;LastName&quot;, lastName)
vars.put(&quot;AddressLine1&quot;, address1)
vars.put(&quot;AddressLine2&quot;, address2)
vars.put(&quot;City&quot;, &quot;Pasadena&quot;)
vars.put(&quot;State&quot;, &quot;CA&quot;)
vars.put(&quot;ZipCode&quot;, zipCode)
vars.put(&quot;Type&quot;, &quot;home&quot;)

//end of Personal Data
//Personal Data-Part2

vars.put(&quot;SSN&quot;, ssn)
vars.put(&quot;SSNSuffix&quot;, sSNSuffix)
vars.put(&quot;DateOfBirth&quot;, &quot;1987-02-02&quot;)
vars.put(&quot;Email&quot;, email)

def phoneNum = &apos;6&apos; + RandomStringUtils.randomNumeric(9);
vars.put(&quot;PhoneNumber&quot;, phoneNum) //&quot;6505268188&quot;

vars.put(&quot;PhoneType&quot;, &quot;Mobile&quot;)

//End of Personal Data 2
//Encrypted Data part
vars.put(&quot;encryptedUserDataVersion&quot;, RequestId.toString())
vars.put(&quot;EphemeralPublicKey&quot;, RequestId.toString())
vars.put(&quot;PublicKeyHash&quot;, RequestId.toString())
vars.put(&quot;salt&quot;, RequestId.toString())
vars.put(&quot;Version&quot;, &quot;EC_v1&quot;)
vars.put(&quot;ProgramName&quot;, &quot;${ProgramCode}&quot;)


// Terms acceptance
vars.put(&quot;TermsIdentifier&quot;, RequestId.toString())
vars.put(&quot;TermsAcceptanceDateTime&quot;, now)


// Account Data
vars.put(&quot;ProductCode&quot;, &quot;${ProductCode}&quot;)
vars.put(&quot;AccountType&quot;, &quot;Savings&quot;)
vars.put(&quot;Currency&quot;, &quot;USD&quot;)
vars.put(&quot;PurseIdentifier&quot;, RequestId.toString())
vars.put(&quot;PurseType&quot;, &quot;Primary&quot;)
vars.put(&quot;UserIdentifier&quot;, RequestId.toString())

vars.put(&quot;ContactType&quot;, &quot;email&quot;)
vars.put(&quot;ContractHandle&quot;, email)

}catch (Throwable ex)
{
	log.error(&quot;Error in Generate enrollment data&quot;, ex);
	throw ex;
}
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate BankCard Json" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.util.Arrays
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.apache.commons.lang.StringEscapeUtils;
import org.apache.commons.lang.RandomStringUtils;
import java.time.YearMonth;


def programCode = &quot;${ProgramCode}&quot;;
def accountNumber = &quot;${Link_AcctNum}&quot;;
//int expyear = (new Date()).getYear()+1;
//int expmonth = (new Date()).getMonth();
int expyear = YearMonth.now().getYear()+1;
int expmonth = YearMonth.now().getMonthValue();

def expirymonth = expmonth.toString();
def expiryyear = expyear.toString();
def lastname = &quot;${LastName}&quot;;
def firstname = &quot;${FirstName}&quot;;
def nickName = &quot;${LastName}&quot;;
def addressline1 = &quot;${AddressLine1}&quot;;
def city = &quot;${City}&quot;;
def state = &quot;${State}&quot;;
def zipcode =&quot;${ZipCode}&quot;;
def now = new Date();
now = now.format(&quot;yyyy-MM-dd&quot;);
def Amt= RandomStringUtils.randomNumeric(2);
def Currency = &quot;USD&quot;;
def Txndesc=&quot;Test Txn&quot;;
def Txndate=now;

vars.put(&quot;output_Currency&quot;, Currency);
vars.put(&quot;output_Amt&quot;, Amt);
vars.put(&quot;output_Txndesc&quot;, Txndesc);
vars.put(&quot;output_Txndate&quot;, Txndate);



JSONObject bankcard = new JSONObject();
bankcard.put(&quot;accountnumber&quot;,accountNumber);
bankcard.put(&quot;expirymonth&quot;,expirymonth);
bankcard.put(&quot;expiryyear&quot;,expiryyear);
bankcard.put(&quot;nickname&quot;,nickName);
JSONObject BankCardAccountHolder = new JSONObject();

BankCardAccountHolder.put(&quot;firstname&quot;,firstname);	
BankCardAccountHolder.put(&quot;lastname&quot;,lastname);	

JSONObject address = new JSONObject();
address.put(&quot;addressline1&quot;,addressline1);	
address.put(&quot;city&quot;,city);
address.put(&quot;State&quot;,state);
address.put(&quot;zipcode&quot;, zipcode);


JSONObject finalObj = new JSONObject();
BankCardAccountHolder.put(&quot;address&quot;,address);
finalObj.put(&quot;BankCardAccountHolder&quot;,BankCardAccountHolder);
finalObj.put(&quot;bankcard&quot;,bankcard);

log.info (finalObj.toJSONString());
//return StringEscapeUtils.escapeJava(finalObj.toJSONString())
vars.put(&quot;out_json&quot;, StringEscapeUtils.escapeJava(finalObj.toJSONString()));
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EncrptBankCard" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
 &quot;requestHeader&quot;: {&#xd;
 &quot;requestId&quot;: &quot;${RequestId}&quot;&#xd;
 },&#xd;
 &quot;version&quot;: &quot;EC_v1&quot;,&#xd;
 &quot;salt&quot;: &quot;${RequestId}&quot;,&#xd;
 &quot;programCode&quot;: &quot;${ProgramCode}&quot;,&#xd;
 &quot;data&quot;:&quot;${out_json}&quot;&#xd;
 }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CRYPTO_API}/encrypt</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                    <stringProp name="Header.value">${BOS-CRYPTO-TPK}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">version_bc;ephemeralPublicKey_bc;publicKeyHash_bc;encryptedData_bc;responseId_bc</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedData.version;$.encryptedData.ephemeralPublicKey;$.encryptedData.publicKeyHash;$.encryptedData.data;$.responseHeader.responseId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Append results to OUTPUT file" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${SourceAccountIdentifier} ${TargetAccountIdentifier} ${access_token}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

try{
	String sourceAccountIdentifier = args[0];
	String targetAccountIdentifier = args[1];
	String accessToken = args[2];
	double transAmount=1.00;


	FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
	fstream.write(accessToken + &quot;,&quot; + sourceAccountIdentifier + &quot;,&quot; + targetAccountIdentifier + &quot;,&quot; + transAmount + System.getProperty(&quot;line.separator&quot;));
	fstream.close();
	
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{
String accountIdentifier = &quot;${accountIdentifier}&quot;;
String accessToken = &quot;${access_token}&quot;;
double transAmount=1.00;
String version_bc = &quot;${version_bc}&quot;;
String ephemeralPublicKey_bc = &quot;${ephemeralPublicKey_bc}&quot;;
String publicKeyHash_bc = &quot;${publicKeyHash_bc}&quot;;
String encryptedData_bc = &quot;${encryptedData_bc}&quot;;
String responseId_bc = &quot;${responseId_bc}&quot;;


FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
	fstream.write(accessToken + &quot;,&quot; + accountIdentifier + &quot;,&quot; + version_bc + &quot;,&quot; + ephemeralPublicKey_bc  + &quot;,&quot; + publicKeyHash_bc + &quot;,&quot; + encryptedData_bc + &quot;,&quot; + responseId_bc + System.getProperty(&quot;line.separator&quot;));
	fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Disbursemen-Ach" enabled="true"/>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config-Account" enabled="true">
              <stringProp name="filename">${INPUT_FILE}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">accountIdentifier</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config-BankCard" enabled="false">
              <stringProp name="filename">${INPUT_FILE_ACH}</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">routingNumber,accountType,bankName</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <stringProp name="TestPlan.comments">From Legacy MMC DB</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate enrollment data" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.lang.RandomStringUtils;

try{
def firstName = RandomStringUtils.randomAlphabetic(8)
def lastName = RandomStringUtils.randomAlphabetic(8)
def sSNSuffix = &quot;&quot;
def ssn = &quot;10&quot; + RandomStringUtils.randomNumeric(7)
def address1 = &quot;1&quot; + RandomStringUtils.randomNumeric(5) + &apos; &apos; + &apos; Foothill Blvd&apos;
def address2 = &apos;SUITE &apos; + RandomStringUtils.randomNumeric(3)
def zipCode = &quot;9&quot; + RandomStringUtils.randomNumeric(4)
def email = RandomStringUtils.randomAlphabetic(15)+&apos;@greendotcorp.com&apos;
TimeZone.setDefault(TimeZone.getTimeZone(&apos;UTC&apos;))
def now = new Date()
now = now.format(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;&quot;)
//now = now.format(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss&apos;Z&apos;&quot;)

def RequestId = java.util.UUID.randomUUID()

vars.put(&quot;TermsAcceptanceDateTime&quot;, now)
vars.put(&quot;RequestId&quot;, RequestId.toString())


// Personal Data
vars.put(&quot;Title&quot;, &quot;Mr&quot;)
vars.put(&quot;FirstName&quot;, firstName)
vars.put(&quot;MiddleInitials&quot;, &quot;K&quot;)
vars.put(&quot;LastName&quot;, lastName)
vars.put(&quot;AddressLine1&quot;, address1)
vars.put(&quot;AddressLine2&quot;, address2)
vars.put(&quot;City&quot;, &quot;Pasadena&quot;)
vars.put(&quot;State&quot;, &quot;CA&quot;)
vars.put(&quot;ZipCode&quot;, zipCode)
vars.put(&quot;Type&quot;, &quot;home&quot;)

//end of Personal Data
//Personal Data-Part2

vars.put(&quot;SSN&quot;, ssn)
vars.put(&quot;SSNSuffix&quot;, sSNSuffix)
vars.put(&quot;DateOfBirth&quot;, &quot;1987-02-02&quot;)
vars.put(&quot;Email&quot;, email)

def phoneNum = &apos;6&apos; + RandomStringUtils.randomNumeric(9);
vars.put(&quot;PhoneNumber&quot;, phoneNum) //&quot;6505268188&quot;

vars.put(&quot;PhoneType&quot;, &quot;Mobile&quot;)

//End of Personal Data 2
//Encrypted Data part
vars.put(&quot;encryptedUserDataVersion&quot;, RequestId.toString())
vars.put(&quot;EphemeralPublicKey&quot;, RequestId.toString())
vars.put(&quot;PublicKeyHash&quot;, RequestId.toString())
vars.put(&quot;salt&quot;, RequestId.toString())
vars.put(&quot;Version&quot;, &quot;EC_v1&quot;)
vars.put(&quot;ProgramName&quot;, &quot;${ProgramCode}&quot;)


// Terms acceptance
vars.put(&quot;TermsIdentifier&quot;, RequestId.toString())
vars.put(&quot;TermsAcceptanceDateTime&quot;, now)


// Account Data
vars.put(&quot;ProductCode&quot;, &quot;${ProductCode}&quot;)
vars.put(&quot;AccountType&quot;, &quot;Savings&quot;)
vars.put(&quot;Currency&quot;, &quot;USD&quot;)
vars.put(&quot;PurseIdentifier&quot;, RequestId.toString())
vars.put(&quot;PurseType&quot;, &quot;Primary&quot;)
vars.put(&quot;UserIdentifier&quot;, RequestId.toString())

vars.put(&quot;ContactType&quot;, &quot;email&quot;)
vars.put(&quot;ContractHandle&quot;, email)

}catch (Throwable ex)
{
	log.error(&quot;Error in Generate enrollment data&quot;, ex);
	throw ex;
}
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate ACH Json" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.util.Arrays
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.apache.commons.lang.StringEscapeUtils;
import org.apache.commons.lang.RandomStringUtils;
import java.time.YearMonth;


def programCode = &quot;${ProgramCode}&quot;;
def accountNumber = &quot;${AccountNumber}&quot;;

//def routingNumber = &quot;${routingNumber}&quot;;
//def accountType = &quot;${accountType}&quot;;
//def bankName = &quot;${bankName}&quot;;

def routingNumber = &quot;291173102&quot;;
def accountType = &quot;Checking&quot;;
def bankName = &quot;EMBERS CREDIT UNION&quot;;

//int expyear = (new Date()).getYear()+1;
//int expmonth = (new Date()).getMonth();
int expyear = YearMonth.now().getYear()+1;
int expmonth = YearMonth.now().getMonthValue();

def expirymonth = expmonth.toString();
def expiryyear = expyear.toString();
def lastname = &quot;${LastName}&quot;;
def firstname = &quot;${FirstName}&quot;;
def nickName = &quot;${LastName}&quot;;
def addressline1 = &quot;${AddressLine1}&quot;;
def city = &quot;${City}&quot;;
def state = &quot;${State}&quot;;
def zipcode =&quot;${ZipCode}&quot;;
def now = new Date();
now = now.format(&quot;yyyy-MM-dd&quot;);
def Amt= RandomStringUtils.randomNumeric(2);
def Currency = &quot;USD&quot;;
def Txndesc=&quot;Test Txn&quot;;
def Txndate=now;

vars.put(&quot;output_Currency&quot;, Currency);
vars.put(&quot;output_Amt&quot;, Amt);
vars.put(&quot;output_Txndesc&quot;, Txndesc);
vars.put(&quot;output_Txndate&quot;, Txndate);



JSONObject ach = new JSONObject();
ach.put(&quot;accountNumber&quot;,accountNumber);
ach.put(&quot;routingNumber&quot;,routingNumber);
ach.put(&quot;bankName&quot;,bankName);
ach.put(&quot;nickName&quot;,nickName);
ach.put(&quot;accountType&quot;,accountType);
ach.put(&quot;firstName&quot;,firstname);	
ach.put(&quot;lastName&quot;,lastname);	
ach.put(&quot;middleName&quot;,lastname);	

JSONObject address = new JSONObject();
address.put(&quot;addressline1&quot;,addressline1);	
address.put(&quot;city&quot;,city);
address.put(&quot;State&quot;,state);
address.put(&quot;zipcode&quot;, zipcode);


JSONObject finalObj = new JSONObject();
ach.put(&quot;address&quot;,address);
finalObj.put(&quot;ach&quot;,ach);

//log.info (finalObj.toJSONString());
//return StringEscapeUtils.escapeJava(finalObj.toJSONString())
vars.put(&quot;out_json_ach&quot;, StringEscapeUtils.escapeJava(finalObj.toJSONString()));
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EncrptAch" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
 &quot;requestHeader&quot;: {&#xd;
 &quot;requestId&quot;: &quot;${RequestId}&quot;&#xd;
 },&#xd;
 &quot;version&quot;: &quot;EC_v1&quot;,&#xd;
 &quot;salt&quot;: &quot;${RequestId}&quot;,&#xd;
 &quot;programCode&quot;: &quot;${ProgramCode}&quot;,&#xd;
 &quot;data&quot;:&quot;${out_json_ach}&quot;&#xd;
 }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CRYPTO_API}/encrypt</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                    <stringProp name="Header.value">${BOS-CRYPTO-TPK}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">version_ach;ephemeralPublicKey_ach;publicKeyHash_ach;encryptedData_ach;responseId_ach</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedData.version;$.encryptedData.ephemeralPublicKey;$.encryptedData.publicKeyHash;$.encryptedData.data;$.responseHeader.responseId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-GD-RequestId</stringProp>
                      <stringProp name="Header.value">${__UUID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Append results to OUTPUT file" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${SourceAccountIdentifier} ${TargetAccountIdentifier} ${access_token}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

try{
	String sourceAccountIdentifier = args[0];
	String targetAccountIdentifier = args[1];
	String accessToken = args[2];
	double transAmount=1.00;


	FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
	fstream.write(accessToken + &quot;,&quot; + sourceAccountIdentifier + &quot;,&quot; + targetAccountIdentifier + &quot;,&quot; + transAmount + System.getProperty(&quot;line.separator&quot;));
	fstream.close();
	
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{
String accountIdentifier = &quot;${accountIdentifier}&quot;;
String accessToken = &quot;${access_token}&quot;;
double transAmount=1.00;
String version_ach = &quot;${version_ach}&quot;;
String ephemeralPublicKey_ach = &quot;${ephemeralPublicKey_ach}&quot;;
String publicKeyHash_ach = &quot;${publicKeyHash_ach}&quot;;
String encryptedData_ach = &quot;${encryptedData_ach}&quot;;
String responseId_ach = &quot;${responseId_ach}&quot;;


FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
	fstream.write(accessToken + &quot;,&quot; + accountIdentifier + &quot;,&quot; + version_ach + &quot;,&quot; + ephemeralPublicKey_ach  + &quot;,&quot; + publicKeyHash_ach + &quot;,&quot; + encryptedData_ach + &quot;,&quot; + responseId_ach + System.getProperty(&quot;line.separator&quot;));
	fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SplitFiles and Disbursemen" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
          <stringProp name="SwitchController.value">${CurrentController}</stringProp>
        </SwitchController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Disbursemen-CashLink" enabled="true"/>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="SetDataFileName" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;disbursementCashLinkData.csv&quot;);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;disbursementCashLinkData.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Disbursemen-BankCard" enabled="true"/>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="SetDataFileName" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;disbursementBankCardData.csv&quot;);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;disbursementBankCardData.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Disbursemen-Ach" enabled="true"/>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="SetDataFileName" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;disbursementACHLinkData.csv&quot;);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetDataFileName" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;disbursementACHLinkData.csv&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Delete source file" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">DEL /F /Q</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${RESULT_FILE_NAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}</stringProp>
        </SystemSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Combine Multi-Thread files into one" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">copy /b</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\multi-thread\multi-thread-out*</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\multi-thread\\${DATA_FILE_NAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\multi-thread</stringProp>
        </SystemSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Data Splitter Execution" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\GDQA_PerfDataSplitter\GDQA_PerfDataSplitter.exe</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\multi-thread\\${DATA_FILE_NAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\SplitFiles</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${DATA_FILE_NAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree/>
        <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
          <stringProp name="SwitchController.value">${LOOPCOPY_SWITCHVAL}</stringProp>
        </SwitchController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="LoopCopy" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">3</stringProp>
          </LoopController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get current index" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

try{
	log.info(&quot;Current count:&quot; + String.valueOf(${__jm__LoopCopy__idx}+1));
	vars.put(&quot;CurrentIndex&quot;, String.valueOf(${__jm__LoopCopy__idx}+1));
	vars.put(&quot;CurrentRemoteServerIndex&quot;, String.valueOf(${__jm__LoopCopy__idx}+2));
}
catch (Throwable ex)
{
	log.error(&quot;Error in Get-current-index script&quot;, ex);
	throw ex;
}</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder-1" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd.exe</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">copy /b /y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">.\\${CurrentIndex}\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">\\\\g1pfbosload0${CurrentRemoteServerIndex}\\data\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\SplitFiles</stringProp>
            </SystemSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Copy-AWS" enabled="true"/>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder-10.62.11.121" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd.exe</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">copy /b /y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">.\\1\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">\\\\10.62.11.121\\data\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\SplitFiles</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder-10.62.9.110" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd.exe</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">copy /b /y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">.\\2\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">\\\\10.62.9.110\\data\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\SplitFiles</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder-10.62.10.96" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd.exe</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">copy /b /y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">.\\3\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">\\\\10.62.10.96\\data\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\SplitFiles</stringProp>
            </SystemSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
