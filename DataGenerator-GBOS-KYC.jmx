<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Data Generation- for virtual accounts" enabled="true">
      <stringProp name="TestPlan.comments">Please change below variable value by your current test needs:
PROPFILE_NAME	${__P(PROPFILE_NAME,stash.properties)}</stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="PROPFILE" elementType="Argument">
            <stringProp name="Argument.name">PROPFILE</stringProp>
            <stringProp name="Argument.value">${__P(PROPFILE,C:\QA\Performance\Jmeter\GBOS\PropertyFiles\stash.properties)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WORKSPACE_PATH" elementType="Argument">
            <stringProp name="Argument.name">WORKSPACE_PATH</stringProp>
            <stringProp name="Argument.value">${__P(WORKSPACE_PATH,C:\QA\Performance\Jmeter\GBOS\DataGenerator)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NUMOFTHREADS_GEN" elementType="Argument">
            <stringProp name="Argument.name">NUMOFTHREADS_GEN</stringProp>
            <stringProp name="Argument.value">${__P(NUMOFTHREADS_GEN,30)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMUP_PERIOD_GEN" elementType="Argument">
            <stringProp name="Argument.name">RAMUP_PERIOD_GEN</stringProp>
            <stringProp name="Argument.value">${__P(RAMUP_PERIOD,5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOOP_COUNT_GEN" elementType="Argument">
            <stringProp name="Argument.name">LOOP_COUNT_GEN</stringProp>
            <stringProp name="Argument.value">${__P(LOOP_COUNT_GEN, 600)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NUMBER_OF_ACCOUNTS" elementType="Argument">
            <stringProp name="Argument.name">NUMBER_OF_ACCOUNTS</stringProp>
            <stringProp name="Argument.value">${__P(NUMBER_OF_ACCOUNTS,150000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DEFAULT_ACCESS_TOKEN" elementType="Argument">
            <stringProp name="Argument.name">DEFAULT_ACCESS_TOKEN</stringProp>
            <stringProp name="Argument.value">${__P(DEFAULT_ACCESS_TOKEN,+S0jAi1MqvvNqqA4H6ybKQ==)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="QATOOL_ENDPOINT" elementType="Argument">
            <stringProp name="Argument.name">QATOOL_ENDPOINT</stringProp>
            <stringProp name="Argument.value">${__P(QATOOL_ENDPOINT, http://g1pfbosqatools01:8082/GBOSQAToolService.svc/)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SIM_ENDPOINT" elementType="Argument">
            <stringProp name="Argument.name">SIM_ENDPOINT</stringProp>
            <stringProp name="Argument.value">${__P(SIM_ENDPOINT, https://gdqatools/GDQATools/GDQA_IPSMQSimulator_Bos/IPSMQSimulatorService.svc)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IsAWS" elementType="Argument">
            <stringProp name="Argument.name">IsAWS</stringProp>
            <stringProp name="Argument.value">${__P(IsAWS, true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="START_DATE" elementType="Argument">
            <stringProp name="Argument.name">START_DATE</stringProp>
            <stringProp name="Argument.value">${__P(START_DATE, 2019-07-24 09:00:00.410)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="END_DATE" elementType="Argument">
            <stringProp name="Argument.name">END_DATE</stringProp>
            <stringProp name="Argument.value">${__P(END_DATE, 2020-10-28 00:32:00.000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GSS_DB" elementType="Argument">
            <stringProp name="Argument.name">GSS_DB</stringProp>
            <stringProp name="Argument.value">${__P(GSS_DB, G1PFGSSDB01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BOS_CAS_DB" elementType="Argument">
            <stringProp name="Argument.name">BOS_CAS_DB</stringProp>
            <stringProp name="Argument.value">${__P(BOS_CAS_DB,G1PFBOSCRMDB01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOOPCOPY_SWITCHVAL" elementType="Argument">
            <stringProp name="Argument.name">LOOPCOPY_SWITCHVAL</stringProp>
            <stringProp name="Argument.value">${__P(LOOPCOPY_SWITCHVAL,Copy-AWS)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">
        <stringProp name="propFilePath">${PROPFILE}</stringProp>
      </com.tag.jmeter.ext.config.PropertyReader>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="SetVariableValuesPerCurrent Env" enabled="true">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters">${IsAWS}</stringProp>
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="script">String isAWS = &quot;${IsAWS}&quot;;


if(isAWS == &quot;false&quot;)
{
	//props.put(&quot;BOS_DB&quot;, &quot;G1PFBOSDB01&quot;);	
	vars.put(&quot;CRYPTO_API&quot;, &quot;https://boscryt/Crypto/V1&quot; );
	vars.put(&quot;OAUTH_API&quot;, &quot;https://bospart/baas/v1&quot; );
	vars.put(&quot;TOKENIZER_API&quot;, &quot;https://bostk/Tokenizer/v1/api&quot; );
	vars.put(&quot;IbmMQType&quot;, &quot;OnPrem&quot;);
}else{
	//Will be replaced by AWS_PRF endpoints later
	//props.put(&quot;BOS_DB&quot;, &quot;pibosdbag.awsnp.gdotawsnp.com&quot; );
	/*
	 * Read properties from Jmeter Test Plan lever User defined variables*/
	 /*
	vars.put(&quot;CRYPTO_API&quot;, &quot;https://&quot; + vars.get(&quot;CRYP_Host&quot;) + &quot;/Crypto/V1&quot; );
	vars.put(&quot;OAUTH_API&quot;, &quot;https://&quot; + vars.get(&quot;PRT_Host&quot;) + &quot;/baas/v1&quot; );
	vars.put(&quot;TOKENIZER_API&quot;, &quot;https://&quot; + vars.get(&quot;TKN_Host&quot;) + &quot;/Tokenizer/v1/api&quot; );
	*/

	//Read properties from .properties file
	vars.put(&quot;CRYPTO_API&quot;, &quot;https://${__P(CRYP_Host)}/Crypto/V1&quot; );
	vars.put(&quot;OAUTH_API&quot;, &quot;https://${__P(PRT_Host)}/baas/v1&quot; );
	vars.put(&quot;TOKENIZER_API&quot;, &quot;https://${__P(TKN_Host)}/Tokenizer/v1/api&quot; );
	vars.put(&quot;IbmMQType&quot;, &quot;AWS&quot;);
	vars.put(&quot;ProgramCode&quot;, &quot;${__P(PROGRAMCODE)}&quot; );
	vars.put(&quot;ProductCode&quot;, &quot;${__P(PRODUCT_CODE)}&quot; );
	vars.put(&quot;AUTH&quot;, &quot;${__P(AUTH)}&quot; );
	vars.put(&quot;BOS-CRYPTO-TPK&quot;, &quot;${__P(BOS-CRYPTO-TPK)}&quot; );
	//vars.put(&quot;BOS_DB&quot;, &quot;${__P(BOS_DB)}&quot; );
}

//Read properties from Jmeter Test Plan lever User defined variables
vars.put(&quot;QATOOL_API&quot;, vars.get(&quot;QATOOL_ENDPOINT&quot;));
vars.put(&quot;SimulatorService&quot;, vars.get(&quot;SIM_ENDPOINT&quot;));
vars.put(&quot;QAToolsServer&quot;, &quot;gdqatools&quot; );
vars.put(&quot;StartDate&quot;, vars.get(&quot;START_DATE&quot;));
vars.put(&quot;EndDate&quot;, vars.get(&quot;END_DATE&quot;));
vars.put(&quot;RequestPhysicalPlasticFlag&quot;, &quot;true&quot; );
</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="GBOS Variable" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="QATOOL_API" elementType="Argument">
            <stringProp name="Argument.name">QATOOL_API</stringProp>
            <stringProp name="Argument.value">${QATOOL_ENDPOINT}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProgramCode" elementType="Argument">
            <stringProp name="Argument.name">ProgramCode</stringProp>
            <stringProp name="Argument.value">${PROGRAMCODE}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProductCode" elementType="Argument">
            <stringProp name="Argument.name">ProductCode</stringProp>
            <stringProp name="Argument.value">${PRODUCT_CODE}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SimulatorService" elementType="Argument">
            <stringProp name="Argument.name">SimulatorService</stringProp>
            <stringProp name="Argument.value">${SIM_ENDPOINT}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="QAToolsServer" elementType="Argument">
            <stringProp name="Argument.name">QAToolsServer</stringProp>
            <stringProp name="Argument.value">gdqatools</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="StartDate" elementType="Argument">
            <stringProp name="Argument.name">StartDate</stringProp>
            <stringProp name="Argument.value">${START_DATE}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EndDate" elementType="Argument">
            <stringProp name="Argument.name">EndDate</stringProp>
            <stringProp name="Argument.value">${END_DATE}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RequestPhysicalPlasticFlag" elementType="Argument">
            <stringProp name="Argument.name">RequestPhysicalPlasticFlag</stringProp>
            <stringProp name="Argument.value">true</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="BOS GBOS DB Connection" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">GBOS</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${__P(BOS_DB)}:1433;databaseName=GBOS</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">G33Nff4%$^</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">qa_automation</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="BOS CAS DB Connection" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">CAS</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${BOS_CAS_DB}:1433;databaseName=CAS</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">G33Nff4%$^</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">qa_automation</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="GSS DB Connection-Retail" enabled="true">
        <stringProp name="dataSource">Retail</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${GSS_DB}:1433;databaseName=Retail;</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">qa_automation</stringProp>
        <stringProp name="password">G33Nff4%$^</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="GSS DB Connection-Billpay" enabled="true">
        <stringProp name="dataSource">BillPay</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${GSS_DB}:1433;databaseName=BillPay;</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">qa_automation</stringProp>
        <stringProp name="password">G33Nff4%$^</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json </stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Debug Only" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Cleanup existing files-All" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Delete existing file-1" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

log.info(FileServer.getFileServer().getBaseDir());

try{
	List files = FileUtils.listFiles(new File(vars.get(&quot;WORKSPACE_PATH&quot;) + File.separator + &quot;multi-thread&quot;), new String[]{&quot;csv&quot;}, true);
	for (File file : files) {
		file.delete();
	}

	List files = FileUtils.listFiles(new File(vars.get(&quot;WORKSPACE_PATH&quot;) + File.separator + &quot;SplitFiles&quot;), new String[]{&quot;csv&quot;}, true);
	for (File file : files) {
		file.delete();
	}
}
catch (Throwable ex)
{
	log.error(&quot;Error in Cleanup existing files&quot;, ex);
	throw ex;
}
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Delete existing file" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

log.info(FileServer.getFileServer().getBaseDir());

try{
	List files = FileUtils.listFiles(new File(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator + &quot;multi-thread&quot;), new String[]{&quot;csv&quot;}, true);
	for (File file : files) {
		file.delete();
	}
}
catch (Throwable ex)
{
	log.error(&quot;Error in Cleanup existing files&quot;, ex);
	throw ex;
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Get AccountInfo from DB - KycIDV" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="RESULT_FILE_NAME" elementType="Argument">
              <stringProp name="Argument.name">RESULT_FILE_NAME</stringProp>
              <stringProp name="Argument.value">${__P(ResultFileName, account-from-db.csv)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Delete existing file" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

log.info(vars.get (&quot;WORKSPACE_PATH&quot;));

try{
	File file = new File(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;);

	List files = FileUtils.listFiles(new File(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator + &quot;multi-thread&quot;), new String[]{&quot;csv&quot;}, true);
	for (File file : files) {
	file.delete();
	}

	if (file.exists())
	{
		//FileServer.getFileServer().closeFile(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME_P}&quot;);
		//FileServer.getFileServer().closeFile(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;);
		FileServer.getFileServer().closeFiles();
		//FileUtils.deleteQuietly(file);
	 	//FileDeleteStrategy.FORCE.delete(file);
	 	System.gc();
	 	file.setWritable(true);
	 	
	 	if (!file.delete()) 
       	{ 
                log.error(&quot;Couldn&apos;t delete file&quot;); 
        	} 
        	else 
        	{ 
                log.info(&quot;Successfully deleted file: &quot; + file.getName()); 
        	}
	}
} catch (FileNotFoundException e) {
    log.error(&quot;FileNotFoundException in Delete csv files&quot;, e);
    //e.printStackTrace();
} catch (IOException e) {
    log.error(&quot;IOException in Delete csv files&quot;, e);
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select top ${NUMBER_OF_ACCOUNTS} 
a.AccountIdentifier as accountIdentifier
, cp.ConsumerProfileIdentifier as userIdentifier
from Account a (nolock)
inner join Product p (nolock) on a.ProductKey=p.ProductKey
join AccountHolder h (nolock) on (h.AccountKey = a.AccountKey)
JOIN ConsumerProfile cp (nolock) on cp.ConsumerProfileKey=h.ConsumerProfileKey
JOIN AccountHolderCure hc (nolock) on h.AccountHolderCureKey=hc.AccountHolderCureKey
WHERE
	a.AccountStatusKey=1
and 
	hc.AccountHolderCure=&apos;IDV&apos;
and
	p.ProductCode = &apos;${ProductCode}&apos;
and
	a.AccountExternalProxy is null
	

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">accountIdentifier,useIdentifier</stringProp>
          <stringProp name="resultVariable">AccountDataList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountDataList&quot;))
{
	fstream.write(row.get(&quot;accountIdentifier&quot;) + &quot;,&quot; + row.get(&quot;userIdentifier&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Multi-Thread Data Generator - KycIDV" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${NUMOFTHREADS_GEN}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMUP_PERIOD_GEN}</stringProp>
        <longProp name="ThreadGroup.start_time">1498168968000</longProp>
        <longProp name="ThreadGroup.end_time">1498168968000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OUTPUT_FILE" elementType="Argument">
              <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
              <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="INPUT_FILE" elementType="Argument">
              <stringProp name="Argument.name">INPUT_FILE</stringProp>
              <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv </stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${INPUT_FILE}</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">accountIdentifier,userIdentifier</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IDVData Encryption" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;requestHeader&quot;: {&#xd;
 &quot;requestId&quot;: &quot;${userIdentifier}&quot;&#xd;
 },&#xd;
 &quot;version&quot;: &quot;EC_v1&quot;,&#xd;
 &quot;salt&quot;: &quot;${userIdentifier}&quot;,&#xd;
 &quot;programCode&quot;: &quot;${ProgramCode}&quot;,&#xd;
 &quot;data&quot;: &quot;{\&quot;documentBackImage\&quot;:\&quot;\\/9j\\/4AAQSkZJRgABAQEAYABgAAD\\/2wBDAAIBAQIBAQICAgICAgICAwUDAwMDAwYEBAMFBwYHBwcGBwcICQsJCAgKCAcHCg0KCgsMDAwMBwkODw0MDgsMDAz\\/2wBDAQICAgMDAwYDAwYMCAcIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAz\\/wAARCAHMAzMDASIAAhEBAxEB\\/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL\\/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6\\/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL\\/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6\\/9oADAMBAAIRAxEAPwD9\\/KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACivzg\\/4OgP29fix\\/wTu\\/YF8I+Nfg74r\\/4Q\\/wATap8QLPRLq8\\/syz1DzbOTTtSmeLy7qKWMZkt4W3BQ3yYBwSD+J\\/hj\\/g4O\\/wCClHjfQ4NT0bx54u1fTbnd5N3ZfDTR7iCXaxVtrppxU4ZSDg8EEdqmU4wV5OxjWxFKjHmrSUV5u35n9Z9Ffygf8P4\\/+Cnn\\/Q1ePf8Aw1mlf\\/K2j\\/h\\/H\\/wU8\\/6Grx7\\/AOGs0r\\/5W1n9Zo\\/zL70c39rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/Jxqv\\/AAX4\\/wCCmWg6Xc3194z8bWdlZxNPcXE\\/ww0iOKCNQWZ3Y6aAqgAkknAAr9SP+DUr\\/gqP8dv+ClH\\/AAvn\\/hdXjn\\/hNP8AhC\\/+Ee\\/sb\\/iS6fp32P7V\\/ann\\/wDHpBFv3fZ4fv7sbOMZObhUjPWLudFDE0ayvRmpW7NP8j9f6KKKs3CiiigAooooAKKKKACiiigAooooA\\/ID\\/g9W\\/wCUWXgH\\/squnf8Apo1ivzz\\/AOCYn\\/Jjngj\\/ALf\\/AP04XNfoZ\\/werf8AKLLwD\\/2VXTv\\/AE0axX55\\/wDBMT\\/kxzwR\\/wBv\\/wD6cLmvmOK\\/90j\\/AIl+TPyHxp\\/5ElL\\/AK+x\\/wDSJnvdFFFfnx\\/MIUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAcF+1X\\/AMmvfEj\\/ALFbU\\/8A0klr0\\/8A4MY\\/+bov+5U\\/9zVeYftV\\/wDJr3xI\\/wCxW1P\\/ANJJa9P\\/AODGP\\/m6L\\/uVP\\/c1X3fCX8Gp6r8j+jvBH\\/ccT\\/jX5H7\\/AFFFFfWn7cFFFFABRRRQAUUUUAFFFFABRRRQB+QH\\/B6t\\/wAosvAP\\/ZVdO\\/8ATRrFfnn\\/AMExP+THPBH\\/AG\\/\\/APpwua\\/Qz\\/g9W\\/5RZeAf+yq6d\\/6aNYr88\\/8AgmJ\\/yY54I\\/7f\\/wD04XNfMcV\\/7pH\\/ABL8mfkPjT\\/yJKX\\/AF9j\\/wCkTPe6KKK\\/Pj+YQooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA4L9qv\\/AJNe+JH\\/AGK2p\\/8ApJLXp\\/8AwYx\\/83Rf9yp\\/7mq8w\\/ar\\/wCTXviR\\/wBitqf\\/AKSS16f\\/AMGMf\\/N0X\\/cqf+5qvu+Ev4NT1X5H9HeCP+44n\\/GvyP3+ooor60\\/bgooooAKKKKACiiigAooooAKKKKAPyA\\/4PVv+UWXgH\\/squnf+mjWK\\/PP\\/AIJif8mOeCP+3\\/8A9OFzX6Gf8Hq3\\/KLLwD\\/2VXTv\\/TRrFfnn\\/wAExP8AkxzwR\\/2\\/\\/wDpwua+Y4r\\/AN0j\\/iX5M\\/IfGn\\/kSUv+vsf\\/AEiZ73RRRX58fzCFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAHBftV\\/8AJr3xI\\/7FbU\\/\\/AEklr0\\/\\/AIMY\\/wDm6L\\/uVP8A3NV5h+1X\\/wAmvfEj\\/sVtT\\/8ASSWvT\\/8Agxj\\/AObov+5U\\/wDc1X3fCX8Gp6r8j+jvBH\\/ccT\\/jX5H7\\/UUUV9aftwUUUUAFFFFABRRRQAUUUUAFFFFAH5Af8Hq3\\/KLLwD\\/2VXTv\\/TRrFfnn\\/wAExP8AkxzwR\\/2\\/\\/wDpwua\\/Qz\\/g9W\\/5RZeAf+yq6d\\/6aNYr88\\/+CYn\\/ACY54I\\/7f\\/8A04XNfMcV\\/wC6R\\/xL8mfkPjT\\/AMiSl\\/19j\\/6RM97ooor8+P5hCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDgv2q\\/+TXviR\\/2K2p\\/+kkten\\/8ABjH\\/AM3Rf9yp\\/wC5qvMP2q\\/+TXviR\\/2K2p\\/+kkten\\/8ABjH\\/AM3Rf9yp\\/wC5qvu+Ev4NT1X5H9HeCP8AuOJ\\/xr8j9\\/qKKK+tP24KKKKACiiigAooooAKKKKACiiigD8gP+D1b\\/lFl4B\\/7Krp3\\/po1ivzz\\/4Jif8AJjngj\\/t\\/\\/wDThc1+hn\\/B6t\\/yiy8A\\/wDZVdO\\/9NGsV+ef\\/BMT\\/kxzwR\\/2\\/wD\\/AKcLmvmOK\\/8AdI\\/4l+TPyHxp\\/wCRJS\\/6+x\\/9Ime90UUV+fH8whRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQBwX7Vf\\/Jr3xI\\/7FbU\\/\\/SSWvT\\/+DGP\\/AJui\\/wC5U\\/8Ac1XmH7Vf\\/Jr3xI\\/7FbU\\/\\/SSWvT\\/+DGP\\/AJui\\/wC5U\\/8Ac1X3fCX8Gp6r8j+jvBH\\/AHHE\\/wCNfkfv9RRRX1p+3BRRRQAUUUUAFFFFABRRRQAUUUUAfkB\\/werf8osvAP8A2VXTv\\/TRrFfnn\\/wTE\\/5Mc8Ef9v8A\\/wCnC5r9DP8Ag9W\\/5RZeAf8Asqunf+mjWK\\/PP\\/gmJ\\/yY54I\\/7f8A\\/wBOFzXzHFf+6R\\/xL8mfkPjT\\/wAiSl\\/19j\\/6RM97ooor8+P5hCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDgv2q\\/+TXviR\\/2K2p\\/+kkten\\/8GMf\\/ADdF\\/wByp\\/7mq8w\\/ar\\/5Ne+JH\\/Yran\\/6SS16f\\/wYx\\/8AN0X\\/AHKn\\/uar7vhL+DU9V+R\\/R3gj\\/uOJ\\/wAa\\/I\\/f6iiivrT9uCiiigAooooAKKKKACiiigAooooA\\/ID\\/AIPVv+UWXgH\\/ALKrp3\\/po1ivzz\\/4Jif8mOeCP+3\\/AP8AThc1+hn\\/AAerf8osvAP\\/AGVXTv8A00axX55\\/8ExP+THPBH\\/b\\/wD+nC5r5jiv\\/dI\\/4l+TPyHxp\\/5ElL\\/r7H\\/0iZ73RRRX58fzCFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAHBftV\\/8mvfEj\\/sVtT\\/APSSWvT\\/APgxj\\/5ui\\/7lT\\/3NV5h+1X\\/ya98SP+xW1P8A9JJa9P8A+DGP\\/m6L\\/uVP\\/c1X3fCX8Gp6r8j+jvBH\\/ccT\\/jX5H7\\/UUUV9aftwUUUUAFFFFABRRRQAUUUUAFFFFAH5Af8AB6t\\/yiy8A\\/8AZVdO\\/wDTRrFfnn\\/wTE\\/5Mc8Ef9v\\/AP6cLmv0M\\/4PVv8AlFl4B\\/7Krp3\\/AKaNYr88\\/wDgmJ\\/yY54I\\/wC3\\/wD9OFzXzHFf+6R\\/xL8mfkPjT\\/yJKX\\/X2P8A6RM97ooor8+P5hCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDgv2q\\/wDk174kf9itqf8A6SS16f8A8GMf\\/N0X\\/cqf+5qvMP2q\\/wDk174kf9itqf8A6SS16f8A8GMf\\/N0X\\/cqf+5qvu+Ev4NT1X5H9HeCP+44n\\/GvyP3+ooor60\\/bgooooAKKKKACiiigAooooAKKKKAPyA\\/4PVv8AlFl4B\\/7Krp3\\/AKaNYr88\\/wDgmJ\\/yY54I\\/wC3\\/wD9OFzX6Gf8Hq3\\/ACiy8A\\/9lV07\\/wBNGsV+ef8AwTE\\/5Mc8Ef8Ab\\/8A+nC5r5jiv\\/dI\\/wCJfkz8h8af+RJS\\/wCvsf8A0iZ73RRRX58fzCFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUVzHjL43eDPh1qq2PiDxd4Y0K9eMTLb6jqsFrKyEkBgrsDtJBGcY4PpW34f8R6f4t0aDUdKvrPU9Pul3wXVpMs0My5xlXUlSMg9D2q3CSjzNaG88NWhBVJwai9nZ2foy5RRRUGAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQBwX7Vf\\/Jr3xI\\/7FbU\\/wD0klr0\\/wD4MY\\/+bov+5U\\/9zVeYftV\\/8mvfEj\\/sVtT\\/APSSWvT\\/APgxj\\/5ui\\/7lT\\/3NV93wl\\/Bqeq\\/I\\/o7wR\\/3HE\\/41+R+\\/1FFFfWn7cFFFFABRRRQAUUUUAFFFFABRRRQB+QH\\/AAerf8osvAP\\/AGVXTv8A00axX55\\/8ExP+THPBH\\/b\\/wD+nC5r9DP+D1b\\/AJRZeAf+yq6d\\/wCmjWK\\/PP8A4Jif8mOeCP8At\\/8A\\/Thc18xxX\\/ukf8S\\/Jn5D40\\/8iSl\\/19j\\/AOkTPe6KKK\\/Pj+YQooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDH+Ieuz+F\\/h\\/rmp22w3GnafcXUQcZXekbMMj0yBX5eeA\\/+CmXxqvvHOjQ3Xi9Lq1mvoEmgfSLJVmQyKGUlYQwBGRlSDzwRX6bfGf\\/AJI94r\\/7A15\\/6IevxQ+Hn\\/I\\/6H\\/2ELf\\/ANGLX13CuGo1nV9rFSty7q\\/c\\/cPCnKMDjMBjJ4ujGo1azlFNr3XtdafI\\/dSvyo+I\\/wDwU2+M9v8AEHXI7HxXFp1lFfzxwWselWbpBGHIVQzxM5wAOWJNfqvX4WfET\\/koGu\\/9hC4\\/9GNWHDGHpVa01VipWXVX6mPg7lOBxtTFfXKManKoW5oqVr817XT7I9i\\/4ed\\/HH\\/od\\/8Ayjaf\\/wDGK6z4a\\/8ABXj4qeEJkTXBofi22a4WSY3VmLW4EXG6ON4NiLkA4Zo3wT0IGK\\/Sr4af8k40D\\/sG2\\/8A6KWvGv2vP2AfCH7RHhLUrvTdJsNF8aBZbm11G1jW3+2TkE7bnaMSB2xl2BdeoPUNv\\/a2Xuo6VbDpK9rq3+S\\/MvDca8L4uv8AVMflcKUG7c0eXTzdowaXez+Rufsm\\/tueEv2s9JkTTTJpXiGyiWS80e6cGVAQMvEwwJYg3G4AEfLuVdy59kr8O\\/hx491v4B\\/FbT9c09nsta8O3hJRuOVJSSJh6MNyMPQmv2u8BeMrT4i+B9H1+wLGy1uyhvoNwwwSRA6gjscHmuLPcphhZRq0Pgl+D\\/yfQ+b8RuC6eR4mFXCNujVva+vK1ur9VrdPfddLvWooor54\\/Njnfi58R7T4Q\\/DDXvE99zbaHYy3bIOspVSVQe7NhR7kV+Wt5\\/wVC+N91eSyJ4xjt0kcssUej2JSIE5CjdCWwOgySfUmvqj\\/AILGfGUeFvgtpPg23kxd+KbsT3Kjta25DYP1lMRH+41fKHwR\\/ZOk+J\\/7IHxK8d+SzXfh6SFtNPIysP7y7PuPKcEe619hkWFw8MLLF4qKabSV1fra+vm9fQ\\/fvDvJMrw2Tf2nm9KM\\/bVIxjzRUtG+VWvt7zbfkrn2t\\/wTI\\/a11z9pbwDr1n4rvotQ8R6BdoxuFgjgM9tKDsJVAq5VkkBKgcbM88n6dr8kv+CaHxhPwl\\/au0OOWYxad4lzo90C2FJlx5RI6ZEoQZ7BjX62153EWCjh8VemrRkrr8n\\/AJ\\/M+C8TMghledSVCKjTqJSikrJdGl809OiaCivIv2zf2rU\\/ZE+G1hr7aG+vvf6ilglsLv7KFzHI5Yvsfpsxjb36ivNfht\\/wVV8J+Ivgtq\\/i\\/wAS6VL4ck0+\\/Fha6ZBeC+uNTYxq\\/wC7ykeMZO4kBV+X5ssBXm0svxFSl7enG8b2+fpv1PAwnCebYrCRx2GouVOUuVNNXbvba\\/N87WPqeivzd8Vf8FpfHV3rcj6J4U8J6fpxC+XBffaLydTjnMiSRKcnJHyDA45619F\\/sUf8FHNI\\/ai1RfDmsafH4e8XiHfFCkxkttU2oDI0JIBRgQzeUxYhRkO2Gx2V8hxtGk6s46LfW9j1818Os9y7CPGYil7i1lZpuPql26tXS321Ppeiuf8Aix4+T4V\\/DDxB4lltnvE0HTp78wK+wzeWhfbuwcZxjODjPQ18z\\/s7\\/wDBWLR\\/jJ4zvbDXvDUXg7TLDTZtRm1KXWPtKRiMr8pTyUPO7AwSScAKSa4aGBr14SqUo3Ud9v6+48LL+G8yx+FqYzCUnOFPSTTV7+Svd\\/JM+uKK\\/P74yf8ABaHUV15oPAPhfThp0EjD7ZrnmSvdrgYIhidPK53dXfIxwpyK3f2aP+Cwa+LfFVvo\\/wARtI0zR0vpikWsaczpbW2doRZopGdgud2ZQ+BlcoAC1d\\/+r+O9n7Tk+XX7v03PoqvhlxDTwn1uVDRK\\/LdOVvT9Fr5XPuSigHNfG3j\\/AP4K62\\/gT436t4RbwFNc2+kazJpMl8NYCu4jmMTSCLySOxIXfzxyO3BhMFXxU+ShG7+X6nzeTcPZhm0pxy+nzuCu9UrL5tfgfZNFfFP7Xf8AwVjb4W+PZ\\/Dnw\\/07R9am0uTy7\\/UtQ8yW2aQZDRRJG6E7TgFy2MhgFPDV7X+wZ+07qf7VvwTm8QazYWFhqdlqc2nTLZB1gl2pHIrKrszL8sqggseVJ4zgbTyrEww\\/1qatH8dfI78fwbmuCy6OaYqny05Wtr72u110v9\\/ke10V8\\/8A7XH\\/AAUQ8JfsrX50b7PN4l8V+WkraZbTCKO1VipHnzEN5ZKEsqhWY\\/LkKrq1fKWpf8Fn\\/iRLqM7WfhzwRBaNIxgjmt7qWSNM\\/KrOJ1DMBjJCqCecDpWuEyXF4mHtKcdO70O\\/JvDvPczoLFUKVoPZyajfzS3t52s+jP0tor4i\\/Z8\\/4LHad4m1Sy0v4haFFobz5R9Y06RntFcv8u+BsvGgXALB5DkZwAfl+uPiX8Rk8CfCTW\\/Fdnbf25FpWly6nDBbSjF6qRmRQrgEYYD7wB4OQD0rnxeXYjDSUa0bX27P5nkZtwtmmW4mOExlLllN2jqrS1to72++zXWx0tFfFfwm\\/wCCxll8Q\\/iZoeg6h4FOi2msXsdm18Nb+0fZjIdqsU8hMjcRn5hgZPOMV9qVOLwGIwrSrxtfbZ\\/kY53w7mOUVI0sxp8jkrrVO69YtoKK+dv21f8AgoHZfsgeJNG0hfDreJNQ1S2a8kj\\/ALQFoLaLdsQ58uQksyv2A+Xqe3UfsXftYH9r34fanr3\\/AAjr+HV07UDYCI3n2tZsRo+4P5ac\\/PgjHHHPNP8As\\/EfV\\/rXL7nfTvbbfcurwzmdLLo5tUpWoS2lePe21+b8D2Givnj9rn\\/go14U\\/Za1b+xIrOXxR4oCiSXT7a4EMVkp2kedNhtjMpLKoVjgDdtDKT8rXH\\/BZ34mNcOYvD\\/gVIixKK9pdMyr2BIuBk++B9BXThMkxeIh7SEdH30Pbyfw6z3MsOsVQpWg9nJpX80t7edrPpc\\/TCivlr9kn\\/gqF4d\\/aF8T2vhrXtN\\/4RXxHeYjsz9o86z1CTaMqrlVMbsd21GyDgAOWIB+pa48Xg62Gn7OtGzPm83yXG5XiPquPpuE9\\/Vd01o16BRXyx+2R\\/wU40f9nXxDc+GPDunReJfE9uhW5eSbZZabIVO1X2jdKwOCyKVwDjeGyB4X4F\\/4LSeMbbxHCfE3hXw1e6QfllTTBPa3K5I+ZWkkkU4GflKjPHzL1rtw2R4yvT9rCOj2u7XPpcv8OM\\/xuEWMo0fdauk2k2vJPv0va5wX\\/BWL\\/k8nVf8AsH2f\\/ooV9q\\/8Et\\/+TJ\\/Cv\\/Xa9\\/8ASuavgD9vn4x6H8fP2gH8U+HZ5JtN1LTLQqsqbJYHWPa8ci84dWBBwSDjIJUgn7\\/\\/AOCW\\/wDyZP4V\\/wCu17\\/6VzV72Z05U8mpwmrNNf8Atx+i8fUalHgvAUaqtKLppp7pqnK6Z9B0UUV8UfgAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQBwX7Vf\\/Jr3xI\\/7FbU\\/wD0klr0\\/wD4MY\\/+bov+5U\\/9zVeYftV\\/8mvfEj\\/sVtT\\/APSSWvT\\/APgxj\\/5ui\\/7lT\\/3NV93wl\\/Bqeq\\/I\\/o7wR\\/3HE\\/41+R+\\/1FFFfWn7cFFFFABRRRQAUUUUAFFFFABRRRQB+QH\\/AAerf8osvAP\\/AGVXTv8A00axX55\\/8ExP+THPBH\\/b\\/wD+nC5r9DP+D1b\\/AJRZeAf+yq6d\\/wCmjWK\\/PP8A4Jif8mOeCP8At\\/8A\\/Thc18xxX\\/ukf8S\\/Jn5D40\\/8iSl\\/19j\\/AOkTPe6KKK\\/Pj+YQooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDmvjP\\/wAke8V\\/9ga8\\/wDRD1+KHw8\\/5H\\/Q\\/wDsIW\\/\\/AKMWv2v+M\\/8AyR7xX\\/2Brz\\/0Q9fih8PP+R\\/0P\\/sIW\\/8A6MWvteD96v8A27\\/7cf0D4Of8i7HfL\\/0ln7qV+FnxE\\/5KBrv\\/AGELj\\/0Y1funX4WfET\\/koGu\\/9hC4\\/wDRjVz8Jfxqnp+ph4HfxMZ6U\\/8A28\\/bj4af8k40D\\/sG2\\/8A6KWtusT4af8AJONA\\/wCwbb\\/+ilqXx5440z4a+DNT1\\/WblbPS9It3urmVv4UUZ4HUsegA5JIA5NfM4jWtK3d\\/mfhsqc6ld06au27JLq2z8dP2ytNh0n9q34hQ2+3y\\/wC3rt\\/l6AtIWI\\/Ak1+n3\\/BPzUJtT\\/Y28BSTBg66eYhu\\/upK6L+G1RivyT+J3jab4l\\/EnXvEMwYS65qM98ysclfMkZ9v4Zx+Ffsl+y14CuPhh+zn4L0K7QxXmn6TAtzGV2mOVlDSKR7MzD8K+w4gTp5bRpT+LT8Iu5+++Ln7nJcFhar99Nf+Sws\\/xaO9oorhv2lfi7H8CPgX4l8VPtMmlWbNbKxwJJ2wkS\\/jIy\\/hmvioxcmox3Z+BYTDVMTXhh6KvKbSXq3ZH5jf8FJPjMPjL+1Zrht5DJp3hzGi2vPB8kt5rD6ymTB7gLX6Ofsj\\/BCD4U\\/sreHPCt7bKXuNOMmpxOPvy3ALyo3rjeU+iivx50XxHLpHiq01aSKHUJ7a7S7aO7DPHcsrhyJMEMQxHOCCcnmvqn\\/h838UP+gD4C\\/8Arv\\/AOSa+\\/zPKq88HTweH2jvrbp+t2z+l+NeDszxWXYTKsoS9nR3bla7StF\\/+lN+bPnL4yfD27+B\\/wAZdf8ADrvNHceH9RkghmztdlVsxSgjpuXaw+or9jP2dPirH8bvgb4X8UoUL6vYRyXAXok4+SZR\\/uyK4\\/Cvx+\\/aE+O+p\\/tIfEu48V6xp+j6fqd5DHFOumxSRxS+Wu1XId3O7aFHXoo4r7V\\/4Iw\\/GJdS8H+JvA1zOPP0ycarZRs3zGGTCShR6K4Qn3l96nPcLUq5dGpV+OFr\\/k\\/0fyOTxTyfEYrIKOPrx\\/fUbc9tfiSUreXNZ+hv\\/wDBaD\\/k3bw3\\/wBjFH\\/6TXFfF\\/7Gv7K17+1l8WF0WO6FhpVjGLvVLoEGSKDcBiNT1diQB2GcnOMH7Q\\/4LQf8m7eG\\/wDsYo\\/\\/AEmuK8l\\/4Irf8li8Y\\/8AYGT\\/ANHrWGUV50cpqVYbpv8AQ5eGszr5fwDUxmFdpxcrPteaV\\/lfTzPcfid\\/wSa+GmpfCa5sPDOn3um+Jre1\\/wBE1OXUJpWuZkTjzkZjFh2+9sRcZ+XA4r81\\/Avi+\\/8Ahh4+0vW7IvBqOh3sd1GMlSHjcHafY4wR6E1+6LyCJCzEKqjJJPAFfhd8RtQg1b4ha9dWhBtbnUbiWEqOCjSMVx+BFPhjG1606kK0nJaPXX+r9vI18JM6xuZ0sXhsxm6sVy\\/E2\\/i5k1d9HbbpqfsF+1Fqya9+x544vowRHeeFrudAewa2Zh\\/Ovx9+HXgLUfil460rw7pCRyalrNylrbrI4RN7HGSx6AdT9K\\/Wv4w2slj\\/AME\\/tdhlUpLD4HdHU9VYWWCK\\/ND9hz\\/k7v4ff9hmH+Zo4c\\/dwr8vR\\/lc5vC6vLCZHmFalvByav8A3YXX5H3n8OP+CSnwt8N+A1sPEFpf+ItblQmbU2vprYxOUAPkxxsqBAwLKHDnJOSRgD88v2mfgpL+zx8cvEHhGSZrqPSpx9nnYYM0DqskbHtu2MuccZBr9sK\\/Kb\\/grBqltqP7Y+qJbsjPaafaQ3G3HEnl7sH32stcvD+ZYmtjHGrJyTT+Xp27fM4\\/CnifNMfm9ahjasqkZQctXdJqUduiWrVlZbdj7r\\/4J2fEq5+KP7IvhS8vWaS70+J9MldiSZBA5jQknqdgTPvmvy\\/\\/AGq\\/+Tn\\/AIjf9jPqX\\/pVJX6Jf8Ej7WS3\\/ZAt2dSqz6vdvGT\\/ABLlVz+akfhX52\\/tV\\/8AJz\\/xG\\/7GfUv\\/AEqkrtyqCjm1dR21\\/NHr+HlCnR4mzSlSVoqTt5e+9PkfW\\/7BP\\/BMzw742+GVv4w+I9lPqX9vQCXTdKFxJbpBA2Ck7tEyuXcDKjdtCtkgkjZ9NWXgPwx+wn+zv4vu\\/DNnNHpunLd64LeeYy5mMY2xhj8235EQZJbA5JPNdb+zz\\/yQLwR\\/2ALH\\/wBJ464n\\/goXby3X7GXjxYchhYo5xn7qzRs3T2Br53HY6vicVKlUk+Vytbpa\\/wDWp+WYvP8AH53nccLjqrdKpViuS75Uua2i20XXd7vU\\/KnwV4e1n9o\\/44afp015Jca14v1VUnvJQXIeWT55WA7KCzHHYV+svgn9hz4UeBvB9vo0XgXw3qMcEexrrUrCK7vJyfvO0zqWyTk8EBf4QoAFfmb\\/AME\\/LiO2\\/bK8AtLjadQZBnH3mikC9fciv2Jr2uKMRUpunRpu0bdNP6sfb+MWb4vD43D4LDzcKahzWi2tbtdOyWna7PyM\\/wCCh37MGn\\/swfHQWWhrMnh3W7RdQsIpGZ\\/svzMjwb2JL7WXIJ52uoJJBJ+yP+CTfxMk+KH7Ll34e1RvtZ8M3kmnKJCW3WkiB0UknoC0iAdAqqB0rxr\\/AILX38EnxE8C2y4+0w6dcyyDHOxpVC\\/qj12X\\/BE\\/T5o\\/APju6JbyJtQtokH8O5Y3LY98Ov6VeIm8RkXtK2sl+kuX8j0OJMRUx\\/AVDG4t3qx5Wm97qThe\\/dx1ffc+JPj58M5\\/gd8cPEnhol0OiajJHbvn5jFndE+fUoUP41+v\\/wCzL8Uv+F0\\/AHwp4mLK02qafG1ztOQJ1\\/dyj8JFevh7\\/gsv8Iv7B+KXh\\/xnbxYg1+0NjdMBx58H3Sfdo2AH\\/XI1s\\/8ABOD9qRfhz+yT8TLS8mxL4IifVtP3jIInQqsY\\/wC26Dr3mpZhfHZTTrrWUbf\\/ACL+92foPjHDz4j4YwWaUFeonFP1k1CS\\/wDA0vkfPf8AwUA+Ko+Lv7WXiy\\/hmM1jYXA0u05yqpABGdvs0gkb\\/gdfoN8AtFT9jr9gKC+uIFF9pOhza7dxyDmS6kQzCJsdwSkf\\/ARz3r84f2SfhXJ8fv2mvC+h3Ie6gvb8Xeos\\/wA2+CPMs24\\/7SqVye7Cv0+\\/b7gaf9jjx8qDJGm7sewkQn9BU57y0qNDL15X+Wn4u\\/zQvEGVCnWyzhmHwJw5vS6hH8Oa5+WPwm8I6h+0\\/wDtF6RpWpX88t94t1YG\\/vGOZcOxeaQcY3BQ5A6ZA7V+rNh+w\\/8ACWw8FroX\\/CAeGZbQW5tjPLZI16ykHLG5x52\\/k\\/MHDDsRgV+R\\/wAG\\/hVqHxv+JukeFdLnsbXUNZlMMEt47JArBWb5iqsf4ccKeSK+kv8AhzH8UP8AoPeAv\\/A27\\/8AkavRzqlTk4U5V\\/ZJdLf5NbHveIGFw1bE0aVXM\\/qijG6gk9dX72ko9rLtZ23PC\\/2nfhgv7PH7SPiTw7pdzOIdDvxJYzb8SxRsqyxfMDncquo3cZK546V+p2m\\/tByJ+xZD8SLgI14vhcarIu0bWuRBkrgHGDLxjjr2r4l\\/4cx\\/FD\\/oPeAv\\/A27\\/wDkavqb47\\/Cy6+EP\\/BNLWfCn2gXt1oXhxLeaaIFVkKsrSEZ52\\/e69hXl5xiMNXw9GiqnPJNJv5Wb+bsfMca5jlObPLcLTrxrVFOMZNaXT5VJvtd62ufmD4O8M6r8afijp+lQyPc6x4n1JIPOkyxaWaTBkc9cZYsT6ZNfpfH\\/wAElvhIPh2NJay1U6x5Ow64L+UXJkznf5efIx2x5f3e+fmr4Q\\/YCv4NN\\/bG8AyXBAjbUvKGR\\/G8bon\\/AI8y1+xdb8TY2tQlTp0ZOK300\\/qxp4tcSZlgMfh8NgasqcVHm912u7tWdt0rbPTXVH4mftG\\/AjUv2bvi7qnhLU54buWwZXhuYuFuYXG6OTbklSQeVJ4ORkjBP6Yf8Et\\/+TJ\\/Cv8A12vf\\/Suavir\\/AIKxf8nk6r\\/2D7P\\/ANFCvtX\\/AIJb\\/wDJk\\/hX\\/rte\\/wDpXNRm1edbJ6dWpu2vyka+I+Nq4zg\\/BYut8U5U5P1dObZ9B0UUV8Ofz0FFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAcF+1X\\/AMmvfEj\\/ALFbU\\/8A0klr0\\/8A4MY\\/+bov+5U\\/9zVeYftV\\/wDJr3xI\\/wCxW1P\\/ANJJa9P\\/AODGP\\/m6L\\/uVP\\/c1X3fCX8Gp6r8j+jvBH\\/ccT\\/jX5H7\\/AFFFFfWn7cFFFFABRRRQAUUUUAFFFFABRRRQB+QH\\/B6t\\/wAosvAP\\/ZVdO\\/8ATRrFfnn\\/AMExP+THPBH\\/AG\\/\\/APpwua\\/Qz\\/g9W\\/5RZeAf+yq6d\\/6aNYr88\\/8AgmJ\\/yY54I\\/7f\\/wD04XNfMcV\\/7pH\\/ABL8mfkPjT\\/yJKX\\/AF9j\\/wCkTPe6KKK\\/Pj+YQooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDmvjP\\/yR7xX\\/ANga8\\/8ARD1+KHw8\\/wCR\\/wBD\\/wCwhb\\/+jFr9ztQsIdWsJ7W5iSe3uY2iljcZWRGGGUjuCCRXimi\\/8E3Pgr4e1m0v7XwUi3VlMlxCX1S9kUOjBlyjTFWGQOGBB7ivochzalgXN1U3zW2t0v5rufqHAXG2CyPCYmhioTk6lrcqTWzWt5Lv0ue41+FnxE\\/5KBrv\\/YQuP\\/RjV+6deJeJf+Cc3wY8XeIb3VL7wVE97qM73M7R6leQo0jksxCJMqLkk8KAPassjzOlgqkpVU2mun9Iy8OeM8Hw\\/Ou8ZCUlUUbcqT+G+92u58X6H\\/wWF+JmgaLZ2EOh+BWhsoEt0L2V0WKooUZxcgZwPSvIfj\\/+2R8Qf2lT5PibW2bS0maaHS7SMW9nCScgbV5k24wplZ2GTg8nP6Qf8OxPgd\\/0JH\\/lZ1D\\/AOP12fwy\\/ZA+GPweaB\\/D\\/gnQrW5tp\\/tMF3PB9ru4JOBlJ5i8q4xwAwA5wOTXqrOsspy9rSovm9F\\/mz6uj4gcI4Gf1nL8BL2vRtRX480mvkj4c\\/4J3f8ABPnVviN4r0rxx4wsJdP8KWLR3thbXKbZNZf70bBTyIPutuIw4wACCSP0roorwMyzOrjanPPRLZdj8v4p4pxee4z61idEtIxW0V+r7vr5KyRXw3\\/wWd+NH9neGfDXgK2f95qMh1e+AbkRJmOFSO4ZzIfrEPw+5K8x+Mv7G\\/w3\\/aB8Uw614u8NjVtTgtls0mF\\/dW+IlZmC7YpFU8u3JGeevArPLa9KjiY1qybUddO\\/T8dS+Dc2wWWZrTx2PjKUYXaUUm+a1lu1tvvvY+Mv+CRn7NejfE\\/UPFXifxNoema5plikemWcGoWiXMBmbEkjbHBG5VEYBx0kNfb3\\/DKvwv8A+ib+Av8Awn7T\\/wCN1rfCP4NeGvgT4PXQfCmlx6RpSyvP5KyySlpG+8xeRmZjwByTgADoK6eunM80nicQ6tNtR6I34p4txOZ5nVxlCc4Qfwq7VklZaJ2u935s+UP+Cif7IPhGX9l3WtU8LeEfDmh6t4ddNT83TNMhtZJYUysqM0aglQjM+D3QV8P\\/ALC\\/xkX4HftQ+F9Ynm8nTri4\\/s6\\/J+6IJ\\/3ZZvZGKv8A8Ar9h9X0q217SrmxvIUubS8iaCeFxlZY2BVlI9CCRXh0P\\/BMn4HwSq6+CBlCGGdXvyMj1Bnwa78qzqnRozoYu8lLtro1Z7tfI+q4X8QMJhsnr5TnCnUU72atJpSVmvektnqt9zzf\\/gs+f+MdvDf\\/AGMUf\\/pNcV8AfBn4qeJfgf41t\\/Ffhiee1u9MYCSQIWgkRjzFMOhR8dD6ZGCAR9\\/\\/APBZ8Y\\/Z18N\\/9jFH\\/wCk1xXi3\\/BHzwxp3jT4h+O9K1axtdS02+0NIri2uYxJFMvnrwVPB\\/8ArV6mS1lRyqdSSuk3p32PuOD8xpYDgeWKxFP2kE5c0e6c7Nfcw+MP\\/BX\\/AMSfEn4TXXh\\/TPC9n4e1PU7f7Le6ml+8\\/wAjIVk8iPYpiYk8MXfaM9Thh4T+yP8AAK\\/\\/AGjfjnougWsDvYrMt1qc23KW1qjAyM3bn7o9WYCvvTX\\/APgjt8KNY1me6t73xjpUEzbks7XUIWhgH91TLC8mP95yeete9\\/Bj4AeEP2fPD8mm+ENEttIt7hxJOys0k1wwzgvI5LtjJwCcDJwBWCzvA4WjL6jBqUvz89Xt2R4lXxB4fyrLamH4coyjUqd18La3bcm210Sur9lvk\\/tdoIv2U\\/iGqgKq+HL0AAcAeQ9fjJojXserQSad9qW+gcTQNbbvNjZPmDKV5BXGcjpjNfs5+19\\/yav8RP8AsXb7\\/wBEPX5X\\/sOf8nd\\/D7\\/sMw\\/zNVwtLlo1pdrfkzu8JcT9WyLG4i1+RuVu9oXt8z3fwF\\/wWZ8VeG\\/hyNN1fwtp2va\\/BCYoNWa8a3RyEAR5oAh3tu5bY8YboNvWvlXXNY8QfHj4pXF5Ks+r+I\\/FF+X8uJcvPNK3CIvYZIAHQAAdBX6efGH\\/AIJbfCv4veK5NY+z6x4aurgl7hNEuI4YLhzj5jHJHIqnj+AKDkkgk5rrv2dv2Gvh5+zLcLe6Bpc13rao0Z1bUpftF3tYnhcBY4+G25jRSV4JNKjnWW0IutQptTfT\\/g7W9PuOfB+IHC2VUKmKynCuNepvG2l\\/W7SjfpFdtF06L9mH4P8A\\/ChfgJ4Z8KMY3uNLtALp0HyvO5MkpHqN7Ng+gFfkd+1X\\/wAnP\\/Eb\\/sZ9S\\/8ASqSv2urxjxr\\/AME9vg98Q\\/Fuoa5q3g6O41PVZ2ubqZNSvIBLKxyzbI5VUEnJOAMkk9TXlZVm8aGJniMQm+a+3du\\/c+P4E44w+UY7E4zMYyk638qTd7tu92u52\\/7PP\\/JAvBH\\/AGALH\\/0njrV+JPgW0+J\\/w+1rw5f7hZ65ZS2MzL95FkQruHuM5H0rS0XRrbw7o9pp9lCtvZ2MKW8ES\\/dijRQqqPYAAVZrxq1TnqyqR6ts\\/PJ4mSxLxFLR83MvLW6PxE8aeDfE\\/wCzJ8Ymsb5JNK8R+Gb5J4JQuV3xuHimjLDDIcBlOMEdu1fdXhL\\/AILSeD5fB0D674W8Swa+IiJobBYJbNpBnBWR5FcK3BwUJXOPmxk\\/TXxn\\/Zu8D\\/tCWNvB4w8O2esfZGzBMzPDcQ9flWWNlkCnOSu7aSASOBXz8f8AgjJ8Lyf+Q749\\/wDA20\\/+Rq+pnm+BxtKMcdFqUeq\\/r8GftOL414Yz\\/D03n9KUatPrHZ33s0720vZrTo3qfC\\/7Rnx2179sL45Prcmnyi61AxafpelWu64aCPOI4EwAzszsScAbmc4AyAP0\\/wD2GP2dJP2Zf2fNN0O+Ef8Abd47ahqpQhgs8mPkBHB2IqJkEglSRwau\\/Ab9i74c\\/s4ypdeG\\/D8X9rrEkT6peObm8chWUsrNxEWDNuESorZ5GAAPVK4s1zinVoxwmFjy01+Nv69WfMcbcc0Mzw1LKsrpunhqdt93ZWWl3ZLXq23q9Twf\\/gpH8If+FufsneIFii8y\\/wDD4XWbXC5IMOfMA+sRkH1xX5Mab4hvdH0\\/ULS2uJIbbVYVt7uNek6LIkqg\\/R40P4fWv3cubaO9tpIZo0lhlUo6OoZXUjBBB4IIrwq4\\/wCCZfwPurh5G8DoGkYsQmrXyKCeeFEwAHsBgVWSZ1TwdOVKsm03dWt+rXZHpcAeIeEyXAzwOYQlOPNzR5Unba+8l1Sa87nzz\\/wRb+EXn6l4s8dXEXECJotk5\\/vNtln\\/ABAEIz\\/tH8fub4h+CbT4k+A9Z8P34zZa3ZTWM3HIWRCpI9xnI9xVT4U\\/CPw78EPBkHh\\/wtpkek6Rbu8iQJI8hLOxZmZ3LOxyerE4AA6ACujrzc1x31vEutHRdPRf1c+J4o4inmmcVMzpXirrlvulG3L310u99WfiZ4m8N+KP2T\\/jp9nuEl03xD4Vv1nt5CpCy7G3JIv96NwAfQg4r7j8C\\/8ABaTwdc+GoD4l8LeJrPWAMTppiwXNsxH8StJLGwzydpU46bm619NfGX9nHwR+0FYQweMPDtjrP2Y5hmYtFcQjrtWaMrIqk9VDYPGQcV4Bcf8ABGj4Wz3Duus+OoVdiwjS+tdqA9hm3JwPck+9e5LN8DjKUVjotSXVf1+B+k4rjThjP6FN5\\/RnGtBWvHZ97NPbrZrTo9zz\\/wCK\\/wDwWoy0kHgbwd3Qx3uuzf8Afam3hb8m873I7V9reOfCUHxV+GOraHdExW\\/iHTJbOVgNxjWaIqSPcbs\\/hXkXwq\\/4Jn\\/CH4VzWVyPD0viDUbF2kS71m5a5Lk5xvhG2BtoPGYuMA9RmvfK8fMauCajDBRate7fXa3X\\/I+B4lzHI3OguHqUqfs7tylvJ6We72tfpvsj8OPFnhjXvgN8VLrTbwTaZ4h8MX+A6ggxyxsGSRCRypwrq2MEEEcGvrN\\/+C1HiQ+APsi+DNKHiXyQn9pm+c2u\\/PL\\/AGbZnp283rz0+WvsP9on9jrwH+0\\/bK3ibSm\\/tOGIw2+qWcnkXsC5zjdgq4HOFkVlG5iACSa8z+H3\\/BJP4TeBvEceoXK+IvEiwgFLTVryNrYOGDBisMcZbpjaxKEMcqa92WdYDFUo\\/XYNyj+flqt+zP0rFcf8L5vhqdbO8NKVan0S0v5NSV4vtL7nu\\/zT+Ic3ibxVdJ4u8Sm\\/upfFMs00V\\/ddb8xsFdk9UU\\/IMDaNpUfdIH6jf8Et\\/wDkyfwr\\/wBdr3\\/0rmru\\/i5+yL8OvjpHpCeJ\\/DNvfJoMBtrBIbiezW2iO35FELoNo2jAPAxxjJrqvhn8MdC+Dngqz8O+G7BdM0bT9\\/kW6yPJs3MXbLOWYksxOST1rizPPKWKwaoRi4tO\\/S1le34W6HzXGniBhM7yelgqVJ05xnzW05VFKSSTve9mvspb+RvUUUV8yfk4UUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQBwX7Vf\\/Jr3xI\\/7FbU\\/wD0klr0\\/wD4MY\\/+bov+5U\\/9zVeYftV\\/8mvfEj\\/sVtT\\/APSSWvT\\/APgxj\\/5ui\\/7lT\\/3NV93wl\\/Bqeq\\/I\\/o7wR\\/3HE\\/41+R+\\/1FFFfWn7cFFFFABRRRQAUUUUAFFFFABRRRQB+QH\\/AAerf8osvAP\\/AGVXTv8A00axX55\\/8ExP+THPBH\\/b\\/wD+nC5r9DP+D1b\\/AJRZeAf+yq6d\\/wCmjWK\\/PP8A4Jif8mOeCP8At\\/8A\\/Thc18xxX\\/ukf8S\\/Jn5D40\\/8iSl\\/19j\\/AOkTPe6KKK\\/Pj+YQooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA+c\\/+CmX7Pvir9on4JaTpnhHT49T1Gw1iO8kt2uY4C0fkyoSGkZV4Ljgke1edf8ABL79kTx\\/+zx8QPE+p+MdETRre90+O1twb2C4aZ\\/M3HAid8ABed2PvDGecfaNFenRzStTwssJFLll9\\/5\\/ofW0eMsdSySWQxjH2UutnzbqW97brsFFFFeYfJHH\\/tCeDL74jfArxhoOmLG+o6xo91Z2yyPsVpHiZVBPbJI5r4C\\/ZM\\/4J6\\/Fz4e\\/tIeD9c1zwsmm6TpOoJdXVy+qWkojRQT92OVnJPAGB1IzgZNfpbRXp4HNa2EhOFNK0u\\/\\/AA59bkfGWOyrA18vw8YuFa9207q65dLNLbumFFFFeYfJBRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAcF+1X\\/wAmvfEj\\/sVtT\\/8ASSWvT\\/8Agxj\\/AObov+5U\\/wDc1XmH7Vf\\/ACa98SP+xW1P\\/wBJJa9P\\/wCDGP8A5ui\\/7lT\\/ANzVfd8JfwanqvyP6O8Ef9xxP+Nfkfv9RRRX1p+3BRRRQAUUUUAFFFFABRRRQAUUUUAfkB\\/werf8osvAP\\/ZVdO\\/9NGsV+ef\\/AATE\\/wCTHPBH\\/b\\/\\/AOnC5r9DP+D1b\\/lFl4B\\/7Krp3\\/po1ivzz\\/4Jif8AJjngj\\/t\\/\\/wDThc18xxX\\/ALpH\\/EvyZ+Q+NP8AyJKX\\/X2P\\/pEz3uiiivz4\\/mEKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAOC\\/ar\\/5Ne+JH\\/Yran\\/6SS16f\\/wAGMf8AzdF\\/3Kn\\/ALmq8w\\/ar\\/5Ne+JH\\/Yran\\/6SS16f\\/wAGMf8AzdF\\/3Kn\\/ALmq+74S\\/g1PVfkf0d4I\\/wC44n\\/GvyP3+ooor60\\/bgooooAKKKKACiiigAooooAKKKKAPyA\\/4PVv+UWXgH\\/squnf+mjWK\\/PP\\/gmJ\\/wAmOeCP+3\\/\\/ANOFzX6Gf8Hq3\\/KLLwD\\/ANlV07\\/00axX55\\/8ExP+THPBH\\/b\\/AP8Apwua+Y4r\\/wB0j\\/iX5M\\/IfGn\\/AJElL\\/r7H\\/0iZ73RRRX58fzCFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAHBftV\\/8mvfEj\\/sVtT\\/9JJa9P\\/4MY\\/8Am6L\\/ALlT\\/wBzVeYftV\\/8mvfEj\\/sVtT\\/9JJa9P\\/4MY\\/8Am6L\\/ALlT\\/wBzVfd8JfwanqvyP6O8Ef8AccT\\/AI1+R+\\/1FFFfWn7cFFFFABRRRQAUUUUAFFFFABRRRQB+QH\\/B6t\\/yiy8A\\/wDZVdO\\/9NGsV+ef\\/BMT\\/kxzwR\\/2\\/wD\\/AKcLmv0M\\/wCD1b\\/lFl4B\\/wCyq6d\\/6aNYr88\\/+CYn\\/Jjngj\\/t\\/wD\\/AE4XNfMcV\\/7pH\\/EvyZ+Q+NP\\/ACJKX\\/X2P\\/pEz3uiiivz4\\/mEKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAOC\\/ar\\/5Ne+JH\\/Yran\\/6SS16f\\/wYx\\/8AN0X\\/AHKn\\/uarzD9qv\\/k174kf9itqf\\/pJLXp\\/\\/BjH\\/wA3Rf8Acqf+5qvu+Ev4NT1X5H9HeCP+44n\\/ABr8j9\\/qKKK+tP24KKKKACiiigAooooAKKKKACiiigD8gP8Ag9W\\/5RZeAf8Asqunf+mjWK\\/PP\\/gmJ\\/yY54I\\/7f8A\\/wBOFzX6Gf8AB6t\\/yiy8A\\/8AZVdO\\/wDTRrFfnn\\/wTE\\/5Mc8Ef9v\\/AP6cLmvmOK\\/90j\\/iX5M\\/IfGn\\/kSUv+vsf\\/SJnvdFFFfnx\\/MIUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAcF+1X\\/ya98SP+xW1P8A9JJa9P8A+DGP\\/m6L\\/uVP\\/c1XmH7Vf\\/Jr3xI\\/7FbU\\/wD0klr0\\/wD4MY\\/+bov+5U\\/9zVfd8JfwanqvyP6O8Ef9xxP+Nfkfv9RRRX1p+3BRRRQAUUUUAFFFFABRRRQAUUUUAfkB\\/wAHq3\\/KLLwD\\/wBlV07\\/ANNGsV+ef\\/BMT\\/kxzwR\\/2\\/8A\\/pwua\\/Qz\\/g9W\\/wCUWXgH\\/squnf8Apo1ivzz\\/AOCYn\\/Jjngj\\/ALf\\/AP04XNfMcV\\/7pH\\/EvyZ+Q+NP\\/Ikpf9fY\\/wDpEz3uiiivz4\\/mEKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAOC\\/ar\\/AOTXviR\\/2K2p\\/wDpJLXp\\/wDwYx\\/83Rf9yp\\/7mq8w\\/ar\\/AOTXviR\\/2K2p\\/wDpJLXp\\/wDwYx\\/83Rf9yp\\/7mq+74S\\/g1PVfkf0d4I\\/7jif8a\\/I\\/f6iiivrT9uCiiigAooooAKKKKACiiigAooooA\\/ID\\/g9W\\/wCUWXgH\\/squnf8Apo1ivzz\\/AOCYn\\/Jjngj\\/ALf\\/AP04XNfoZ\\/werf8AKLLwD\\/2VXTv\\/AE0axX55\\/wDBMT\\/kxzwR\\/wBv\\/wD6cLmvmOK\\/90j\\/AIl+TPyHxp\\/5ElL\\/AK+x\\/wDSJnvdFFFfnx\\/MIUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAcF+1X\\/AMmvfEj\\/ALFbU\\/8A0klr0\\/8A4MY\\/+bov+5U\\/9zVeYftV\\/wDJr3xI\\/wCxW1P\\/ANJJa9P\\/AODGP\\/m6L\\/uVP\\/c1X3fCX8Gp6r8j+jvBH\\/ccT\\/jX5H7\\/AFFFFfWn7cFFFFABRRRQAUUUUAFFFFABRRRQB+QH\\/B6t\\/wAosvAP\\/ZVdO\\/8ATRrFfnn\\/AMExP+THPBH\\/AG\\/\\/APpwua\\/Qz\\/g9W\\/5RZeAf+yq6d\\/6aNYr88\\/8AgmJ\\/yY54I\\/7f\\/wD04XNfMcV\\/7pH\\/ABL8mfkPjT\\/yJKX\\/AF9j\\/wCkTPe6KKK\\/Pj+YQooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA4L9qv\\/AJNe+JH\\/AGK2p\\/8ApJLXp\\/8AwYx\\/83Rf9yp\\/7mq8w\\/ar\\/wCTXviR\\/wBitqf\\/AKSS16f\\/AMGMf\\/N0X\\/cqf+5qvu+Ev4NT1X5H9HeCP+44n\\/GvyP3+ooor60\\/bgooooAKKKKACiiigAooooAKKKKAPyA\\/4PVv+UWXgH\\/squnf+mjWK\\/PP\\/AIJif8mOeCP+3\\/8A9OFzX6Gf8Hq3\\/KLLwD\\/2VXTv\\/TRrFfnn\\/wAExP8AkxzwR\\/2\\/\\/wDpwua+Y4r\\/AN0j\\/iX5M\\/IfGn\\/kSUv+vsf\\/AEiZ73RRRX58fzCFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAHBftV\\/8AJr3xI\\/7FbU\\/\\/AEklr0\\/\\/AIMY\\/wDm6L\\/uVP8A3NV5h+1X\\/wAmvfEj\\/sVtT\\/8ASSWvT\\/8Agxj\\/AObov+5U\\/wDc1X3fCX8Gp6r8j+jvBH\\/ccT\\/jX5H7\\/UUUV9aftwUUUUAFFFFABRRRQAUUUUAFFFFAH5Af8Hq3\\/KLLwD\\/2VXTv\\/TRrFfnn\\/wAExP8AkxzwR\\/2\\/\\/wDpwua\\/Qz\\/g9W\\/5RZeAf+yq6d\\/6aNYr88\\/+CYn\\/ACY54I\\/7f\\/8A04XNfMcV\\/wC6R\\/xL8mfkPjT\\/AMiSl\\/19j\\/6RM97ooor8+P5hCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDgv2q\\/+TXviR\\/2K2p\\/+kkten\\/8ABjH\\/AM3Rf9yp\\/wC5qvMP2q\\/+TXviR\\/2K2p\\/+kkten\\/8ABjH\\/AM3Rf9yp\\/wC5qvu+Ev4NT1X5H9HeCP8AuOJ\\/xr8j9\\/qKKK+tP24KKKKACiiigAooooAKKKKACiiigD8gP+D1b\\/lFl4B\\/7Krp3\\/po1ivzz\\/4Jif8AJjngj\\/t\\/\\/wDThc1+hn\\/B6t\\/yiy8A\\/wDZVdO\\/9NGsV+BvwJ\\/4Ka+PP2e\\/hVpXhDRtJ8I3Om6R53ky3trcPO3mTPM24pOq\\/ekIGFHAH1rxM+wNXF4dU6O6d\\/wZ+feJHDmMzrLIYXApOSqKWrtooyX5tH6w0V+Zn\\/D5z4of9AHwF\\/4BXf8A8k0f8PnPih\\/0AfAX\\/gFd\\/wDyTXyf+rOO7L7z8T\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH3t+1X\\/wAmvfEj\\/sVtT\\/8ASSWvT\\/8Agxj\\/AObov+5U\\/wDc1X5R\\/ED\\/AIK0fEb4j+A9b8PX2i+CYrLXrCfTrh4LO6WVI5o2jYoTcEBgGOMgjPY1+rn\\/AAYx\\/wDN0X\\/cqf8Auar6jIMurYSnONbqz9i8NOF8fkmFrUscknKSas79D9\\/qKKK98\\/SwooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigD\\/9k=\&quot;,\&quot;documentType\&quot;:\&quot;driversLicense\&quot;,\&quot;documentCountryCode\&quot;:\&quot;USA\&quot;,\&quot;documentFrontImage\&quot;:\&quot;\\/9j\\/4AAQSkZJRgABAQEAYABgAAD\\/2wBDAAIBAQIBAQICAgICAgICAwUDAwMDAwYEBAMFBwYHBwcGBwcICQsJCAgKCAcHCg0KCgsMDAwMBwkODw0MDgsMDAz\\/2wBDAQICAgMDAwYDAwYMCAcIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAz\\/wAARCAHMAzMDASIAAhEBAxEB\\/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL\\/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6\\/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL\\/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6\\/9oADAMBAAIRAxEAPwD9\\/KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACivzg\\/4OgP29fix\\/wTu\\/YF8I+Nfg74r\\/4Q\\/wATap8QLPRLq8\\/syz1DzbOTTtSmeLy7qKWMZkt4W3BQ3yYBwSD+J\\/hj\\/g4O\\/wCClHjfQ4NT0bx54u1fTbnd5N3ZfDTR7iCXaxVtrppxU4ZSDg8EEdqmU4wV5OxjWxFKjHmrSUV5u35n9Z9Ffygf8P4\\/+Cnn\\/Q1ePf8Aw1mlf\\/K2j\\/h\\/H\\/wU8\\/6Grx7\\/AOGs0r\\/5W1n9Zo\\/zL70c39rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/KB\\/w\\/j\\/4Kef8AQ1ePf\\/DWaV\\/8raP+H8f\\/AAU8\\/wChq8e\\/+Gs0r\\/5W0fWaP8y+9B\\/a2B\\/5\\/Q\\/8CX+Z\\/V\\/RX8oH\\/D+P\\/gp5\\/wBDV49\\/8NZpX\\/yto\\/4fx\\/8ABTz\\/AKGrx7\\/4azSv\\/lbR9Zo\\/zL70H9rYH\\/n9D\\/wJf5n9X9Ffygf8P4\\/+Cnn\\/AENXj3\\/w1mlf\\/K2j\\/h\\/H\\/wAFPP8AoavHv\\/hrNK\\/+VtH1mj\\/MvvQf2tgf+f0P\\/Al\\/mf1f0V\\/Jxqv\\/AAX4\\/wCCmWg6Xc3194z8bWdlZxNPcXE\\/ww0iOKCNQWZ3Y6aAqgAkknAAr9SP+DUr\\/gqP8dv+ClH\\/AAvn\\/hdXjn\\/hNP8AhC\\/+Ee\\/sb\\/iS6fp32P7V\\/ann\\/wDHpBFv3fZ4fv7sbOMZObhUjPWLudFDE0ayvRmpW7NP8j9f6KKKs3CiiigAooooAKKKKACiiigAooooA\\/ID\\/g9W\\/wCUWXgH\\/squnf8Apo1ivzz\\/AOCYn\\/Jjngj\\/ALf\\/AP04XNfoZ\\/werf8AKLLwD\\/2VXTv\\/AE0axX55\\/wDBMT\\/kxzwR\\/wBv\\/wD6cLmvmOK\\/90j\\/AIl+TPyHxp\\/5ElL\\/AK+x\\/wDSJnvdFFFfnx\\/MIUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAcF+1X\\/AMmvfEj\\/ALFbU\\/8A0klr0\\/8A4MY\\/+bov+5U\\/9zVeYftV\\/wDJr3xI\\/wCxW1P\\/ANJJa9P\\/AODGP\\/m6L\\/uVP\\/c1X3fCX8Gp6r8j+jvBH\\/ccT\\/jX5H7\\/AFFFFfWn7cFFFFABRRRQAUUUUAFFFFABRRRQB+QH\\/B6t\\/wAosvAP\\/ZVdO\\/8ATRrFfnn\\/AMExP+THPBH\\/AG\\/\\/APpwua\\/Qz\\/g9W\\/5RZeAf+yq6d\\/6aNYr88\\/8AgmJ\\/yY54I\\/7f\\/wD04XNfMcV\\/7pH\\/ABL8mfkPjT\\/yJKX\\/AF9j\\/wCkTPe6KKK\\/Pj+YQooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA4L9qv\\/AJNe+JH\\/AGK2p\\/8ApJLXp\\/8AwYx\\/83Rf9yp\\/7mq8w\\/ar\\/wCTXviR\\/wBitqf\\/AKSS16f\\/AMGMf\\/N0X\\/cqf+5qvu+Ev4NT1X5H9HeCP+44n\\/GvyP3+ooor60\\/bgooooAKKKKACiiigAooooAKKKKAPyA\\/4PVv+UWXgH\\/squnf+mjWK\\/PP\\/AIJif8mOeCP+3\\/8A9OFzX6Gf8Hq3\\/KLLwD\\/2VXTv\\/TRrFfnn\\/wAExP8AkxzwR\\/2\\/\\/wDpwua+Y4r\\/AN0j\\/iX5M\\/IfGn\\/kSUv+vsf\\/AEiZ73RRRX58fzCFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAHBftV\\/8AJr3xI\\/7FbU\\/\\/AEklr0\\/\\/AIMY\\/wDm6L\\/uVP8A3NV5h+1X\\/wAmvfEj\\/sVtT\\/8ASSWvT\\/8Agxj\\/AObov+5U\\/wDc1X3fCX8Gp6r8j+jvBH\\/ccT\\/jX5H7\\/UUUV9aftwUUUUAFFFFABRRRQAUUUUAFFFFAH5Af8Hq3\\/KLLwD\\/2VXTv\\/TRrFfnn\\/wAExP8AkxzwR\\/2\\/\\/wDpwua\\/Qz\\/g9W\\/5RZeAf+yq6d\\/6aNYr88\\/+CYn\\/ACY54I\\/7f\\/8A04XNfMcV\\/wC6R\\/xL8mfkPjT\\/AMiSl\\/19j\\/6RM97ooor8+P5hCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDgv2q\\/+TXviR\\/2K2p\\/+kkten\\/8ABjH\\/AM3Rf9yp\\/wC5qvMP2q\\/+TXviR\\/2K2p\\/+kkten\\/8ABjH\\/AM3Rf9yp\\/wC5qvu+Ev4NT1X5H9HeCP8AuOJ\\/xr8j9\\/qKKK+tP24KKKKACiiigAooooAKKKKACiiigD8gP+D1b\\/lFl4B\\/7Krp3\\/po1ivzz\\/4Jif8AJjngj\\/t\\/\\/wDThc1+hn\\/B6t\\/yiy8A\\/wDZVdO\\/9NGsV+ef\\/BMT\\/kxzwR\\/2\\/wD\\/AKcLmvmOK\\/8AdI\\/4l+TPyHxp\\/wCRJS\\/6+x\\/9Ime90UUV+fH8whRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQBwX7Vf\\/Jr3xI\\/7FbU\\/\\/SSWvT\\/+DGP\\/AJui\\/wC5U\\/8Ac1XmH7Vf\\/Jr3xI\\/7FbU\\/\\/SSWvT\\/+DGP\\/AJui\\/wC5U\\/8Ac1X3fCX8Gp6r8j+jvBH\\/AHHE\\/wCNfkfv9RRRX1p+3BRRRQAUUUUAFFFFABRRRQAUUUUAfkB\\/werf8osvAP8A2VXTv\\/TRrFfnn\\/wTE\\/5Mc8Ef9v8A\\/wCnC5r9DP8Ag9W\\/5RZeAf8Asqunf+mjWK\\/PP\\/gmJ\\/yY54I\\/7f8A\\/wBOFzXzHFf+6R\\/xL8mfkPjT\\/wAiSl\\/19j\\/6RM97ooor8+P5hCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDgv2q\\/+TXviR\\/2K2p\\/+kkten\\/8GMf\\/ADdF\\/wByp\\/7mq8w\\/ar\\/5Ne+JH\\/Yran\\/6SS16f\\/wYx\\/8AN0X\\/AHKn\\/uar7vhL+DU9V+R\\/R3gj\\/uOJ\\/wAa\\/I\\/f6iiivrT9uCiiigAooooAKKKKACiiigAooooA\\/ID\\/AIPVv+UWXgH\\/ALKrp3\\/po1ivzz\\/4Jif8mOeCP+3\\/AP8AThc1+hn\\/AAerf8osvAP\\/AGVXTv8A00axX55\\/8ExP+THPBH\\/b\\/wD+nC5r5jiv\\/dI\\/4l+TPyHxp\\/5ElL\\/r7H\\/0iZ73RRRX58fzCFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAHBftV\\/8mvfEj\\/sVtT\\/APSSWvT\\/APgxj\\/5ui\\/7lT\\/3NV5h+1X\\/ya98SP+xW1P8A9JJa9P8A+DGP\\/m6L\\/uVP\\/c1X3fCX8Gp6r8j+jvBH\\/ccT\\/jX5H7\\/UUUV9aftwUUUUAFFFFABRRRQAUUUUAFFFFAH5Af8AB6t\\/yiy8A\\/8AZVdO\\/wDTRrFfnn\\/wTE\\/5Mc8Ef9v\\/AP6cLmv0M\\/4PVv8AlFl4B\\/7Krp3\\/AKaNYr88\\/wDgmJ\\/yY54I\\/wC3\\/wD9OFzXzHFf+6R\\/xL8mfkPjT\\/yJKX\\/X2P8A6RM97ooor8+P5hCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDgv2q\\/wDk174kf9itqf8A6SS16f8A8GMf\\/N0X\\/cqf+5qvMP2q\\/wDk174kf9itqf8A6SS16f8A8GMf\\/N0X\\/cqf+5qvu+Ev4NT1X5H9HeCP+44n\\/GvyP3+ooor60\\/bgooooAKKKKACiiigAooooAKKKKAPyA\\/4PVv8AlFl4B\\/7Krp3\\/AKaNYr88\\/wDgmJ\\/yY54I\\/wC3\\/wD9OFzX6Gf8Hq3\\/ACiy8A\\/9lV07\\/wBNGsV+ef8AwTE\\/5Mc8Ef8Ab\\/8A+nC5r5jiv\\/dI\\/wCJfkz8h8af+RJS\\/wCvsf8A0iZ73RRRX58fzCFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUVzHjL43eDPh1qq2PiDxd4Y0K9eMTLb6jqsFrKyEkBgrsDtJBGcY4PpW34f8R6f4t0aDUdKvrPU9Pul3wXVpMs0My5xlXUlSMg9D2q3CSjzNaG88NWhBVJwai9nZ2foy5RRRUGAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQBwX7Vf\\/Jr3xI\\/7FbU\\/wD0klr0\\/wD4MY\\/+bov+5U\\/9zVeYftV\\/8mvfEj\\/sVtT\\/APSSWvT\\/APgxj\\/5ui\\/7lT\\/3NV93wl\\/Bqeq\\/I\\/o7wR\\/3HE\\/41+R+\\/1FFFfWn7cFFFFABRRRQAUUUUAFFFFABRRRQB+QH\\/AAerf8osvAP\\/AGVXTv8A00axX55\\/8ExP+THPBH\\/b\\/wD+nC5r9DP+D1b\\/AJRZeAf+yq6d\\/wCmjWK\\/PP8A4Jif8mOeCP8At\\/8A\\/Thc18xxX\\/ukf8S\\/Jn5D40\\/8iSl\\/19j\\/AOkTPe6KKK\\/Pj+YQooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDH+Ieuz+F\\/h\\/rmp22w3GnafcXUQcZXekbMMj0yBX5eeA\\/+CmXxqvvHOjQ3Xi9Lq1mvoEmgfSLJVmQyKGUlYQwBGRlSDzwRX6bfGf\\/AJI94r\\/7A15\\/6IevxQ+Hn\\/I\\/6H\\/2ELf\\/ANGLX13CuGo1nV9rFSty7q\\/c\\/cPCnKMDjMBjJ4ujGo1azlFNr3XtdafI\\/dSvyo+I\\/wDwU2+M9v8AEHXI7HxXFp1lFfzxwWselWbpBGHIVQzxM5wAOWJNfqvX4WfET\\/koGu\\/9hC4\\/9GNWHDGHpVa01VipWXVX6mPg7lOBxtTFfXKManKoW5oqVr817XT7I9i\\/4ed\\/HH\\/od\\/8Ayjaf\\/wDGK6z4a\\/8ABXj4qeEJkTXBofi22a4WSY3VmLW4EXG6ON4NiLkA4Zo3wT0IGK\\/Sr4af8k40D\\/sG2\\/8A6KWvGv2vP2AfCH7RHhLUrvTdJsNF8aBZbm11G1jW3+2TkE7bnaMSB2xl2BdeoPUNv\\/a2Xuo6VbDpK9rq3+S\\/MvDca8L4uv8AVMflcKUG7c0eXTzdowaXez+Rufsm\\/tueEv2s9JkTTTJpXiGyiWS80e6cGVAQMvEwwJYg3G4AEfLuVdy59kr8O\\/hx491v4B\\/FbT9c09nsta8O3hJRuOVJSSJh6MNyMPQmv2u8BeMrT4i+B9H1+wLGy1uyhvoNwwwSRA6gjscHmuLPcphhZRq0Pgl+D\\/yfQ+b8RuC6eR4mFXCNujVva+vK1ur9VrdPfddLvWooor54\\/Njnfi58R7T4Q\\/DDXvE99zbaHYy3bIOspVSVQe7NhR7kV+Wt5\\/wVC+N91eSyJ4xjt0kcssUej2JSIE5CjdCWwOgySfUmvqj\\/AILGfGUeFvgtpPg23kxd+KbsT3Kjta25DYP1lMRH+41fKHwR\\/ZOk+J\\/7IHxK8d+SzXfh6SFtNPIysP7y7PuPKcEe619hkWFw8MLLF4qKabSV1fra+vm9fQ\\/fvDvJMrw2Tf2nm9KM\\/bVIxjzRUtG+VWvt7zbfkrn2t\\/wTI\\/a11z9pbwDr1n4rvotQ8R6BdoxuFgjgM9tKDsJVAq5VkkBKgcbM88n6dr8kv+CaHxhPwl\\/au0OOWYxad4lzo90C2FJlx5RI6ZEoQZ7BjX62153EWCjh8VemrRkrr8n\\/AJ\\/M+C8TMghledSVCKjTqJSikrJdGl809OiaCivIv2zf2rU\\/ZE+G1hr7aG+vvf6ilglsLv7KFzHI5Yvsfpsxjb36ivNfht\\/wVV8J+Ivgtq\\/i\\/wAS6VL4ck0+\\/Fha6ZBeC+uNTYxq\\/wC7ykeMZO4kBV+X5ssBXm0svxFSl7enG8b2+fpv1PAwnCebYrCRx2GouVOUuVNNXbvba\\/N87WPqeivzd8Vf8FpfHV3rcj6J4U8J6fpxC+XBffaLydTjnMiSRKcnJHyDA45619F\\/sUf8FHNI\\/ai1RfDmsafH4e8XiHfFCkxkttU2oDI0JIBRgQzeUxYhRkO2Gx2V8hxtGk6s46LfW9j1818Os9y7CPGYil7i1lZpuPql26tXS321Ppeiuf8Aix4+T4V\\/DDxB4lltnvE0HTp78wK+wzeWhfbuwcZxjODjPQ18z\\/s7\\/wDBWLR\\/jJ4zvbDXvDUXg7TLDTZtRm1KXWPtKRiMr8pTyUPO7AwSScAKSa4aGBr14SqUo3Ud9v6+48LL+G8yx+FqYzCUnOFPSTTV7+Svd\\/JM+uKK\\/P74yf8ABaHUV15oPAPhfThp0EjD7ZrnmSvdrgYIhidPK53dXfIxwpyK3f2aP+Cwa+LfFVvo\\/wARtI0zR0vpikWsaczpbW2doRZopGdgud2ZQ+BlcoAC1d\\/+r+O9n7Tk+XX7v03PoqvhlxDTwn1uVDRK\\/LdOVvT9Fr5XPuSigHNfG3j\\/AP4K62\\/gT436t4RbwFNc2+kazJpMl8NYCu4jmMTSCLySOxIXfzxyO3BhMFXxU+ShG7+X6nzeTcPZhm0pxy+nzuCu9UrL5tfgfZNFfFP7Xf8AwVjb4W+PZ\\/Dnw\\/07R9am0uTy7\\/UtQ8yW2aQZDRRJG6E7TgFy2MhgFPDV7X+wZ+07qf7VvwTm8QazYWFhqdlqc2nTLZB1gl2pHIrKrszL8sqggseVJ4zgbTyrEww\\/1qatH8dfI78fwbmuCy6OaYqny05Wtr72u110v9\\/ke10V8\\/8A7XH\\/AAUQ8JfsrX50b7PN4l8V+WkraZbTCKO1VipHnzEN5ZKEsqhWY\\/LkKrq1fKWpf8Fn\\/iRLqM7WfhzwRBaNIxgjmt7qWSNM\\/KrOJ1DMBjJCqCecDpWuEyXF4mHtKcdO70O\\/JvDvPczoLFUKVoPZyajfzS3t52s+jP0tor4i\\/Z8\\/4LHad4m1Sy0v4haFFobz5R9Y06RntFcv8u+BsvGgXALB5DkZwAfl+uPiX8Rk8CfCTW\\/Fdnbf25FpWly6nDBbSjF6qRmRQrgEYYD7wB4OQD0rnxeXYjDSUa0bX27P5nkZtwtmmW4mOExlLllN2jqrS1to72++zXWx0tFfFfwm\\/wCCxll8Q\\/iZoeg6h4FOi2msXsdm18Nb+0fZjIdqsU8hMjcRn5hgZPOMV9qVOLwGIwrSrxtfbZ\\/kY53w7mOUVI0sxp8jkrrVO69YtoKK+dv21f8AgoHZfsgeJNG0hfDreJNQ1S2a8kj\\/ALQFoLaLdsQ58uQksyv2A+Xqe3UfsXftYH9r34fanr3\\/AAjr+HV07UDYCI3n2tZsRo+4P5ac\\/PgjHHHPNP8As\\/EfV\\/rXL7nfTvbbfcurwzmdLLo5tUpWoS2lePe21+b8D2Givnj9rn\\/go14U\\/Za1b+xIrOXxR4oCiSXT7a4EMVkp2kedNhtjMpLKoVjgDdtDKT8rXH\\/BZ34mNcOYvD\\/gVIixKK9pdMyr2BIuBk++B9BXThMkxeIh7SEdH30Pbyfw6z3MsOsVQpWg9nJpX80t7edrPpc\\/TCivlr9kn\\/gqF4d\\/aF8T2vhrXtN\\/4RXxHeYjsz9o86z1CTaMqrlVMbsd21GyDgAOWIB+pa48Xg62Gn7OtGzPm83yXG5XiPquPpuE9\\/Vd01o16BRXyx+2R\\/wU40f9nXxDc+GPDunReJfE9uhW5eSbZZabIVO1X2jdKwOCyKVwDjeGyB4X4F\\/4LSeMbbxHCfE3hXw1e6QfllTTBPa3K5I+ZWkkkU4GflKjPHzL1rtw2R4yvT9rCOj2u7XPpcv8OM\\/xuEWMo0fdauk2k2vJPv0va5wX\\/BWL\\/k8nVf8AsH2f\\/ooV9q\\/8Et\\/+TJ\\/Cv\\/Xa9\\/8ASuavgD9vn4x6H8fP2gH8U+HZ5JtN1LTLQqsqbJYHWPa8ci84dWBBwSDjIJUgn7\\/\\/AOCW\\/wDyZP4V\\/wCu17\\/6VzV72Z05U8mpwmrNNf8Atx+i8fUalHgvAUaqtKLppp7pqnK6Z9B0UUV8UfgAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQBwX7Vf\\/Jr3xI\\/7FbU\\/wD0klr0\\/wD4MY\\/+bov+5U\\/9zVeYftV\\/8mvfEj\\/sVtT\\/APSSWvT\\/APgxj\\/5ui\\/7lT\\/3NV93wl\\/Bqeq\\/I\\/o7wR\\/3HE\\/41+R+\\/1FFFfWn7cFFFFABRRRQAUUUUAFFFFABRRRQB+QH\\/AAerf8osvAP\\/AGVXTv8A00axX55\\/8ExP+THPBH\\/b\\/wD+nC5r9DP+D1b\\/AJRZeAf+yq6d\\/wCmjWK\\/PP8A4Jif8mOeCP8At\\/8A\\/Thc18xxX\\/ukf8S\\/Jn5D40\\/8iSl\\/19j\\/AOkTPe6KKK\\/Pj+YQooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDmvjP\\/wAke8V\\/9ga8\\/wDRD1+KHw8\\/5H\\/Q\\/wDsIW\\/\\/AKMWv2v+M\\/8AyR7xX\\/2Brz\\/0Q9fih8PP+R\\/0P\\/sIW\\/8A6MWvteD96v8A27\\/7cf0D4Of8i7HfL\\/0ln7qV+FnxE\\/5KBrv\\/AGELj\\/0Y1funX4WfET\\/koGu\\/9hC4\\/wDRjVz8Jfxqnp+ph4HfxMZ6U\\/8A28\\/bj4af8k40D\\/sG2\\/8A6KWtusT4af8AJONA\\/wCwbb\\/+ilqXx5440z4a+DNT1\\/WblbPS9It3urmVv4UUZ4HUsegA5JIA5NfM4jWtK3d\\/mfhsqc6ld06au27JLq2z8dP2ytNh0n9q34hQ2+3y\\/wC3rt\\/l6AtIWI\\/Ak1+n3\\/BPzUJtT\\/Y28BSTBg66eYhu\\/upK6L+G1RivyT+J3jab4l\\/EnXvEMwYS65qM98ysclfMkZ9v4Zx+Ffsl+y14CuPhh+zn4L0K7QxXmn6TAtzGV2mOVlDSKR7MzD8K+w4gTp5bRpT+LT8Iu5+++Ln7nJcFhar99Nf+Sws\\/xaO9oorhv2lfi7H8CPgX4l8VPtMmlWbNbKxwJJ2wkS\\/jIy\\/hmvioxcmox3Z+BYTDVMTXhh6KvKbSXq3ZH5jf8FJPjMPjL+1Zrht5DJp3hzGi2vPB8kt5rD6ymTB7gLX6Ofsj\\/BCD4U\\/sreHPCt7bKXuNOMmpxOPvy3ALyo3rjeU+iivx50XxHLpHiq01aSKHUJ7a7S7aO7DPHcsrhyJMEMQxHOCCcnmvqn\\/h838UP+gD4C\\/8Arv\\/AOSa+\\/zPKq88HTweH2jvrbp+t2z+l+NeDszxWXYTKsoS9nR3bla7StF\\/+lN+bPnL4yfD27+B\\/wAZdf8ADrvNHceH9RkghmztdlVsxSgjpuXaw+or9jP2dPirH8bvgb4X8UoUL6vYRyXAXok4+SZR\\/uyK4\\/Cvx+\\/aE+O+p\\/tIfEu48V6xp+j6fqd5DHFOumxSRxS+Wu1XId3O7aFHXoo4r7V\\/4Iw\\/GJdS8H+JvA1zOPP0ycarZRs3zGGTCShR6K4Qn3l96nPcLUq5dGpV+OFr\\/k\\/0fyOTxTyfEYrIKOPrx\\/fUbc9tfiSUreXNZ+hv\\/wDBaD\\/k3bw3\\/wBjFH\\/6TXFfF\\/7Gv7K17+1l8WF0WO6FhpVjGLvVLoEGSKDcBiNT1diQB2GcnOMH7Q\\/4LQf8m7eG\\/wDsYo\\/\\/AEmuK8l\\/4Irf8li8Y\\/8AYGT\\/ANHrWGUV50cpqVYbpv8AQ5eGszr5fwDUxmFdpxcrPteaV\\/lfTzPcfid\\/wSa+GmpfCa5sPDOn3um+Jre1\\/wBE1OXUJpWuZkTjzkZjFh2+9sRcZ+XA4r81\\/Avi+\\/8Ahh4+0vW7IvBqOh3sd1GMlSHjcHafY4wR6E1+6LyCJCzEKqjJJPAFfhd8RtQg1b4ha9dWhBtbnUbiWEqOCjSMVx+BFPhjG1606kK0nJaPXX+r9vI18JM6xuZ0sXhsxm6sVy\\/E2\\/i5k1d9HbbpqfsF+1Fqya9+x544vowRHeeFrudAewa2Zh\\/Ovx9+HXgLUfil460rw7pCRyalrNylrbrI4RN7HGSx6AdT9K\\/Wv4w2slj\\/AME\\/tdhlUpLD4HdHU9VYWWCK\\/ND9hz\\/k7v4ff9hmH+Zo4c\\/dwr8vR\\/lc5vC6vLCZHmFalvByav8A3YXX5H3n8OP+CSnwt8N+A1sPEFpf+ItblQmbU2vprYxOUAPkxxsqBAwLKHDnJOSRgD88v2mfgpL+zx8cvEHhGSZrqPSpx9nnYYM0DqskbHtu2MuccZBr9sK\\/Kb\\/grBqltqP7Y+qJbsjPaafaQ3G3HEnl7sH32stcvD+ZYmtjHGrJyTT+Xp27fM4\\/CnifNMfm9ahjasqkZQctXdJqUduiWrVlZbdj7r\\/4J2fEq5+KP7IvhS8vWaS70+J9MldiSZBA5jQknqdgTPvmvy\\/\\/AGq\\/+Tn\\/AIjf9jPqX\\/pVJX6Jf8Ej7WS3\\/ZAt2dSqz6vdvGT\\/ABLlVz+akfhX52\\/tV\\/8AJz\\/xG\\/7GfUv\\/AEqkrtyqCjm1dR21\\/NHr+HlCnR4mzSlSVoqTt5e+9PkfW\\/7BP\\/BMzw742+GVv4w+I9lPqX9vQCXTdKFxJbpBA2Ck7tEyuXcDKjdtCtkgkjZ9NWXgPwx+wn+zv4vu\\/DNnNHpunLd64LeeYy5mMY2xhj8235EQZJbA5JPNdb+zz\\/yQLwR\\/2ALH\\/wBJ464n\\/goXby3X7GXjxYchhYo5xn7qzRs3T2Br53HY6vicVKlUk+Vytbpa\\/wDWp+WYvP8AH53nccLjqrdKpViuS75Uua2i20XXd7vU\\/KnwV4e1n9o\\/44afp015Jca14v1VUnvJQXIeWT55WA7KCzHHYV+svgn9hz4UeBvB9vo0XgXw3qMcEexrrUrCK7vJyfvO0zqWyTk8EBf4QoAFfmb\\/AME\\/LiO2\\/bK8AtLjadQZBnH3mikC9fciv2Jr2uKMRUpunRpu0bdNP6sfb+MWb4vD43D4LDzcKahzWi2tbtdOyWna7PyM\\/wCCh37MGn\\/swfHQWWhrMnh3W7RdQsIpGZ\\/svzMjwb2JL7WXIJ52uoJJBJ+yP+CTfxMk+KH7Ll34e1RvtZ8M3kmnKJCW3WkiB0UknoC0iAdAqqB0rxr\\/AILX38EnxE8C2y4+0w6dcyyDHOxpVC\\/qj12X\\/BE\\/T5o\\/APju6JbyJtQtokH8O5Y3LY98Ov6VeIm8RkXtK2sl+kuX8j0OJMRUx\\/AVDG4t3qx5Wm97qThe\\/dx1ffc+JPj58M5\\/gd8cPEnhol0OiajJHbvn5jFndE+fUoUP41+v\\/wCzL8Uv+F0\\/AHwp4mLK02qafG1ztOQJ1\\/dyj8JFevh7\\/gsv8Iv7B+KXh\\/xnbxYg1+0NjdMBx58H3Sfdo2AH\\/XI1s\\/8ABOD9qRfhz+yT8TLS8mxL4IifVtP3jIInQqsY\\/wC26Dr3mpZhfHZTTrrWUbf\\/ACL+92foPjHDz4j4YwWaUFeonFP1k1CS\\/wDA0vkfPf8AwUA+Ko+Lv7WXiy\\/hmM1jYXA0u05yqpABGdvs0gkb\\/gdfoN8AtFT9jr9gKC+uIFF9pOhza7dxyDmS6kQzCJsdwSkf\\/ARz3r84f2SfhXJ8fv2mvC+h3Ie6gvb8Xeos\\/wA2+CPMs24\\/7SqVye7Cv0+\\/b7gaf9jjx8qDJGm7sewkQn9BU57y0qNDL15X+Wn4u\\/zQvEGVCnWyzhmHwJw5vS6hH8Oa5+WPwm8I6h+0\\/wDtF6RpWpX88t94t1YG\\/vGOZcOxeaQcY3BQ5A6ZA7V+rNh+w\\/8ACWw8FroX\\/CAeGZbQW5tjPLZI16ykHLG5x52\\/k\\/MHDDsRgV+R\\/wAG\\/hVqHxv+JukeFdLnsbXUNZlMMEt47JArBWb5iqsf4ccKeSK+kv8AhzH8UP8AoPeAv\\/A27\\/8AkavRzqlTk4U5V\\/ZJdLf5NbHveIGFw1bE0aVXM\\/qijG6gk9dX72ko9rLtZ23PC\\/2nfhgv7PH7SPiTw7pdzOIdDvxJYzb8SxRsqyxfMDncquo3cZK546V+p2m\\/tByJ+xZD8SLgI14vhcarIu0bWuRBkrgHGDLxjjr2r4l\\/4cx\\/FD\\/oPeAv\\/A27\\/wDkavqb47\\/Cy6+EP\\/BNLWfCn2gXt1oXhxLeaaIFVkKsrSEZ52\\/e69hXl5xiMNXw9GiqnPJNJv5Wb+bsfMca5jlObPLcLTrxrVFOMZNaXT5VJvtd62ufmD4O8M6r8afijp+lQyPc6x4n1JIPOkyxaWaTBkc9cZYsT6ZNfpfH\\/wAElvhIPh2NJay1U6x5Ow64L+UXJkznf5efIx2x5f3e+fmr4Q\\/YCv4NN\\/bG8AyXBAjbUvKGR\\/G8bon\\/AI8y1+xdb8TY2tQlTp0ZOK300\\/qxp4tcSZlgMfh8NgasqcVHm912u7tWdt0rbPTXVH4mftG\\/AjUv2bvi7qnhLU54buWwZXhuYuFuYXG6OTbklSQeVJ4ORkjBP6Yf8Et\\/+TJ\\/Cv8A12vf\\/Suavir\\/AIKxf8nk6r\\/2D7P\\/ANFCvtX\\/AIJb\\/wDJk\\/hX\\/rte\\/wDpXNRm1edbJ6dWpu2vyka+I+Nq4zg\\/BYut8U5U5P1dObZ9B0UUV8Ofz0FFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAcF+1X\\/AMmvfEj\\/ALFbU\\/8A0klr0\\/8A4MY\\/+bov+5U\\/9zVeYftV\\/wDJr3xI\\/wCxW1P\\/ANJJa9P\\/AODGP\\/m6L\\/uVP\\/c1X3fCX8Gp6r8j+jvBH\\/ccT\\/jX5H7\\/AFFFFfWn7cFFFFABRRRQAUUUUAFFFFABRRRQB+QH\\/B6t\\/wAosvAP\\/ZVdO\\/8ATRrFfnn\\/AMExP+THPBH\\/AG\\/\\/APpwua\\/Qz\\/g9W\\/5RZeAf+yq6d\\/6aNYr88\\/8AgmJ\\/yY54I\\/7f\\/wD04XNfMcV\\/7pH\\/ABL8mfkPjT\\/yJKX\\/AF9j\\/wCkTPe6KKK\\/Pj+YQooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDmvjP\\/yR7xX\\/ANga8\\/8ARD1+KHw8\\/wCR\\/wBD\\/wCwhb\\/+jFr9ztQsIdWsJ7W5iSe3uY2iljcZWRGGGUjuCCRXimi\\/8E3Pgr4e1m0v7XwUi3VlMlxCX1S9kUOjBlyjTFWGQOGBB7ivochzalgXN1U3zW2t0v5rufqHAXG2CyPCYmhioTk6lrcqTWzWt5Lv0ue41+FnxE\\/5KBrv\\/YQuP\\/RjV+6deJeJf+Cc3wY8XeIb3VL7wVE97qM73M7R6leQo0jksxCJMqLkk8KAPassjzOlgqkpVU2mun9Iy8OeM8Hw\\/Ou8ZCUlUUbcqT+G+92u58X6H\\/wWF+JmgaLZ2EOh+BWhsoEt0L2V0WKooUZxcgZwPSvIfj\\/+2R8Qf2lT5PibW2bS0maaHS7SMW9nCScgbV5k24wplZ2GTg8nP6Qf8OxPgd\\/0JH\\/lZ1D\\/AOP12fwy\\/ZA+GPweaB\\/D\\/gnQrW5tp\\/tMF3PB9ru4JOBlJ5i8q4xwAwA5wOTXqrOsspy9rSovm9F\\/mz6uj4gcI4Gf1nL8BL2vRtRX480mvkj4c\\/4J3f8ABPnVviN4r0rxx4wsJdP8KWLR3thbXKbZNZf70bBTyIPutuIw4wACCSP0roorwMyzOrjanPPRLZdj8v4p4pxee4z61idEtIxW0V+r7vr5KyRXw3\\/wWd+NH9neGfDXgK2f95qMh1e+AbkRJmOFSO4ZzIfrEPw+5K8x+Mv7G\\/w3\\/aB8Uw614u8NjVtTgtls0mF\\/dW+IlZmC7YpFU8u3JGeevArPLa9KjiY1qybUddO\\/T8dS+Dc2wWWZrTx2PjKUYXaUUm+a1lu1tvvvY+Mv+CRn7NejfE\\/UPFXifxNoema5plikemWcGoWiXMBmbEkjbHBG5VEYBx0kNfb3\\/DKvwv8A+ib+Av8Awn7T\\/wCN1rfCP4NeGvgT4PXQfCmlx6RpSyvP5KyySlpG+8xeRmZjwByTgADoK6eunM80nicQ6tNtR6I34p4txOZ5nVxlCc4Qfwq7VklZaJ2u935s+UP+Cif7IPhGX9l3WtU8LeEfDmh6t4ddNT83TNMhtZJYUysqM0aglQjM+D3QV8P\\/ALC\\/xkX4HftQ+F9Ynm8nTri4\\/s6\\/J+6IJ\\/3ZZvZGKv8A8Ar9h9X0q217SrmxvIUubS8iaCeFxlZY2BVlI9CCRXh0P\\/BMn4HwSq6+CBlCGGdXvyMj1Bnwa78qzqnRozoYu8lLtro1Z7tfI+q4X8QMJhsnr5TnCnUU72atJpSVmvektnqt9zzf\\/gs+f+MdvDf\\/AGMUf\\/pNcV8AfBn4qeJfgf41t\\/Ffhiee1u9MYCSQIWgkRjzFMOhR8dD6ZGCAR9\\/\\/APBZ8Y\\/Z18N\\/9jFH\\/wCk1xXi3\\/BHzwxp3jT4h+O9K1axtdS02+0NIri2uYxJFMvnrwVPB\\/8ArV6mS1lRyqdSSuk3p32PuOD8xpYDgeWKxFP2kE5c0e6c7Nfcw+MP\\/BX\\/AMSfEn4TXXh\\/TPC9n4e1PU7f7Le6ml+8\\/wAjIVk8iPYpiYk8MXfaM9Thh4T+yP8AAK\\/\\/AGjfjnougWsDvYrMt1qc23KW1qjAyM3bn7o9WYCvvTX\\/APgjt8KNY1me6t73xjpUEzbks7XUIWhgH91TLC8mP95yeete9\\/Bj4AeEP2fPD8mm+ENEttIt7hxJOys0k1wwzgvI5LtjJwCcDJwBWCzvA4WjL6jBqUvz89Xt2R4lXxB4fyrLamH4coyjUqd18La3bcm210Sur9lvk\\/tdoIv2U\\/iGqgKq+HL0AAcAeQ9fjJojXserQSad9qW+gcTQNbbvNjZPmDKV5BXGcjpjNfs5+19\\/yav8RP8AsXb7\\/wBEPX5X\\/sOf8nd\\/D7\\/sMw\\/zNVwtLlo1pdrfkzu8JcT9WyLG4i1+RuVu9oXt8z3fwF\\/wWZ8VeG\\/hyNN1fwtp2va\\/BCYoNWa8a3RyEAR5oAh3tu5bY8YboNvWvlXXNY8QfHj4pXF5Ks+r+I\\/FF+X8uJcvPNK3CIvYZIAHQAAdBX6efGH\\/AIJbfCv4veK5NY+z6x4aurgl7hNEuI4YLhzj5jHJHIqnj+AKDkkgk5rrv2dv2Gvh5+zLcLe6Bpc13rao0Z1bUpftF3tYnhcBY4+G25jRSV4JNKjnWW0IutQptTfT\\/g7W9PuOfB+IHC2VUKmKynCuNepvG2l\\/W7SjfpFdtF06L9mH4P8A\\/ChfgJ4Z8KMY3uNLtALp0HyvO5MkpHqN7Ng+gFfkd+1X\\/wAnP\\/Eb\\/sZ9S\\/8ASqSv2urxjxr\\/AME9vg98Q\\/Fuoa5q3g6O41PVZ2ubqZNSvIBLKxyzbI5VUEnJOAMkk9TXlZVm8aGJniMQm+a+3du\\/c+P4E44w+UY7E4zMYyk638qTd7tu92u52\\/7PP\\/JAvBH\\/AGALH\\/0njrV+JPgW0+J\\/w+1rw5f7hZ65ZS2MzL95FkQruHuM5H0rS0XRrbw7o9pp9lCtvZ2MKW8ES\\/dijRQqqPYAAVZrxq1TnqyqR6ts\\/PJ4mSxLxFLR83MvLW6PxE8aeDfE\\/wCzJ8Ymsb5JNK8R+Gb5J4JQuV3xuHimjLDDIcBlOMEdu1fdXhL\\/AILSeD5fB0D674W8Swa+IiJobBYJbNpBnBWR5FcK3BwUJXOPmxk\\/TXxn\\/Zu8D\\/tCWNvB4w8O2esfZGzBMzPDcQ9flWWNlkCnOSu7aSASOBXz8f8AgjJ8Lyf+Q749\\/wDA20\\/+Rq+pnm+BxtKMcdFqUeq\\/r8GftOL414Yz\\/D03n9KUatPrHZ33s0720vZrTo3qfC\\/7Rnx2179sL45Prcmnyi61AxafpelWu64aCPOI4EwAzszsScAbmc4AyAP0\\/wD2GP2dJP2Zf2fNN0O+Ef8Abd47ahqpQhgs8mPkBHB2IqJkEglSRwau\\/Ab9i74c\\/s4ypdeG\\/D8X9rrEkT6peObm8chWUsrNxEWDNuESorZ5GAAPVK4s1zinVoxwmFjy01+Nv69WfMcbcc0Mzw1LKsrpunhqdt93ZWWl3ZLXq23q9Twf\\/gpH8If+FufsneIFii8y\\/wDD4XWbXC5IMOfMA+sRkH1xX5Mab4hvdH0\\/ULS2uJIbbVYVt7uNek6LIkqg\\/R40P4fWv3cubaO9tpIZo0lhlUo6OoZXUjBBB4IIrwq4\\/wCCZfwPurh5G8DoGkYsQmrXyKCeeFEwAHsBgVWSZ1TwdOVKsm03dWt+rXZHpcAeIeEyXAzwOYQlOPNzR5Unba+8l1Sa87nzz\\/wRb+EXn6l4s8dXEXECJotk5\\/vNtln\\/ABAEIz\\/tH8fub4h+CbT4k+A9Z8P34zZa3ZTWM3HIWRCpI9xnI9xVT4U\\/CPw78EPBkHh\\/wtpkek6Rbu8iQJI8hLOxZmZ3LOxyerE4AA6ACujrzc1x31vEutHRdPRf1c+J4o4inmmcVMzpXirrlvulG3L310u99WfiZ4m8N+KP2T\\/jp9nuEl03xD4Vv1nt5CpCy7G3JIv96NwAfQg4r7j8C\\/8ABaTwdc+GoD4l8LeJrPWAMTppiwXNsxH8StJLGwzydpU46bm619NfGX9nHwR+0FYQweMPDtjrP2Y5hmYtFcQjrtWaMrIqk9VDYPGQcV4Bcf8ABGj4Wz3Duus+OoVdiwjS+tdqA9hm3JwPck+9e5LN8DjKUVjotSXVf1+B+k4rjThjP6FN5\\/RnGtBWvHZ97NPbrZrTo9zz\\/wCK\\/wDwWoy0kHgbwd3Qx3uuzf8Afam3hb8m873I7V9reOfCUHxV+GOraHdExW\\/iHTJbOVgNxjWaIqSPcbs\\/hXkXwq\\/4Jn\\/CH4VzWVyPD0viDUbF2kS71m5a5Lk5xvhG2BtoPGYuMA9RmvfK8fMauCajDBRate7fXa3X\\/I+B4lzHI3OguHqUqfs7tylvJ6We72tfpvsj8OPFnhjXvgN8VLrTbwTaZ4h8MX+A6ggxyxsGSRCRypwrq2MEEEcGvrN\\/+C1HiQ+APsi+DNKHiXyQn9pm+c2u\\/PL\\/AGbZnp283rz0+WvsP9on9jrwH+0\\/bK3ibSm\\/tOGIw2+qWcnkXsC5zjdgq4HOFkVlG5iACSa8z+H3\\/BJP4TeBvEceoXK+IvEiwgFLTVryNrYOGDBisMcZbpjaxKEMcqa92WdYDFUo\\/XYNyj+flqt+zP0rFcf8L5vhqdbO8NKVan0S0v5NSV4vtL7nu\\/zT+Ic3ibxVdJ4u8Sm\\/upfFMs00V\\/ddb8xsFdk9UU\\/IMDaNpUfdIH6jf8Et\\/wDkyfwr\\/wBdr3\\/0rmru\\/i5+yL8OvjpHpCeJ\\/DNvfJoMBtrBIbiezW2iO35FELoNo2jAPAxxjJrqvhn8MdC+Dngqz8O+G7BdM0bT9\\/kW6yPJs3MXbLOWYksxOST1rizPPKWKwaoRi4tO\\/S1le34W6HzXGniBhM7yelgqVJ05xnzW05VFKSSTve9mvspb+RvUUUV8yfk4UUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQBwX7Vf\\/Jr3xI\\/7FbU\\/wD0klr0\\/wD4MY\\/+bov+5U\\/9zVeYftV\\/8mvfEj\\/sVtT\\/APSSWvT\\/APgxj\\/5ui\\/7lT\\/3NV93wl\\/Bqeq\\/I\\/o7wR\\/3HE\\/41+R+\\/1FFFfWn7cFFFFABRRRQAUUUUAFFFFABRRRQB+QH\\/AAerf8osvAP\\/AGVXTv8A00axX55\\/8ExP+THPBH\\/b\\/wD+nC5r9DP+D1b\\/AJRZeAf+yq6d\\/wCmjWK\\/PP8A4Jif8mOeCP8At\\/8A\\/Thc18xxX\\/ukf8S\\/Jn5D40\\/8iSl\\/19j\\/AOkTPe6KKK\\/Pj+YQooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA+c\\/+CmX7Pvir9on4JaTpnhHT49T1Gw1iO8kt2uY4C0fkyoSGkZV4Ljgke1edf8ABL79kTx\\/+zx8QPE+p+MdETRre90+O1twb2C4aZ\\/M3HAid8ABed2PvDGecfaNFenRzStTwssJFLll9\\/5\\/ofW0eMsdSySWQxjH2UutnzbqW97brsFFFFeYfJHH\\/tCeDL74jfArxhoOmLG+o6xo91Z2yyPsVpHiZVBPbJI5r4C\\/ZM\\/4J6\\/Fz4e\\/tIeD9c1zwsmm6TpOoJdXVy+qWkojRQT92OVnJPAGB1IzgZNfpbRXp4HNa2EhOFNK0u\\/\\/AA59bkfGWOyrA18vw8YuFa9207q65dLNLbumFFFFeYfJBRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAcF+1X\\/wAmvfEj\\/sVtT\\/8ASSWvT\\/8Agxj\\/AObov+5U\\/wDc1XmH7Vf\\/ACa98SP+xW1P\\/wBJJa9P\\/wCDGP8A5ui\\/7lT\\/ANzVfd8JfwanqvyP6O8Ef9xxP+Nfkfv9RRRX1p+3BRRRQAUUUUAFFFFABRRRQAUUUUAfkB\\/werf8osvAP\\/ZVdO\\/9NGsV+ef\\/AATE\\/wCTHPBH\\/b\\/\\/AOnC5r9DP+D1b\\/lFl4B\\/7Krp3\\/po1ivzz\\/4Jif8AJjngj\\/t\\/\\/wDThc18xxX\\/ALpH\\/EvyZ+Q+NP8AyJKX\\/X2P\\/pEz3uiiivz4\\/mEKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAOC\\/ar\\/5Ne+JH\\/Yran\\/6SS16f\\/wAGMf8AzdF\\/3Kn\\/ALmq8w\\/ar\\/5Ne+JH\\/Yran\\/6SS16f\\/wAGMf8AzdF\\/3Kn\\/ALmq+74S\\/g1PVfkf0d4I\\/wC44n\\/GvyP3+ooor60\\/bgooooAKKKKACiiigAooooAKKKKAPyA\\/4PVv+UWXgH\\/squnf+mjWK\\/PP\\/gmJ\\/wAmOeCP+3\\/\\/ANOFzX6Gf8Hq3\\/KLLwD\\/ANlV07\\/00axX55\\/8ExP+THPBH\\/b\\/AP8Apwua+Y4r\\/wB0j\\/iX5M\\/IfGn\\/AJElL\\/r7H\\/0iZ73RRRX58fzCFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAHBftV\\/8mvfEj\\/sVtT\\/9JJa9P\\/4MY\\/8Am6L\\/ALlT\\/wBzVeYftV\\/8mvfEj\\/sVtT\\/9JJa9P\\/4MY\\/8Am6L\\/ALlT\\/wBzVfd8JfwanqvyP6O8Ef8AccT\\/AI1+R+\\/1FFFfWn7cFFFFABRRRQAUUUUAFFFFABRRRQB+QH\\/B6t\\/yiy8A\\/wDZVdO\\/9NGsV+ef\\/BMT\\/kxzwR\\/2\\/wD\\/AKcLmv0M\\/wCD1b\\/lFl4B\\/wCyq6d\\/6aNYr88\\/+CYn\\/Jjngj\\/t\\/wD\\/AE4XNfMcV\\/7pH\\/EvyZ+Q+NP\\/ACJKX\\/X2P\\/pEz3uiiivz4\\/mEKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAOC\\/ar\\/5Ne+JH\\/Yran\\/6SS16f\\/wYx\\/8AN0X\\/AHKn\\/uarzD9qv\\/k174kf9itqf\\/pJLXp\\/\\/BjH\\/wA3Rf8Acqf+5qvu+Ev4NT1X5H9HeCP+44n\\/ABr8j9\\/qKKK+tP24KKKKACiiigAooooAKKKKACiiigD8gP8Ag9W\\/5RZeAf8Asqunf+mjWK\\/PP\\/gmJ\\/yY54I\\/7f8A\\/wBOFzX6Gf8AB6t\\/yiy8A\\/8AZVdO\\/wDTRrFfnn\\/wTE\\/5Mc8Ef9v\\/AP6cLmvmOK\\/90j\\/iX5M\\/IfGn\\/kSUv+vsf\\/SJnvdFFFfnx\\/MIUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAcF+1X\\/ya98SP+xW1P8A9JJa9P8A+DGP\\/m6L\\/uVP\\/c1XmH7Vf\\/Jr3xI\\/7FbU\\/wD0klr0\\/wD4MY\\/+bov+5U\\/9zVfd8JfwanqvyP6O8Ef9xxP+Nfkfv9RRRX1p+3BRRRQAUUUUAFFFFABRRRQAUUUUAfkB\\/wAHq3\\/KLLwD\\/wBlV07\\/ANNGsV+ef\\/BMT\\/kxzwR\\/2\\/8A\\/pwua\\/Qz\\/g9W\\/wCUWXgH\\/squnf8Apo1ivzz\\/AOCYn\\/Jjngj\\/ALf\\/AP04XNfMcV\\/7pH\\/EvyZ+Q+NP\\/Ikpf9fY\\/wDpEz3uiiivz4\\/mEKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAOC\\/ar\\/AOTXviR\\/2K2p\\/wDpJLXp\\/wDwYx\\/83Rf9yp\\/7mq8w\\/ar\\/AOTXviR\\/2K2p\\/wDpJLXp\\/wDwYx\\/83Rf9yp\\/7mq+74S\\/g1PVfkf0d4I\\/7jif8a\\/I\\/f6iiivrT9uCiiigAooooAKKKKACiiigAooooA\\/ID\\/g9W\\/wCUWXgH\\/squnf8Apo1ivzz\\/AOCYn\\/Jjngj\\/ALf\\/AP04XNfoZ\\/werf8AKLLwD\\/2VXTv\\/AE0axX55\\/wDBMT\\/kxzwR\\/wBv\\/wD6cLmvmOK\\/90j\\/AIl+TPyHxp\\/5ElL\\/AK+x\\/wDSJnvdFFFfnx\\/MIUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAcF+1X\\/AMmvfEj\\/ALFbU\\/8A0klr0\\/8A4MY\\/+bov+5U\\/9zVeYftV\\/wDJr3xI\\/wCxW1P\\/ANJJa9P\\/AODGP\\/m6L\\/uVP\\/c1X3fCX8Gp6r8j+jvBH\\/ccT\\/jX5H7\\/AFFFFfWn7cFFFFABRRRQAUUUUAFFFFABRRRQB+QH\\/B6t\\/wAosvAP\\/ZVdO\\/8ATRrFfnn\\/AMExP+THPBH\\/AG\\/\\/APpwua\\/Qz\\/g9W\\/5RZeAf+yq6d\\/6aNYr88\\/8AgmJ\\/yY54I\\/7f\\/wD04XNfMcV\\/7pH\\/ABL8mfkPjT\\/yJKX\\/AF9j\\/wCkTPe6KKK\\/Pj+YQooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA4L9qv\\/AJNe+JH\\/AGK2p\\/8ApJLXp\\/8AwYx\\/83Rf9yp\\/7mq8w\\/ar\\/wCTXviR\\/wBitqf\\/AKSS16f\\/AMGMf\\/N0X\\/cqf+5qvu+Ev4NT1X5H9HeCP+44n\\/GvyP3+ooor60\\/bgooooAKKKKACiiigAooooAKKKKAPyA\\/4PVv+UWXgH\\/squnf+mjWK\\/PP\\/AIJif8mOeCP+3\\/8A9OFzX6Gf8Hq3\\/KLLwD\\/2VXTv\\/TRrFfnn\\/wAExP8AkxzwR\\/2\\/\\/wDpwua+Y4r\\/AN0j\\/iX5M\\/IfGn\\/kSUv+vsf\\/AEiZ73RRRX58fzCFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAHBftV\\/8AJr3xI\\/7FbU\\/\\/AEklr0\\/\\/AIMY\\/wDm6L\\/uVP8A3NV5h+1X\\/wAmvfEj\\/sVtT\\/8ASSWvT\\/8Agxj\\/AObov+5U\\/wDc1X3fCX8Gp6r8j+jvBH\\/ccT\\/jX5H7\\/UUUV9aftwUUUUAFFFFABRRRQAUUUUAFFFFAH5Af8Hq3\\/KLLwD\\/2VXTv\\/TRrFfnn\\/wAExP8AkxzwR\\/2\\/\\/wDpwua\\/Qz\\/g9W\\/5RZeAf+yq6d\\/6aNYr88\\/+CYn\\/ACY54I\\/7f\\/8A04XNfMcV\\/wC6R\\/xL8mfkPjT\\/AMiSl\\/19j\\/6RM97ooor8+P5hCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDgv2q\\/+TXviR\\/2K2p\\/+kkten\\/8ABjH\\/AM3Rf9yp\\/wC5qvMP2q\\/+TXviR\\/2K2p\\/+kkten\\/8ABjH\\/AM3Rf9yp\\/wC5qvu+Ev4NT1X5H9HeCP8AuOJ\\/xr8j9\\/qKKK+tP24KKKKACiiigAooooAKKKKACiiigD8gP+D1b\\/lFl4B\\/7Krp3\\/po1ivzz\\/4Jif8AJjngj\\/t\\/\\/wDThc1+hn\\/B6t\\/yiy8A\\/wDZVdO\\/9NGsV+BvwJ\\/4Ka+PP2e\\/hVpXhDRtJ8I3Om6R53ky3trcPO3mTPM24pOq\\/ekIGFHAH1rxM+wNXF4dU6O6d\\/wZ+feJHDmMzrLIYXApOSqKWrtooyX5tH6w0V+Zn\\/D5z4of9AHwF\\/4BXf8A8k0f8PnPih\\/0AfAX\\/gFd\\/wDyTXyf+rOO7L7z8T\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH6Z0V+Zn\\/D5z4of9AHwF\\/4BXf\\/AMk0f8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/qzjuy+8P+IRcQ\\/yw\\/wDAkfpnRX5mf8PnPih\\/0AfAX\\/gFd\\/8AyTR\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH+rOO7L7w\\/4hFxD\\/LD\\/AMCR+mdFfmZ\\/w+c+KH\\/QB8Bf+AV3\\/wDJNH\\/D5z4of9AHwF\\/4BXf\\/AMk0f6s47svvD\\/iEXEP8sP8AwJH3t+1X\\/wAmvfEj\\/sVtT\\/8ASSWvT\\/8Agxj\\/AObov+5U\\/wDc1X5R\\/ED\\/AIK0fEb4j+A9b8PX2i+CYrLXrCfTrh4LO6WVI5o2jYoTcEBgGOMgjPY1+rn\\/AAYx\\/wDN0X\\/cqf8Auar6jIMurYSnONbqz9i8NOF8fkmFrUscknKSas79D9\\/qKKK98\\/SwooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigD\\/9k=\&quot;}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${CRYPTO_API}/encrypt</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${BOS-CRYPTO-TPK}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Data Fields From Response Message" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">encryptedData;ephemeralPublicKey;publicKeyHash;version</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedData.data;$.encryptedData.ephemeralPublicKey;$.encryptedData.publicKeyHash;$.encryptedData.version</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-GD-RequestId</stringProp>
                  <stringProp name="Header.value">${__UUID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${__UUID}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">access_token;token_type;expires_in;scope</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token;$.token_type;$.expires_in;$.scope</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{
String accountIdentifier = &quot;${accountIdentifier}&quot;;
String userIdentifier = &quot;${userIdentifier}&quot;;
String accessToken = &quot;${access_token}&quot;;
String encryptedData = &quot;${encryptedData}&quot;;
String ephemeralPublicKey = &quot;${ephemeralPublicKey}&quot;;
String publicKeyHash = &quot;${publicKeyHash}&quot;;
String version = &quot;${version}&quot;;


FileWriter fstream = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + encryptedData + &quot;,&quot; + ephemeralPublicKey + &quot;,&quot; + publicKeyHash + &quot;,&quot; + version +&quot;,&quot; + accountIdentifier + &quot;,&quot; + userIdentifier + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Append results to OUTPUT file" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">${accountIdentifier} ${userIdentifier} ${access_token} ${encryptedData} ${ephemeralPublicKey} ${publicKeyHash} ${version}</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.services.FileServer;

try{
String accountIdentifier = args[0];
String userIdentifier = args[1];
String accessToken = args[2];
String encryptedData = args[3];
String ephemeralPublicKey = args[4];
String publicKeyHash = args[5];
String version = args[6];


FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;,true);
fstream.write(accessToken + &quot;,&quot; + encryptedData + &quot;,&quot; + ephemeralPublicKey + &quot;,&quot; + publicKeyHash + &quot;,&quot; + version +&quot;,&quot; + accountIdentifier + &quot;,&quot; + userIdentifier + System.getProperty(&quot;line.separator&quot;));
fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SplitFiles and CopyToSharedFolder-KycIDV" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="SetDataFileName" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;KycIDVdata.csv&quot;);</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Delete source file" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">DEL /F /Q</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${RESULT_FILE_NAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}</stringProp>
        </SystemSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Combine Multi-Thread files into one" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">copy /b</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\multi-thread\multi-thread-out*</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\multi-thread\\${DATA_FILE_NAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\multi-thread</stringProp>
        </SystemSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Data Splitter Execution" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\GDQA_PerfDataSplitter\GDQA_PerfDataSplitter.exe</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\multi-thread\\${DATA_FILE_NAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\SplitFiles</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${DATA_FILE_NAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree/>
        <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
          <stringProp name="SwitchController.value">${LOOPCOPY_SWITCHVAL}</stringProp>
        </SwitchController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="LoopCopy" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">3</stringProp>
          </LoopController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get current index" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

try{
	log.info(&quot;Current count:&quot; + String.valueOf(${__jm__LoopCopy__idx}+1));
	vars.put(&quot;CurrentIndex&quot;, String.valueOf(${__jm__LoopCopy__idx}+1));
	vars.put(&quot;CurrentRemoteServerIndex&quot;, String.valueOf(${__jm__LoopCopy__idx}+2));
}
catch (Throwable ex)
{
	log.error(&quot;Error in Get-current-index script&quot;, ex);
	throw ex;
}</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder-1" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd.exe</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">copy /b /y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">.\\${CurrentIndex}\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">\\\\g1pfbosload0${CurrentRemoteServerIndex}\\data\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\SplitFiles</stringProp>
            </SystemSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Copy-AWS" enabled="true"/>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder-10.62.11.121" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd.exe</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">copy /b /y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">.\\1\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">\\\\10.62.11.121\\data\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\SplitFiles</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder-10.62.9.110" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd.exe</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">copy /b /y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">.\\2\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">\\\\10.62.9.110\\data\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\SplitFiles</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder-10.62.10.96" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd.exe</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">copy /b /y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">.\\3\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">\\\\10.62.10.96\\data\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\SplitFiles</stringProp>
            </SystemSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Get AccountData from DB-KYB-AddFraudData" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="RESULT_FILE_NAME" elementType="Argument">
              <stringProp name="Argument.name">RESULT_FILE_NAME</stringProp>
              <stringProp name="Argument.value">${__P(ResultFileName, account-from-db.csv)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Delete existing file" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

log.info(vars.get (&quot;WORKSPACE_PATH&quot;));

try{
	File file = new File(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;);

	List files = FileUtils.listFiles(new File(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator + &quot;multi-thread&quot;), new String[]{&quot;csv&quot;}, true);
	for (File file : files) {
	file.delete();
	}

	if (file.exists())
	{
		//FileServer.getFileServer().closeFile(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME_P}&quot;);
		//FileServer.getFileServer().closeFile(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;);
		FileServer.getFileServer().closeFiles();
		//FileUtils.deleteQuietly(file);
	 	//FileDeleteStrategy.FORCE.delete(file);
	 	System.gc();
	 	file.setWritable(true);
	 	
	 	if (!file.delete()) 
       	{ 
                log.error(&quot;Couldn&apos;t delete file&quot;); 
        	} 
        	else 
        	{ 
                log.info(&quot;Successfully deleted file: &quot; + file.getName()); 
        	}
	}
} catch (FileNotFoundException e) {
    log.error(&quot;FileNotFoundException in Delete csv files&quot;, e);
    //e.printStackTrace();
} catch (IOException e) {
    log.error(&quot;IOException in Delete csv files&quot;, e);
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">
select top ${NUMBER_OF_ACCOUNTS} a.AccountIdentifier
from Account a
inner join Product p (nolock) on (p.ProductKey = a.ProductKey)
inner join Program pg (nolock) on (pg.ProgramKey = p.ProgramKey)
inner join AccountStatus s (nolock) on (a.AccountStatusKey = s.AccountStatusKey)
inner join AccountHolder h (nolock) on (h.AccountKey = a.AccountKey)
inner join AccountBalance ab (nolock) on (ab.AccountKey = a.AccountKey)
inner join Currency cur (nolock) on (cur.CurrencyKey = ab.CurrencyKey)
inner join ConsumerProfile cp (nolock) on (cp.ConsumerProfileKey = h.ConsumerProfileKey)
inner join ConsumerProfileIdentity cpi (nolock) on cpi.ConsumerProfileKey=cp.ConsumerProfileKey
inner join AccountHolder_PaymentIdentifier ap (nolock) on (ap.AccountHolderKey = h.AccountHolderKey)
where p.productCode=&apos;${ProductCode}&apos;
and a.CreateDate between &apos;${StartDate}&apos; and &apos;${EndDate}&apos;
and cp.ConsumerProfileTypeKey != 1
and s.AccountStatus=&apos;Normal&apos;
order by a.CreateDate desc</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">AccountIdentifier</stringProp>
          <stringProp name="resultVariable">AccountList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{

	String RequestId = java.util.UUID.randomUUID().toString();
	fstream.write(row.get(&quot;AccountIdentifier&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Multi-Thread Data Generator-KYB-AddFraudData" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOP_COUNT_GEN}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${NUMOFTHREADS_GEN}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMUP_PERIOD_GEN}</stringProp>
        <longProp name="ThreadGroup.start_time">1498168968000</longProp>
        <longProp name="ThreadGroup.end_time">1498168968000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OUTPUT_FILE" elementType="Argument">
              <stringProp name="Argument.name">OUTPUT_FILE</stringProp>
              <stringProp name="Argument.value">${__P(ResultFileName, multi-thread-out)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="INPUT_FILE" elementType="Argument">
              <stringProp name="Argument.name">INPUT_FILE</stringProp>
              <stringProp name="Argument.value">${WORKSPACE_PATH}\account-from-db.csv</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${INPUT_FILE}</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountIdentifier</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate Fraud data" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">${ProductCode},${ProgramCode}</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.commons.lang.RandomStringUtils;

try{

	def ssn = &quot;10&quot; + RandomStringUtils.randomNumeric(7)
	def yearOfBirth = &quot;1&quot; + RandomStringUtils.randomNumeric(3)
	def day = RandomStringUtils.randomNumeric(1)
	def month = RandomStringUtils.randomNumeric(1)
	def year = &quot;1&quot; + RandomStringUtils.randomNumeric(3)
	def empID = RandomStringUtils.randomNumeric(12)
	def name = RandomStringUtils.randomAlphabetic(8)
	def phoneNumber = &quot;6&quot; + RandomStringUtils.randomNumeric(9)
	def streetAddress1 = RandomStringUtils.randomNumeric(5) + &apos; &apos; + &apos; Foothill Blvd&apos;
	def streetName = &quot;Foothill&quot;
	def streetNumber = RandomStringUtils.randomNumeric(5)
	def first = RandomStringUtils.randomAlphabetic(8)
	def last = RandomStringUtils.randomAlphabetic(8)
	def phoneOfNameAddress = &quot;6&quot; + RandomStringUtils.randomNumeric(9)
	def phone = &quot;6&quot; + RandomStringUtils.randomNumeric(9)
	def ipaddress = RandomStringUtils.randomNumeric(2)+ &apos;.&apos;+ RandomStringUtils.randomNumeric(2)+ &apos;.&apos;+ RandomStringUtils.randomNumeric(2)+&apos;.&apos;+ RandomStringUtils.randomNumeric(2)
	def ipaddressLatitude = RandomStringUtils.randomNumeric(2)
	def ipaddressLongitude = RandomStringUtils.randomNumeric(2)
	def realipaddress = RandomStringUtils.randomNumeric(2)+ &apos;.&apos;+ RandomStringUtils.randomNumeric(2)+ &apos;.&apos;+ RandomStringUtils.randomNumeric(2)+&apos;.&apos;+ RandomStringUtils.randomNumeric(2)
	def realipaddressLatitude = RandomStringUtils.randomNumeric(2)
	def realipaddressLongitude = RandomStringUtils.randomNumeric(2)
	def internalAccountId = &quot;5&quot; + RandomStringUtils.randomNumeric(16)
	TimeZone.setDefault(TimeZone.getTimeZone(&apos;UTC&apos;))
	def now = new Date()
	now = now.format(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;&quot;)

	def RequestId = java.util.UUID.randomUUID()

	vars.put(&apos;fraudSSN&apos;, ssn)
	vars.put(&apos;fraudYearOfBirth&apos;, yearOfBirth)
	vars.put(&apos;fraudDay&apos;, day)
	vars.put(&apos;fraudMonth&apos;, month)
	vars.put(&apos;fraudYear&apos;, year)
	vars.put(&apos;fraudEmpID&apos;, empID)
	vars.put(&apos;fraudName&apos;, name)
	vars.put(&apos;fraudPhoneNumber&apos;, phoneNumber)
	vars.put(&apos;fraudStreetAddress1&apos;, streetAddress1)
	vars.put(&apos;fraudStreetName&apos;, streetName)
	vars.put(&apos;fraudStreetNumber&apos;, streetNumber)
	vars.put(&apos;fraudFirst&apos;, first)
	vars.put(&apos;fraudLast&apos;, last)
	vars.put(&apos;fraudPhoneOfNameAddress&apos;, phoneOfNameAddress)
	vars.put(&apos;fraudPhone&apos;, phone)
	vars.put(&apos;fraudIPAddress&apos;, ipaddress)
	vars.put(&apos;fraudIPAddressLatitude&apos;, ipaddressLatitude)
	vars.put(&apos;fraudIPAddressLongitude&apos;, ipaddressLongitude)
	vars.put(&apos;fraudRealIPAddress&apos;, realipaddress)
	vars.put(&apos;fraudRealIPAddressLatitude&apos;, realipaddressLatitude)
	vars.put(&apos;fraudRealIPAddressLongitude&apos;, realipaddressLongitude)


	vars.put(&quot;RequestID&quot;, RequestId.toString())


	def vendorName = RandomStringUtils.randomAlphabetic(8)
	def city = &quot;Pasadena&quot;
	def state= &quot;CA&quot;
	def streetSuffix = &quot;st&quot;
	def age =  RandomStringUtils.randomNumeric(2)
	def companyName =  RandomStringUtils.randomAlphabetic(8)

	//def vendorDataTag = &apos;vendorData&apos;;context.testCase.getPropertyValue(&apos;fraudVendorDataTag&apos;)
	// vendor data
	vars.put (&quot;vendorName&quot;,vendorName)
	vars.put (&quot;vendorProduct&quot;,vendorName)

	//personal info
	vars.put(&quot;name&quot;,name)
	vars.put(&quot;ssn&quot;,ssn)
	vars.put(&quot;yearOfBirth&quot;,yearOfBirth)
	vars.put(&quot;phoneNumber&quot;,phoneNumber)

	//inputecho address

	vars.put (&quot;streetAddress1&quot;, streetAddress1)
	vars.put (&quot;city&quot;, city)
	vars.put (&quot;state&quot;, state)
	vars.put (&quot;streetName&quot;, streetName)
	vars.put (&quot;streetNumber&quot;, streetNumber)
	vars.put (&quot;streetSuffix&quot;, streetSuffix)
	vars.put (&quot;zip4&quot;, &apos;4564&apos;)
	vars.put (&quot;zip5&quot;, &apos;45645&apos;)

	vars.put (&quot;addressType&quot;, &apos;S&apos;)
	vars.put (&quot;age&quot;, age)


	// dob
	vars.put(&quot;day&quot;, day)
	vars.put(&quot;month&quot;, month)
	vars.put(&quot;year&quot;, year)

	// name
	vars.put(&quot;first&quot;, first)
	vars.put(&quot;last&quot;, last)

	vars.put (&quot;ssn&quot;, ssn)
	vars.put (&quot;phoneOfNameAddress&quot;, phoneOfNameAddress)


	vars.put (&quot;companyName&quot;,companyName)
	vars.put (&quot;phone&quot;,phone)

	vars.put (&quot;empID&quot;, empID)

	vars.put (&quot;ipaddress&quot;,ipaddress)
	vars.put (&quot;ipaddressLatitude&quot;,ipaddressLatitude)
	vars.put (&quot;ipaddressLongitude&quot;,ipaddressLongitude)
	vars.put (&quot;realipaddress&quot;,realipaddress)
	vars.put (&quot;realipaddressLatitude&quot;,realipaddressLatitude)
	vars.put (&quot;realipaddressLongitude&quot;,realipaddressLongitude)


	vars.put(&quot;internalAccountId&quot;,internalAccountId)
	vars.put(&quot;applicationDate&quot;,now)


	//Encrypted Data part
	vars.put(&quot;encryptedUserDataVersion&quot;, RequestId.toString())
	vars.put(&quot;EphemeralPublicKey&quot;, RequestId.toString())
	vars.put(&quot;PublicKeyHash&quot;, RequestId.toString())
	vars.put(&quot;salt&quot;, RequestId.toString())
	vars.put(&quot;Version&quot;, &quot;EC_v1&quot;)
	


}catch (Throwable ex)
{
	log.error(&quot;Error in Generate enrollment data&quot;, ex);
	throw ex;
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserData Encryption" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;requestHeader&quot;: {&#xd;
 &quot;requestId&quot;: &quot;${RequestID}&quot;&#xd;
 },&#xd;
 &quot;version&quot;: &quot;${Version}&quot;,&#xd;
 &quot;salt&quot;: &quot;${salt}&quot;,&#xd;
 &quot;programCode&quot;: &quot;${ProgramCode}&quot;,&#xd;
 &quot;data&quot;: &quot;{\&quot;contextInfo\&quot;:{\&quot;internalAccountId\&quot;:\&quot;${internalAccountId}\&quot;,\&quot;applicationDate\&quot;:\&quot;${applicationDate}\&quot;},\&quot;vendorData\&quot;:[{\&quot;personalInfo\&quot;:{\&quot;phoneNumber\&quot;:\&quot;${phoneNumber}\&quot;,\&quot;name\&quot;:\&quot;${name}\&quot;,\&quot;ssn\&quot;:\&quot;${ssn}\&quot;,\&quot;yearOfBirth\&quot;:\&quot;${yearOfBirth}\&quot;},\&quot;inputEcho\&quot;:{\&quot;address\&quot;:{\&quot;streetName\&quot;:\&quot;${streetName}\&quot;,\&quot;city\&quot;:\&quot;${city}\&quot;,\&quot;streetNumber\&quot;:\&quot;${streetNumber}\&quot;,\&quot;streetAddress1\&quot;:\&quot;${streetAddress1}\&quot;,\&quot;streetSuffix\&quot;:\&quot;${streetSuffix}\&quot;,\&quot;zip4\&quot;:\&quot;${zip4}\&quot;,\&quot;state\&quot;:\&quot;${state}\&quot;,\&quot;zip5\&quot;:\&quot;${zip5}\&quot;},\&quot;addressType\&quot;:\&quot;${addressType}\&quot;,\&quot;dob\&quot;:{\&quot;month\&quot;:\&quot;${month}\&quot;,\&quot;year\&quot;:\&quot;${year}\&quot;,\&quot;day\&quot;:\&quot;${day}\&quot;},\&quot;name\&quot;:{\&quot;last\&quot;:\&quot;${last}\&quot;,\&quot;first\&quot;:\&quot;${first}\&quot;},\&quot;age\&quot;:\&quot;${age}\&quot;,\&quot;ssn\&quot;:\&quot;${ssn}\&quot;},\&quot;phoneOfNameAddress\&quot;:\&quot;${phoneOfNameAddress}\&quot;,\&quot;vendorName\&quot;:\&quot;${vendorName}\&quot;,\&quot;companyResults\&quot;:{\&quot;bestInformation\&quot;:{\&quot;address\&quot;:{\&quot;streetName\&quot;:\&quot;${streetName}\&quot;,\&quot;city\&quot;:\&quot;${city}\&quot;,\&quot;streetNumber\&quot;:\&quot;${streetNumber}\&quot;,\&quot;streetAddress1\&quot;:\&quot;${streetAddress1}\&quot;,\&quot;streetSuffix\&quot;:\&quot;${streetSuffix}\&quot;,\&quot;zip4\&quot;:\&quot;${zip4}\&quot;,\&quot;state\&quot;:\&quot;${state}\&quot;,\&quot;zip5\&quot;:\&quot;${zip5}\&quot;},\&quot;phone\&quot;:\&quot;${phone}\&quot;,\&quot;companyName\&quot;:\&quot;${companyName}\&quot;},\&quot;businessIds\&quot;:{\&quot;empID\&quot;:\&quot;${empID}\&quot;}},\&quot;deviceInfo\&quot;:{\&quot;ipaddressLatitude\&quot;:\&quot;${ipaddressLatitude}\&quot;,\&quot;realipaddress\&quot;:\&quot;${realipaddress}\&quot;,\&quot;ipaddress\&quot;:\&quot;${ipaddress}\&quot;,\&quot;realipaddressLatitude\&quot;:\&quot;${realipaddressLatitude}\&quot;,\&quot;realipaddressLongitude\&quot;:\&quot;${realipaddressLongitude}\&quot;,\&quot;ipaddressLongitude\&quot;:\&quot;${ipaddressLongitude}\&quot;},\&quot;vendorProduct\&quot;:\&quot;${vendorProduct}\&quot;}]}&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${CRYPTO_API}/encrypt</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${BOS-CRYPTO-TPK}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Data Fields From Response Message" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">encryptedData;ephemeralPublicKey;publicKeyHash;version</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedData.data;$.encryptedData.ephemeralPublicKey;$.encryptedData.publicKeyHash;$.encryptedData.version</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller-Oauth" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value"> Basic ${AUTH}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-GD-RequestId</stringProp>
                  <stringProp name="Header.value">${__UUID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value"> Basic Y2xpZW50MjpzZWNyZXQy</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${__UUID}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">${DEFAULT_ACCESS_TOKEN}</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to OUTPUT file-1" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

try{
	String encryptedData = &quot;${encryptedData}&quot;;
	String ephemeralPublicKey = &quot;${ephemeralPublicKey}&quot;;
	String publicKeyHash = &quot;${publicKeyHash}&quot;;
	String version = &quot;${version}&quot;;
	String accountIdentifier = &quot;${AccountIdentifier}&quot;;
	String accessToken = &quot;${access_token}&quot;;
	String requestId= &quot;${RequestID}&quot;;

	//FileWriter fstream = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;, true);
	FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;)  + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;, true);
	
	fstream.write(accessToken + &quot;,&quot; + encryptedData + &quot;,&quot; + ephemeralPublicKey + &quot;,&quot; + publicKeyHash + &quot;,&quot; 
			+ version + &quot;,&quot; + accountIdentifier + &quot;,&quot; + requestId + System.getProperty(&quot;line.separator&quot;));
	fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Append results to OUTPUT file" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">${encryptedData} ${ephemeralPublicKey} ${publicKeyHash} ${version} ${TermsIdentifier} ${TermsAcceptanceDateTime} ${ProductCode} ${Currency} ${PurseIdentifier} ${PurseType} ${access_token}</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.services.FileServer;

try{
	String encryptedData = args[0];
String ephemeralPublicKey = args[1];
String publicKeyHash = args[2];
String version = args[3];
String termsIdentifier = args[4];
String termsAcceptanceDateTime = args[5];
String productCode = args[6];
String currency = args[7];
String purseIdentifier =args[8];
String purseType = args[9];
String requestPhysicalPlasticFlag = &quot;true&quot;;
String accessToken = args[10];


	FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;)  + File.separator  + &quot;multi-thread&quot; + File.separator + &quot;${OUTPUT_FILE}&quot; + ctx.getThreadNum() + &quot;.csv&quot;, true);
	
	fstream.write(accessToken + &quot;,&quot; + encryptedData + &quot;,&quot; + ephemeralPublicKey + &quot;,&quot; + publicKeyHash + &quot;,&quot; 
			+ version + &quot;,&quot; + termsIdentifier + &quot;,&quot; + termsAcceptanceDateTime + &quot;,&quot; + productCode + &quot;,&quot; 
			+ currency + &quot;,&quot; + purseIdentifier + &quot;,&quot; + purseType + &quot;,&quot; + requestPhysicalPlasticFlag + System.getProperty(&quot;line.separator&quot;));
	fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SplitFiles and CopyToSharedFolder-KYB-AddFraudData" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="SetDataFileName" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">vars.put(&quot;DATA_FILE_NAME&quot;, &quot;addfrauddata.csv&quot;);</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Combine Multi-Thread files into one" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">copy /b</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\multi-thread\multi-thread-out*</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\multi-thread\\${DATA_FILE_NAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\multi-thread</stringProp>
        </SystemSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Data Splitter Execution" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\GDQA_PerfDataSplitter\GDQA_PerfDataSplitter.exe</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\multi-thread\\${DATA_FILE_NAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\SplitFiles</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${DATA_FILE_NAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Copy data file to shared folder - Not work" enabled="false">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

try{
	log.info(FileServer.getFileServer().getBaseDir());
	for(int i=1; i&lt;4; i++){
		File sourcefile = new File(FileServer.getFileServer().getBaseDir() + File.separator  + &quot;SplitFiles&quot; + File.separator  + i + File.separator + &quot;${DATA_FILE_NAME}&quot;);
		File targetfile = new File(&quot;\\\g1prffwtools0&quot; +i + File.separator  + &quot;data&quot; );	//+ File.separator + &quot;${DATA_FILE_NAME}&quot;
		log.info(&quot;Targetfile: &quot; + targetfile);
		if (sourcefile.exists())
		{
			log.info(&quot;Found sourcefile &quot; + sourcefile);
			FileUtils.copyFileToDirectory(sourcefile, targetfile);	//ToDirectory
		}
	}
}
catch (Throwable ex)
{
	log.error(&quot;Error in copy file script&quot;, ex);
	throw ex;
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
          <stringProp name="SwitchController.value">${LOOPCOPY_SWITCHVAL}</stringProp>
        </SwitchController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="LoopCopy" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">3</stringProp>
          </LoopController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get current index" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

try{
	log.info(&quot;Current count:&quot; + String.valueOf(${__jm__LoopCopy__idx}+1));
	vars.put(&quot;CurrentIndex&quot;, String.valueOf(${__jm__LoopCopy__idx}+1));
	vars.put(&quot;CurrentRemoteServerIndex&quot;, String.valueOf(${__jm__LoopCopy__idx}+2));
}
catch (Throwable ex)
{
	log.error(&quot;Error in Get-current-index script&quot;, ex);
	throw ex;
}</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder-1" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd.exe</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">copy /b /y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">.\\${CurrentIndex}\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">\\\\g1pfbosload0${CurrentRemoteServerIndex}\\data\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\SplitFiles</stringProp>
            </SystemSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Copy-AWS" enabled="true"/>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder-10.62.11.121" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd.exe</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">copy /b /y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">.\\1\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">\\\\10.62.11.121\\data\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\SplitFiles</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder-10.62.9.110" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd.exe</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">copy /b /y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">.\\2\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">\\\\10.62.9.110\\data\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\SplitFiles</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder-10.62.10.96" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd.exe</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">copy /b /y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">.\\3\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">\\\\10.62.10.96\\data\\${DATA_FILE_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\SplitFiles</stringProp>
            </SystemSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
