<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Data generator for nachaprocessor" enabled="true">
      <stringProp name="TestPlan.comments">X-GD-Bos-Crypto-Recipient-TPK	${__P(X-GD-Bos-Crypto-Recipient-TPK, 119)}
X-GD-Bos-Crypto-Receiver-Priv-Slot	${__P(X-GD-Bos-Crypto-Receiver-Priv-Slot, 110)}
ProductMaterialType	${__P(ProductMaterialType, national)}
Feature	${__P(Feature, ucb2)}
IN_AUTH	${__P(IN_AUTH, Basic Y2xpZW50MjpzZWNyZXQy)}
BOS_DB	${__P(BOS_DB, pfbosdbag.awsnp.gdotawsnp.com)}
ProgramCode	${__P(ProgramCode,stash)}
ProductCode	${__P(ProductCode,S50001)}</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="PROPFILE" elementType="Argument">
            <stringProp name="Argument.name">PROPFILE</stringProp>
            <stringProp name="Argument.value">${__P(PROPFILE,C:\Performance\data\PropertyFiles\stash.properties)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SIM_Service" elementType="Argument">
            <stringProp name="Argument.name">SIM_Service</stringProp>
            <stringProp name="Argument.value">${__P(SIM_Service, https://qatools.prf.uw2.gdotawsnp.com/GDQATools/GDQA_IPSMQSimulator_Bos/IPSMQSimulatorService.svc)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IsAWS" elementType="Argument">
            <stringProp name="Argument.name">IsAWS</stringProp>
            <stringProp name="Argument.value">${__P(IsAWS, true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IbmMQType" elementType="Argument">
            <stringProp name="Argument.name">IbmMQType</stringProp>
            <stringProp name="Argument.value">${__P(IbmMQType, AWS)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GSS_DB" elementType="Argument">
            <stringProp name="Argument.name">GSS_DB</stringProp>
            <stringProp name="Argument.value">${__P(GSS_DB, G1PFGSSDB01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="START_DATE" elementType="Argument">
            <stringProp name="Argument.name">START_DATE</stringProp>
            <stringProp name="Argument.value">${__P(START_DATE, 2019-01-24)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="END_DATE" elementType="Argument">
            <stringProp name="Argument.name">END_DATE</stringProp>
            <stringProp name="Argument.value">${__P(END_DATE, 2020-10-11)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ThreadCount" elementType="Argument">
            <stringProp name="Argument.name">ThreadCount</stringProp>
            <stringProp name="Argument.value">${__P(ThreadCount, 25)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Duration" elementType="Argument">
            <stringProp name="Argument.name">Duration</stringProp>
            <stringProp name="Argument.value">${__P(Duration, 1200)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LoopCount" elementType="Argument">
            <stringProp name="Argument.name">LoopCount</stringProp>
            <stringProp name="Argument.value">${__P(LoopCount, 500)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ThreadCount_OUT" elementType="Argument">
            <stringProp name="Argument.name">ThreadCount_OUT</stringProp>
            <stringProp name="Argument.value">${__P(ThreadCount_OUT, 0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ThreadCount_PULL" elementType="Argument">
            <stringProp name="Argument.name">ThreadCount_PULL</stringProp>
            <stringProp name="Argument.value">${__P(ThreadCount_PULL, 10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DeliveryType" elementType="Argument">
            <stringProp name="Argument.name">DeliveryType</stringProp>
            <stringProp name="Argument.value">${__P(DeliveryType, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">
        <stringProp name="propFilePath">${PROPFILE}</stringProp>
      </com.tag.jmeter.ext.config.PropertyReader>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="SetVariableValuesPerCurrent Env" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters">${IsAWS}</stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">String isAWS = &quot;${IsAWS}&quot;;

if(isAWS == &quot;false&quot;)
{
	//props.put(&quot;BOS_DB&quot;, &quot;G1PFBOSDB01&quot;);	
	vars.put(&quot;CRYPTO_API&quot;, &quot;https://boscryt/Crypto/V1&quot; );
	vars.put(&quot;PARTNER_API&quot;, &quot;https://bospart/baas/v1/programs&quot; );
	vars.put(&quot;CORE_API&quot;, &quot;https://boscore/CoreApi/v1/programs&quot; );
	vars.put(&quot;OAUTH_API&quot;, &quot;https://bospart/baas/v1/&quot; );
	vars.put(&quot;TOKENIZER_API&quot;, &quot;https://bostk/Tokenizer/v1/api&quot; );
}else{
	//props.put(&quot;BOS_DB&quot;, &quot;QABOSDBAG.awsnp.gdotawsnp.com&quot; );
	//Will be replaced by AWS_PRF endpoints later
	//vars.put(&quot;CRYPTO_API&quot;, &quot;https://boscryt.prf.uw2.gdotawsnp.com/Crypto/V1&quot; );
	//vars.put(&quot;PARTNER_API&quot;, &quot;https://bospart.prf.uw2.gdotawsnp.com/baas/v1/programs&quot; );
	//vars.put(&quot;CORE_API&quot;, &quot;https://boscore.prf.uw2.gdotawsnp.com/CoreApi/v1/programs&quot; );
	//vars.put(&quot;OAUTH_API&quot;, &quot;https://bospart.prf.uw2.gdotawsnp.com/baas/v1/&quot; );
	//vars.put(&quot;TOKENIZER_API&quot;, &quot;https://bostk.prf.uw2.gdotawsnp.com/Tokenizer/v1/api&quot; );
	
	//Read properties from .properties file
	vars.put(&quot;CRYPTO_API&quot;, &quot;https://${__P(CRYP_Host)}/Crypto/V1&quot; );
	vars.put(&quot;OAUTH_API&quot;, &quot;https://${__P(PRT_Host)}/baas/v1&quot; );
	vars.put(&quot;TOKENIZER_API&quot;, &quot;https://${__P(TKN_Host)}/Tokenizer/v1/api&quot; );
	vars.put(&quot;CORE_API&quot;, &quot;https://${__P(CORE_HOST)}/CoreApi/v1/programs&quot; );
	vars.put(&quot;PARTNER_API&quot;, &quot;https://${__P(PRT_Host)}/baas/v1/programs&quot; );
	
	vars.put(&quot;ProgramCode&quot;, &quot;${__P(PROGRAMCODE)}&quot; );
	vars.put(&quot;ProductCode&quot;, &quot;${__P(PRODUCT_CODE)}&quot; );
	vars.put(&quot;IN_AUTH&quot;, &quot;Basic ${__P(AUTH)}&quot; );	
	vars.put(&quot;X-GD-Bos-Crypto-Recipient-TPK&quot;, &quot;${__P(BOS-CRYPTO-TPK)}&quot; );
	//
	vars.put(&quot;X-GD-Bos-Crypto-Receiver-Priv-Slot&quot;, &quot;${__P(BOS-CRYPTO-RPS)}&quot; );
	vars.put(&quot;ProductMaterialType&quot;, &quot;${__P(ProductMaterialType)}&quot; );
	vars.put(&quot;Feature&quot;, &quot;${__P(Feature)}&quot; );
	//vars.put(&quot;BOS_DB&quot;, &quot;${__P(BOS_DB)}&quot; );
}



</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">results/aggregate-report.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename">results/response-time-graph.xml</stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transactions per Second" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename">results/transactions-per-second.csv</stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.HitsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Hits per Second" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename">results/hits-per-second.jtl</stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.LatenciesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Latencies Over Time" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename">results/response-latencies-over-time.xml</stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename">results/active-threads.jtl</stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AchOut Thread" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LoopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${ThreadCount_OUT}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">60</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json </stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="BOS GBOS DB Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://${__P(BOS_DB)}:1433;databaseName=GBOS</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">G33Nff4%$^</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">qa_automation</stringProp>
          <stringProp name="TestPlan.comments">jdbc:sqlserver://${BOS_DB}:1433;databaseName=GBOS</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="initQuery"></stringProp>
          <stringProp name="connectionProperties"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="GSS DD DB Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">DD</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://${GSS_DB}:1433;databaseName=DirectDeposit</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">G33Nff4%$^</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">qa_automation</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="initQuery"></stringProp>
          <stringProp name="connectionProperties"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC GetStashPromoAccountId" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="query">select top 1 a.accountIdentifier As PromoAccountId
from Account a
inner join Product p
on a.Productkey=p.productkey
where p.Productcode=&apos;59000&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout">1</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">PromoAccountId</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCPreProcessor>
        <hashTree/>
        <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC GetStashInvestAccountId" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="query">select top 1 a.accountIdentifier As InvestAccountId
from Account a
inner join Product p
on a.Productkey=p.productkey
where p.Productcode=&apos;59001&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout">1</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">InvestAccountId</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCPreProcessor>
        <hashTree/>
        <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC Get DD" enabled="true">
          <stringProp name="dataSource">DD</stringProp>
          <stringProp name="query">DECLARE  @StartDate DATE  = CONVERT(DATE, &apos;${START_DATE}&apos;)
DECLARE  @EndDate DATE = CONVERT(DATE, &apos;${END_DATE}&apos;)

--Get Account with DD transacions within given date range    
    SELECT top 1
		 achT.AccountIdentifier
		 --, achT.AccountNumber  AccountNumber
    FROM ACHTransaction achT  
        INNER JOIN dbo.AchProcessingBatch apb  
            ON apb.AchProcessingBatchKey = achT.AchProcessingBatchKey  
        INNER JOIN dbo.ACHTranCode atc  
            ON atc.ACHTranCodeKey = achT.ACHTranCodeKey  
        INNER JOIN dbo.ACHTranCodeType atct  
            ON atct.ACHTranCodeTypeKey = atc.ACHTranCodeTypeKey  
               AND atct.ACHTranCodeTypeKey &lt;&gt; 3  
        INNER JOIN dbo.ACHBatch achB  
            ON achB.ACHBatchKey = achT.ACHBatchKey  
        INNER JOIN dbo.ACHFileHeader achF  
            ON achF.ACHFileHeaderKey = achB.ACHFileHeaderKey  
               AND CAST(achF.ACHFileCreationDate AS DATE) &gt;= @StartDate  
               AND CAST(achF.ACHFileCreationDate AS DATE) &lt;= @EndDate               
        LEFT JOIN dbo.AchProcessingBatchStep apbs  
            ON apbs.AchProcessingBatchKey = apb.AchProcessingBatchKey  
               AND apbs.AchProcessingBatchStepConfigKey = 4  
               AND apbs.AchProcessingBatchStepStatusKey = 3  
    WHERE 
	achT.ACHTransactionStatusKey in (2,3,4) 
	--AND achT.AccountNumber LIKE &apos;101%&apos; -- Stash
	--AND achT.AccountNumber like &apos;151%&apos; -- GBR
	--AND achT.ACHValidationFailureCodeKey is not null
    ORDER BY achT.ACHTransactionKey desc</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout">1</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">DDAccountIdentifier</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCPreProcessor>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Cal-StartDate-EndDate" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.time.LocalDate;
import java.time.ZoneId;

//String a= &quot;${__timeShift(yyyy-MM-dd, ,p2D,,)}&quot;;
//String b = &quot;${__timeShift(yyyy-MM-dd, ,p-2D,,)}&quot;;

//log.info a;
//log.info b;

String endDate =LocalDate.now(ZoneId.of(&apos;America/Los_Angeles&apos;)).plusDays(2).toString();
String startDate =LocalDate.now(ZoneId.of(&apos;America/Los_Angeles&apos;)).minusDays(2).toString();

vars.put(&quot;StartDate&quot;, startDate);
vars.put(&quot;EndDate&quot;, endDate);

log.info startDate;
log.info endDate;

vars.put(&quot;TransferId&quot;, &quot;${__UUID()}&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate enrollment data" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.commons.lang.RandomStringUtils;

try{
def firstName = RandomStringUtils.randomAlphabetic(8)
def lastName = RandomStringUtils.randomAlphabetic(8)
def sSNSuffix = &quot;&quot;
def ssn = &quot;10&quot; + RandomStringUtils.randomNumeric(7)
def address1 = RandomStringUtils.randomNumeric(5) + &apos; &apos; + &apos; Foothill Blvd&apos;
def address2 = &apos;SUITE &apos; + RandomStringUtils.randomNumeric(3)
def zipCode = RandomStringUtils.randomNumeric(5)
def email = RandomStringUtils.randomAlphabetic(15)+&apos;@greendotcorp.com&apos;
TimeZone.setDefault(TimeZone.getTimeZone(&apos;UTC&apos;))
def now = new Date()
now = now.format(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;&quot;)
//now = now.format(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss&apos;Z&apos;&quot;)

//def transAmountIn = RandomStringUtils.randomNumeric(3);
//def transAmountout = Integer.parseint(transAmountIn) -50;
Random random = new Random();
int transAmountout = random.nextInt(600) + 10;
int transAmountIn = transAmountout +50;

vars.put(&quot;TransAmountIn&quot;, transAmountIn.toString())
vars.put(&quot;TransAmountout&quot;, transAmountout.toString())



def RequestId = java.util.UUID.randomUUID()

vars.put(&quot;TermsAcceptanceDateTime&quot;, now)
vars.put(&quot;RequestId&quot;, RequestId.toString())


// Personal Data
vars.put(&quot;Title&quot;, &quot;Mr&quot;)
vars.put(&quot;FirstName&quot;, firstName)
vars.put(&quot;MiddleInitials&quot;, &quot;K&quot;)
vars.put(&quot;LastName&quot;, lastName)
vars.put(&quot;AddressLine1&quot;, address1)
vars.put(&quot;AddressLine2&quot;, address2)
vars.put(&quot;City&quot;, &quot;Pasadena&quot;)
vars.put(&quot;State&quot;, &quot;CA&quot;)
vars.put(&quot;ZipCode&quot;, zipCode)
vars.put(&quot;Type&quot;, &quot;home&quot;)

//end of Personal Data
//Personal Data-Part2

vars.put(&quot;SSN&quot;, ssn)
vars.put(&quot;SSNSuffix&quot;, sSNSuffix)
vars.put(&quot;DateOfBirth&quot;, &quot;1987-02-02&quot;)
vars.put(&quot;Email&quot;, email)

def phoneNum = &apos;6&apos; + RandomStringUtils.randomNumeric(9);
vars.put(&quot;PhoneNumber&quot;, phoneNum) //&quot;6505268188&quot;

if(&quot;${ProgramCode}&quot; == &quot;gbr&quot;)
{
	vars.put(&quot;PhoneType&quot;, &quot;unspecified&quot;);
}else{
	vars.put(&quot;PhoneType&quot;, &quot;Mobile&quot;);
}

//End of Personal Data 2
//Encrypted Data part
vars.put(&quot;encryptedUserDataVersion&quot;, RequestId.toString())
vars.put(&quot;EphemeralPublicKey&quot;, RequestId.toString())
vars.put(&quot;PublicKeyHash&quot;, RequestId.toString())
vars.put(&quot;salt&quot;, RequestId.toString())
vars.put(&quot;Version&quot;, &quot;EC_v1&quot;)
vars.put(&quot;ProgramName&quot;, &quot;${ProgramCode}&quot;)


// Terms acceptance
vars.put(&quot;TermsIdentifier&quot;, RequestId.toString())
vars.put(&quot;TermsAcceptanceDateTime&quot;, now)


// Account Data
vars.put(&quot;ProductCode&quot;, &quot;${ProductCode}&quot;)
vars.put(&quot;AccountType&quot;, &quot;Savings&quot;)
vars.put(&quot;Currency&quot;, &quot;USD&quot;)
vars.put(&quot;PurseIdentifier&quot;, RequestId.toString())
vars.put(&quot;PurseType&quot;, &quot;Primary&quot;)
vars.put(&quot;UserIdentifier&quot;, RequestId.toString())


}catch (Throwable ex)
{
	log.error(&quot;Error in Generate enrollment data&quot;, ex);
	throw ex;
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${IN_AUTH}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${__UUID}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">access_token;token_type;expires_in;scope</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token;$.token_type;$.expires_in;$.scope</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserData Encryption" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;requestHeader&quot;: {&#xd;
 &quot;requestId&quot;: &quot;${RequestId}&quot;&#xd;
 },&#xd;
 &quot;version&quot;: &quot;${Version}&quot;,&#xd;
 &quot;salt&quot;: &quot;${salt}&quot;,&#xd;
 &quot;programCode&quot;: &quot;${ProgramCode}&quot;,&#xd;
 &quot;data&quot;: &quot;{\&quot;ProfileData\&quot;:{\&quot;FirstName\&quot;:\&quot;${FirstName}\&quot;,\&quot;MiddleName\&quot;:\&quot;${MiddleInitials}\&quot;,\&quot;LastName\&quot;:\&quot;${LastName}\&quot;,\&quot;Addresses\&quot;:[{\&quot;AddressLine1\&quot;:\&quot;${AddressLine1}\&quot;,\&quot;AddressLine2\&quot;:\&quot;${AddressLine2}\&quot;,\&quot;City\&quot;:\&quot;${City}\&quot;,\&quot;State\&quot;:\&quot;${State}\&quot;,\&quot;ZipCode\&quot;:\&quot;${ZipCode}\&quot;,\&quot;Type\&quot;:\&quot;${Type}\&quot;,\&quot;IsDefault\&quot;:true,\&quot;IsVerified\&quot;:false}]},\&quot;identifyingData\&quot;:{\&quot;ssnSuffix\&quot;:\&quot;${SSNSuffix}\&quot;,\&quot;ssn\&quot;:\&quot;${SSN}\&quot;,\&quot;dateOfBirth\&quot;:\&quot;${DateOfBirth}\&quot;},\&quot;email\&quot;:{\&quot;emailAddress\&quot;:\&quot;${Email}\&quot;,\&quot;IsVerified\&quot;:true},\&quot;phoneNumbers\&quot;:[{\&quot;number\&quot;:\&quot;${PhoneNumber}\&quot;,\&quot;type\&quot;:\&quot;${PhoneType}\&quot;,\&quot;isDefault\&quot;:true,\&quot;IsVerified\&quot;:true}]}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${CRYPTO_API}/encrypt</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Data Fields From Response Message" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">encryptedData;ephemeralPublicKey;publicKeyHash;version</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedData.data;$.encryptedData.ephemeralPublicKey;$.encryptedData.publicKeyHash;$.encryptedData.version</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Enrollment API" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;user&quot;:    {&#xd;
      &quot;encryptedUserData&quot;: {&quot;version&quot;:&quot;${version}&quot;,&quot;ephemeralPublicKey&quot;:&quot;${ephemeralPublicKey}&quot;,&quot;publicKeyHash&quot;:&quot;${publicKeyHash}&quot;,&quot;data&quot;:&quot;${encryptedData}&quot;},&#xd;
      &quot;termsAcceptances&quot;: [      {&#xd;
         &quot;termsIdentifier&quot;: &quot;termsAndConditions&quot;,&#xd;
         &quot;termsAcceptanceDateTime&quot;: &quot;${TermsAcceptanceDateTime}&quot;&#xd;
      }]&#xd;
   },&#xd;
   &quot;account&quot;:    {&#xd;
      &quot;productCode&quot;: &quot;${ProductCode}&quot;,&#xd;
      &quot;productMaterialType&quot;: &quot;${ProductMaterialType}&quot;,&#xd;
      &quot;currency&quot;: &quot;${Currency}&quot;,&#xd;
      &quot;additionalPurses&quot;: [      {&#xd;
         &quot;purseIdentifier&quot;: &quot;${PurseIdentifier}&quot;,&#xd;
         &quot;purseType&quot;: &quot;${PurseType}&quot;,&#xd;
         &quot;availableBalance&quot;: 0,&#xd;
         &quot;ledgerBalance&quot;: 0&#xd;
      }],&#xd;
      &quot;termsAcceptances&quot;: [      {&#xd;
         &quot;termsIdentifier&quot;: &quot;termsAndConditions&quot;,&#xd;
         &quot;termsAcceptanceDateTime&quot;: &quot;${TermsAcceptanceDateTime}&quot;,&#xd;
         &quot;termsAcceptanceFlag&quot;:true&#xd;
      }],&#xd;
      &quot;fraudData&quot;:       {&#xd;
         &quot;key&quot;: &quot;string&quot;,&#xd;
         &quot;key&quot;: {&quot;prop1&quot;:&quot;val1&quot;,&#xd;
         &quot;prop2&quot;:&quot;val2&quot;&#xd;
         }&#xd;
      }&#xd;
   },&#xd;
   &quot;requestPhysicalCardFlag&quot;: &quot;true&quot;,&#xd;
   &quot;encryptedPin&quot;:    {&#xd;
      &quot;version&quot;: &quot;string&quot;,&#xd;
      &quot;ephemeralPublicKey&quot;: &quot;string&quot;,&#xd;
      &quot;publicKeyHash&quot;: &quot;string&quot;,&#xd;
      &quot;data&quot;: &quot;string&quot;&#xd;
   },&#xd;
   &quot;executeKycFlag&quot;: true&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">80</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/enrollments</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${RequestId}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">bospart</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Valid Account is returned in response message" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-784947668">&quot;accountIdentifier&quot;:</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Validates whether or not the call was successful</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">accountIdentifier</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.account.accountIdentifier</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">GBOS</stringProp>
            <stringProp name="query">select 
pid.PaymentIdentifier,
 pid.TokenizedPAN
, PaymentInstrumentIdentifier
,cpi.last4Identity as last4ssn
from Account a
inner join AccountHolder h (nolock) on (h.AccountKey = a.AccountKey)
inner join ConsumerProfile cp (nolock) on (cp.ConsumerProfileKey = h.ConsumerProfileKey)
inner join ConsumerProfileIDentity cpi (nolock) on (cpi.ConsumerProfileKey = cp.ConsumerProfileKey)
inner join AccountHolder_PaymentIdentifier ap (nolock) on (ap.AccountHolderKey = h.AccountHolderKey)
inner join PaymentIdentifier pid (nolock) on (pid.PaymentIdentifierKey = ap.PaymentIdentifierKey)
inner join PaymentInstrument pin (nolock) on (pin.PaymentIdentifierKey = pid.PaymentIdentifierKey)
inner join PaymentInstrumentType pint (nolock) on (pint.PaymentInstrumentTypeKey = pin.PaymentInstrumentTypeKey)
where PaymentInstrumentType != &apos;Virtual&apos;
and a.AccountIdentifier=&apos;${accountIdentifier}&apos;
and cpi.IdentityTypekey=1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">PaymentIdentifier,TokenizedPAN,PaymentInstrumentIdentifier,last4ssn</stringProp>
            <stringProp name="TestPlan.comments">PaymentIdentifier,TokenizedPAN,PaymentInstrumentIdentifier,last4ssn</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCPostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request-AccountInfo" enabled="false">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select 
pid.PaymentIdentifier,
 pid.TokenizedPAN
, PaymentInstrumentIdentifier
,cp.Last4SSN as last4ssn
,cp.ConsumerProfileIdentifier as &apos;UserIdentifier&apos;
from Account a
inner join AccountHolder h (nolock) on (h.AccountKey = a.AccountKey)
inner join ConsumerProfile cp (nolock) on (cp.ConsumerProfileKey = h.ConsumerProfileKey)
inner join AccountHolder_PaymentIdentifier ap (nolock) on (ap.AccountHolderKey = h.AccountHolderKey)
inner join PaymentIdentifier pid (nolock) on (pid.PaymentIdentifierKey = ap.PaymentIdentifierKey)
inner join PaymentInstrument pin (nolock) on (pin.PaymentIdentifierKey = pid.PaymentIdentifierKey)
inner join PaymentInstrumentType pint (nolock) on (pint.PaymentInstrumentTypeKey = pin.PaymentInstrumentTypeKey)
where PaymentInstrumentType != &apos;Virtual&apos;
and a.AccountIdentifier=&apos;${accountIdentifier}&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PaymentIdentifier,TokenizedPAN,PaymentInstrumentIdentifier,last4ssn,UserIdentifier</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EncrptPinData" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;requestHeader&quot;: {&#xd;
 &quot;requestId&quot;: &quot;${RequestId}&quot;&#xd;
 },&#xd;
 &quot;version&quot;: &quot;EC_v1&quot;,&#xd;
 &quot;salt&quot;: &quot;${RequestId}&quot;,&#xd;
 &quot;programCode&quot;: &quot;${ProgramCode}&quot;,&#xd;
 &quot;data&quot;:&quot;{\&quot;pin\&quot;:\&quot;0603\&quot;}&quot;&#xd;
 }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${CRYPTO_API}/encrypt</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">version_Pin;ephemeralPublicKey_Pin;publicKeyHash_Pin;encryptedData_Pin;responseId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedData.version;$.encryptedData.ephemeralPublicKey;$.encryptedData.publicKeyHash;$.encryptedData.data;$.responseHeader.responseId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set PaymentInstrument Pin API" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;encryptedPin&quot;: {&#xd;
   &quot;version&quot;: &quot;${version_Pin}&quot;,&#xd;
   &quot;ephemeralPublicKey&quot;: &quot;${ephemeralPublicKey_Pin}&quot;,&#xd;
   &quot;publicKeyHash&quot;: &quot;${publicKeyHash_Pin}&quot;,&#xd;
   &quot;data&quot;: &quot;${encryptedData_Pin}&quot;&#xd;
}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/accounts/${accountIdentifier}/paymentinstruments/${PaymentInstrumentIdentifier_1}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${responseId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetPAN" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;token&quot;: &quot;${TokenizedPAN_1}&quot;,&#xd;
  &quot;requestHeader&quot;: {&#xd;
    &quot;requestId&quot;: &quot;${__UUID}&quot;&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${TOKENIZER_API}/Pan/deTokenize</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">PAN;requestId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.pan;$.responseHeader.responseId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetDecryptedExpDate-CoreAPI" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;requestHeader&quot;: {&#xd;
    &quot;requestId&quot;: &quot;${RequestId}&quot;,&#xd;
    &quot;options&quot;: {}&#xd;
  },&#xd;
  &quot;accountIdentifier&quot;: &quot;${accountIdentifier}&quot;,&#xd;
  &quot;paymentInstrumentIdentifier&quot;: &quot;${PaymentInstrumentIdentifier_1}&quot;,&#xd;
  &quot;includePrivatePaymentInstrumentData&quot;: true,&#xd;
  &quot;programCode&quot;: &quot;${ProgramCode}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${CORE_API}/${ProgramCode}/getPaymentInstrument</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${RequestId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">expMonth;expYear</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.paymentInstrument.privateCardData.expiration.month;$.paymentInstrument.privateCardData.expiration.year</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">01;2023</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetCVV" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;requestHeader&quot;: {&#xd;
 &quot;requestId&quot;: &quot;${RequestId}&quot;&#xd;
 },&#xd;
   &quot;paymentInstrumentType&quot;: &quot;EMV&quot;,&#xd;
   &quot;pan&quot;: &quot;${PAN}&quot;,&#xd;
   &quot;expiration&quot;: &quot;${__substring(${expYear},2,4)}${expMonth}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${CRYPTO_API}/generateCvv</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${__substring(${expYear},2,2,)}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Data Fields From Response Message" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">cvv</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.cvv</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">000</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CardData Encryption" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;requestHeader&quot;: {&#xd;
 &quot;requestId&quot;: &quot;${RequestId}&quot;&#xd;
 },&#xd;
 &quot;version&quot;: &quot;${version}&quot;,&#xd;
 &quot;salt&quot;: &quot;${RequestId}&quot;,&#xd;
 &quot;programCode&quot;: &quot;${ProgramCode}&quot;,&#xd;
 &quot;data&quot;: &quot;{\&quot;cvv\&quot;:\&quot;${cvv}\&quot;,\&quot;expiration\&quot;:{\&quot;month\&quot;:\&quot;${expMonth}\&quot;,\&quot;year\&quot;:\&quot;${expYear}\&quot;},\&quot;pan\&quot;:\&quot;${PAN}\&quot;}&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${CRYPTO_API}/encrypt</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Data Fields From Response Message" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">encryptedData_active;ephemeralPublicKey_active;publicKeyHash_active;version_active</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedData.data;$.encryptedData.ephemeralPublicKey;$.encryptedData.publicKeyHash;$.encryptedData.version</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActiveCard API" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;encryptedPrivatePaymentInstrumentData&quot;: {&quot;version&quot;:&quot;${version_active}&quot;,&quot;ephemeralPublicKey&quot;:&quot;${ephemeralPublicKey_active}&quot;,&quot;publicKeyHash&quot;:&quot;${publicKeyHash_active}&quot;,&quot;data&quot;:&quot;${encryptedData_active}&quot;},&#xd;
  &quot;last4Ssn&quot;: &quot;${last4ssn_1}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/accounts/${accountIdentifier}/activateCard</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${RequestId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1297677681">&quot;description&quot;:&quot;Success&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">paymentInstrumentIdentifier</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.paymentInstrumentIdentifier</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer API-DisbursementIn-SourceToTarget" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;transferIdentifier&quot;: &quot;${__UUID}&quot;,&#xd;
  &quot;transferType&quot;: &quot;disbursementIn&quot;,&#xd;
  &quot;transferAuthorizationType&quot;: &quot;execute&quot;,&#xd;
  &quot;partnerReferenceData&quot;: &quot;Transfer&quot;,&#xd;
  &quot;initiator&quot;: &quot;${PromoAccountId_1}&quot;,&#xd;
  &quot;transferRoute&quot;: {&#xd;
    &quot;transactionAmount&quot;: ${TransAmountIn},&#xd;
    &quot;sourceTransferEndpoint&quot;: {&#xd;
      &quot;transferEndpointType&quot;: &quot;programFundingSource&quot;,&#xd;
      &quot;identifier&quot;: &quot;${PromoAccountId_1}&quot;,&#xd;
      &quot;currency&quot;: &quot;USD&quot;&#xd;
    },&#xd;
    &quot;targetTransferEndpoint&quot;: {&#xd;
      &quot;transferEndpointType&quot;: &quot;account&quot;,&#xd;
      &quot;identifier&quot;: &quot;${accountIdentifier}&quot;,&#xd;
      &quot;currency&quot;: &quot;USD&quot;&#xd;
    }&#xd;
  },&#xd;
&quot;fraudData&quot;:       {&#xd;
  &quot;key&quot;: &quot;string&quot;,&#xd;
  &quot;key&quot;: {&quot;prop1&quot;:&quot;test&quot;,&#xd;
  &quot;prop2&quot;:&quot;BaaS&quot;&#xd;
  }&#xd;
}&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/transfers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${RequestId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1297677681">&quot;description&quot;:&quot;Success&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer API-DisbursementOut" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;transferIdentifier&quot;: &quot;${__UUID}&quot;,&#xd;
  &quot;transferType&quot;: &quot;disbursementOut&quot;,&#xd;
  &quot;transferAuthorizationType&quot;: &quot;execute&quot;,&#xd;
  &quot;initiator&quot;: &quot;${accountIdentifier}&quot;,&#xd;
  &quot;transferRoute&quot;: {&#xd;
    &quot;transactionAmount&quot;: 1.00,&#xd;
    &quot;sourceTransferEndpoint&quot;: {&#xd;
      &quot;transferEndpointType&quot;: &quot;account&quot;,&#xd;
      &quot;identifier&quot;: &quot;${accountIdentifier}&quot;,&#xd;
      &quot;currency&quot;: &quot;USD&quot;&#xd;
    },&#xd;
    &quot;targetTransferEndpoint&quot;: {&#xd;
      &quot;transferEndpointType&quot;: &quot;programFundingSource&quot;,&#xd;
      &quot;identifier&quot;: &quot;${PartnerAccountIdentifer_1}&quot;,&#xd;
      &quot;currency&quot;: &quot;USD&quot;&#xd;
    }&#xd;
  },&#xd;
&quot;fraudData&quot;:       {&#xd;
  &quot;key&quot;: &quot;string&quot;,&#xd;
  &quot;key&quot;: {&quot;prop1&quot;:&quot;test&quot;,&#xd;
  &quot;prop2&quot;:&quot;BaaS&quot;&#xd;
  }&#xd;
}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/transfers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${RequestId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1297677681">&quot;description&quot;:&quot;Success&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EncryptBankData" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;requestHeader&quot;: {&#xd;
 &quot;requestId&quot;: &quot;${RequestId}&quot;&#xd;
 },&#xd;
 &quot;version&quot;: &quot;EC_v1&quot;,&#xd;
 &quot;salt&quot;: &quot;${RequestId}&quot;,&#xd;
 &quot;programCode&quot;: &quot;${ProgramCode}&quot;,&#xd;
 &quot;data&quot;: &quot;{\&quot;routingNumber\&quot;:\&quot;122000661\&quot;,\&quot;firstName\&quot;:\&quot;Perftest${__RandomString(3,0123456789,)}\&quot;,\&quot;lastName\&quot;:\&quot;BaaS\&quot;,\&quot;accountType\&quot;:\&quot;Checking\&quot;,\&quot;bankName\&quot;:\&quot;Bank of America\&quot;,\&quot;accountNumber\&quot;:\&quot;4015${__RandomString(13,0123456789,)}\&quot;}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${CRYPTO_API}/encrypt</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${__Random(000000000000,999999999999,)}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">version_Bank;ephemeralPublicKey_Bank;publicKeyHash_Bank;encryptedData_Bank</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedData.version;$.encryptedData.ephemeralPublicKey;$.encryptedData.publicKeyHash;$.encryptedData.data</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Achout API - Account To Bank" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;transferIdentifier&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;transferType&quot;:&quot;achOut&quot;,&#xd;
  &quot;currency&quot;: &quot;USD&quot;,&#xd;
  &quot;transferRoute&quot;: {&#xd;
    &quot;transactionAmount&quot;: ${transAmt},&#xd;
    &quot;sourceTransferEndpoint&quot;: {&#xd;
      &quot;transferEndpointType&quot;: &quot;account&quot;,&#xd;
      &quot;accountIdentifier&quot;: &quot;${accountIdentifier}&quot;&#xd;
    },&#xd;
    &quot;targetTransferEndpoint&quot;: {&#xd;
      &quot;encryptedBankAccount&quot;: {&quot;version&quot;:&quot;${version_Bank}&quot;,&quot;ephemeralPublicKey&quot;:&quot;${ephemeralPublicKey_Bank}&quot;,&quot;publicKeyHash&quot;:&quot;${publicKeyHash_Bank}&quot;,&quot;data&quot;:&quot;${encryptedData_Bank}&quot;}&#xd;
    }&#xd;
  },&#xd;
  &quot;fraudData&quot;: {}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/transfers/ach</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="transAmt Population" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__Random(1,25)} ${__Random(0,99)}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;transAmt&quot;, args[0] + &quot;.&quot; + args[1]);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${RequestId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1297677681">&quot;description&quot;:&quot;Success&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetTransactions API" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/accounts/${accountIdentifier}/transactions?startDate=${StartDate}&amp;endDate=${EndDate}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${RequestId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="239463124">&quot;totalRecordCount&quot;:</stringProp>
              <stringProp name="727755023">&quot;transactions&quot;:</stringProp>
              <stringProp name="-1297677681">&quot;description&quot;:&quot;Success&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AchPull Thread" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LoopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${ThreadCount_PULL}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">60</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json </stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="BOS GBOS DB Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://${__P(BOS_DB)}:1433;databaseName=GBOS</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">G33Nff4%$^</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">qa_automation</stringProp>
          <stringProp name="TestPlan.comments">jdbc:sqlserver://${BOS_DB}:1433;databaseName=GBOS</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="initQuery"></stringProp>
          <stringProp name="connectionProperties"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="GSS DD DB Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">DD</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://${GSS_DB}:1433;databaseName=DirectDeposit</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">G33Nff4%$^</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">qa_automation</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="initQuery"></stringProp>
          <stringProp name="connectionProperties"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC GetStashPromoAccountId" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="query">select top 1 a.accountIdentifier As PromoAccountId
from Account a
inner join Product p
on a.Productkey=p.productkey
where p.Productcode=&apos;59000&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout">1</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">PromoAccountId</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCPreProcessor>
        <hashTree/>
        <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC GetStashInvestAccountId" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="query">select top 1 a.accountIdentifier As InvestAccountId
from Account a
inner join Product p
on a.Productkey=p.productkey
where p.Productcode=&apos;59001&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout">1</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">InvestAccountId</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCPreProcessor>
        <hashTree/>
        <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC Get DD" enabled="true">
          <stringProp name="dataSource">DD</stringProp>
          <stringProp name="query">DECLARE  @StartDate DATE  = CONVERT(DATE, &apos;${START_DATE}&apos;)
DECLARE  @EndDate DATE = CONVERT(DATE, &apos;${END_DATE}&apos;)

--Get Account with DD transacions within given date range    
    SELECT top 1
		 achT.AccountIdentifier
		 --, achT.AccountNumber  AccountNumber
    FROM ACHTransaction achT  
        INNER JOIN dbo.AchProcessingBatch apb  
            ON apb.AchProcessingBatchKey = achT.AchProcessingBatchKey  
        INNER JOIN dbo.ACHTranCode atc  
            ON atc.ACHTranCodeKey = achT.ACHTranCodeKey  
        INNER JOIN dbo.ACHTranCodeType atct  
            ON atct.ACHTranCodeTypeKey = atc.ACHTranCodeTypeKey  
               AND atct.ACHTranCodeTypeKey &lt;&gt; 3  
        INNER JOIN dbo.ACHBatch achB  
            ON achB.ACHBatchKey = achT.ACHBatchKey  
        INNER JOIN dbo.ACHFileHeader achF  
            ON achF.ACHFileHeaderKey = achB.ACHFileHeaderKey  
               AND CAST(achF.ACHFileCreationDate AS DATE) &gt;= @StartDate  
               AND CAST(achF.ACHFileCreationDate AS DATE) &lt;= @EndDate               
        LEFT JOIN dbo.AchProcessingBatchStep apbs  
            ON apbs.AchProcessingBatchKey = apb.AchProcessingBatchKey  
               AND apbs.AchProcessingBatchStepConfigKey = 4  
               AND apbs.AchProcessingBatchStepStatusKey = 3  
    WHERE 
	achT.ACHTransactionStatusKey in (2,3,4) 
	--AND achT.AccountNumber LIKE &apos;101%&apos; -- Stash
	--AND achT.AccountNumber like &apos;151%&apos; -- GBR
	--AND achT.ACHValidationFailureCodeKey is not null
    ORDER BY achT.ACHTransactionKey desc</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout">1</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">DDAccountIdentifier</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCPreProcessor>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Cal-StartDate-EndDate" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.time.LocalDate;
import java.time.ZoneId;

//String a= &quot;${__timeShift(yyyy-MM-dd, ,p2D,,)}&quot;;
//String b = &quot;${__timeShift(yyyy-MM-dd, ,p-2D,,)}&quot;;

//log.info a;
//log.info b;

String endDate =LocalDate.now(ZoneId.of(&apos;America/Los_Angeles&apos;)).plusDays(2).toString();
String startDate =LocalDate.now(ZoneId.of(&apos;America/Los_Angeles&apos;)).minusDays(2).toString();

vars.put(&quot;StartDate&quot;, startDate);
vars.put(&quot;EndDate&quot;, endDate);

log.info startDate;
log.info endDate;

vars.put(&quot;TransferId&quot;, &quot;${__UUID()}&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate enrollment data" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.commons.lang.RandomStringUtils;

try{
def firstName = RandomStringUtils.randomAlphabetic(8)
def lastName = RandomStringUtils.randomAlphabetic(8)
def sSNSuffix = &quot;&quot;
def ssn = &quot;10&quot; + RandomStringUtils.randomNumeric(7)
def address1 = RandomStringUtils.randomNumeric(5) + &apos; &apos; + &apos; Foothill Blvd&apos;
def address2 = &apos;SUITE &apos; + RandomStringUtils.randomNumeric(3)
def zipCode = RandomStringUtils.randomNumeric(5)
def email = RandomStringUtils.randomAlphabetic(15)+&apos;@greendotcorp.com&apos;
TimeZone.setDefault(TimeZone.getTimeZone(&apos;UTC&apos;))
def now = new Date()
now = now.format(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;&quot;)
//now = now.format(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss&apos;Z&apos;&quot;)

//def transAmountIn = RandomStringUtils.randomNumeric(3);
//def transAmountout = Integer.parseint(transAmountIn) -50;
Random random = new Random();
int transAmountout = random.nextInt(600) + 10;
int transAmountIn = transAmountout +50;

vars.put(&quot;TransAmountIn&quot;, transAmountIn.toString())
vars.put(&quot;TransAmountout&quot;, transAmountout.toString())



def RequestId = java.util.UUID.randomUUID()

vars.put(&quot;TermsAcceptanceDateTime&quot;, now)
vars.put(&quot;RequestId&quot;, RequestId.toString())


// Personal Data
vars.put(&quot;Title&quot;, &quot;Mr&quot;)
vars.put(&quot;FirstName&quot;, firstName)
vars.put(&quot;MiddleInitials&quot;, &quot;K&quot;)
vars.put(&quot;LastName&quot;, lastName)
vars.put(&quot;AddressLine1&quot;, address1)
vars.put(&quot;AddressLine2&quot;, address2)
vars.put(&quot;City&quot;, &quot;Pasadena&quot;)
vars.put(&quot;State&quot;, &quot;CA&quot;)
vars.put(&quot;ZipCode&quot;, zipCode)
vars.put(&quot;Type&quot;, &quot;home&quot;)

//end of Personal Data
//Personal Data-Part2

vars.put(&quot;SSN&quot;, ssn)
vars.put(&quot;SSNSuffix&quot;, sSNSuffix)
vars.put(&quot;DateOfBirth&quot;, &quot;1987-02-02&quot;)
vars.put(&quot;Email&quot;, email)

def phoneNum = &apos;6&apos; + RandomStringUtils.randomNumeric(9);
vars.put(&quot;PhoneNumber&quot;, phoneNum) //&quot;6505268188&quot;

if(&quot;${ProgramCode}&quot; == &quot;gbr&quot;)
{
	vars.put(&quot;PhoneType&quot;, &quot;unspecified&quot;);
}else{
	vars.put(&quot;PhoneType&quot;, &quot;Mobile&quot;);
}

//End of Personal Data 2
//Encrypted Data part
vars.put(&quot;encryptedUserDataVersion&quot;, RequestId.toString())
vars.put(&quot;EphemeralPublicKey&quot;, RequestId.toString())
vars.put(&quot;PublicKeyHash&quot;, RequestId.toString())
vars.put(&quot;salt&quot;, RequestId.toString())
vars.put(&quot;Version&quot;, &quot;EC_v1&quot;)
vars.put(&quot;ProgramName&quot;, &quot;${ProgramCode}&quot;)


// Terms acceptance
vars.put(&quot;TermsIdentifier&quot;, RequestId.toString())
vars.put(&quot;TermsAcceptanceDateTime&quot;, now)


// Account Data
vars.put(&quot;ProductCode&quot;, &quot;${ProductCode}&quot;)
vars.put(&quot;AccountType&quot;, &quot;Savings&quot;)
vars.put(&quot;Currency&quot;, &quot;USD&quot;)
vars.put(&quot;PurseIdentifier&quot;, RequestId.toString())
vars.put(&quot;PurseType&quot;, &quot;Primary&quot;)
vars.put(&quot;UserIdentifier&quot;, RequestId.toString())


}catch (Throwable ex)
{
	log.error(&quot;Error in Generate enrollment data&quot;, ex);
	throw ex;
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${IN_AUTH}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${__UUID}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">access_token;token_type;expires_in;scope</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token;$.token_type;$.expires_in;$.scope</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserData Encryption" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;requestHeader&quot;: {&#xd;
 &quot;requestId&quot;: &quot;${RequestId}&quot;&#xd;
 },&#xd;
 &quot;version&quot;: &quot;${Version}&quot;,&#xd;
 &quot;salt&quot;: &quot;${salt}&quot;,&#xd;
 &quot;programCode&quot;: &quot;${ProgramCode}&quot;,&#xd;
 &quot;data&quot;: &quot;{\&quot;ProfileData\&quot;:{\&quot;FirstName\&quot;:\&quot;${FirstName}\&quot;,\&quot;MiddleName\&quot;:\&quot;${MiddleInitials}\&quot;,\&quot;LastName\&quot;:\&quot;${LastName}\&quot;,\&quot;Addresses\&quot;:[{\&quot;AddressLine1\&quot;:\&quot;${AddressLine1}\&quot;,\&quot;AddressLine2\&quot;:\&quot;${AddressLine2}\&quot;,\&quot;City\&quot;:\&quot;${City}\&quot;,\&quot;State\&quot;:\&quot;${State}\&quot;,\&quot;ZipCode\&quot;:\&quot;${ZipCode}\&quot;,\&quot;Type\&quot;:\&quot;${Type}\&quot;,\&quot;IsDefault\&quot;:true,\&quot;IsVerified\&quot;:false}]},\&quot;identifyingData\&quot;:{\&quot;ssnSuffix\&quot;:\&quot;${SSNSuffix}\&quot;,\&quot;ssn\&quot;:\&quot;${SSN}\&quot;,\&quot;dateOfBirth\&quot;:\&quot;${DateOfBirth}\&quot;},\&quot;email\&quot;:{\&quot;emailAddress\&quot;:\&quot;${Email}\&quot;,\&quot;IsVerified\&quot;:true},\&quot;phoneNumbers\&quot;:[{\&quot;number\&quot;:\&quot;${PhoneNumber}\&quot;,\&quot;type\&quot;:\&quot;${PhoneType}\&quot;,\&quot;isDefault\&quot;:true,\&quot;IsVerified\&quot;:true}]}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${CRYPTO_API}/encrypt</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Data Fields From Response Message" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">encryptedData;ephemeralPublicKey;publicKeyHash;version</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedData.data;$.encryptedData.ephemeralPublicKey;$.encryptedData.publicKeyHash;$.encryptedData.version</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Enrollment API" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;user&quot;:    {&#xd;
      &quot;encryptedUserData&quot;: {&quot;version&quot;:&quot;${version}&quot;,&quot;ephemeralPublicKey&quot;:&quot;${ephemeralPublicKey}&quot;,&quot;publicKeyHash&quot;:&quot;${publicKeyHash}&quot;,&quot;data&quot;:&quot;${encryptedData}&quot;},&#xd;
      &quot;termsAcceptances&quot;: [      {&#xd;
         &quot;termsIdentifier&quot;: &quot;termsAndConditions&quot;,&#xd;
         &quot;termsAcceptanceDateTime&quot;: &quot;${TermsAcceptanceDateTime}&quot;&#xd;
      }]&#xd;
   },&#xd;
   &quot;account&quot;:    {&#xd;
      &quot;productCode&quot;: &quot;${ProductCode}&quot;,&#xd;
      &quot;productMaterialType&quot;: &quot;${ProductMaterialType}&quot;,&#xd;
      &quot;currency&quot;: &quot;${Currency}&quot;,&#xd;
      &quot;additionalPurses&quot;: [      {&#xd;
         &quot;purseIdentifier&quot;: &quot;${PurseIdentifier}&quot;,&#xd;
         &quot;purseType&quot;: &quot;${PurseType}&quot;,&#xd;
         &quot;availableBalance&quot;: 0,&#xd;
         &quot;ledgerBalance&quot;: 0&#xd;
      }],&#xd;
      &quot;termsAcceptances&quot;: [      {&#xd;
         &quot;termsIdentifier&quot;: &quot;termsAndConditions&quot;,&#xd;
         &quot;termsAcceptanceDateTime&quot;: &quot;${TermsAcceptanceDateTime}&quot;,&#xd;
         &quot;termsAcceptanceFlag&quot;:true&#xd;
      }],&#xd;
      &quot;fraudData&quot;:       {&#xd;
         &quot;key&quot;: &quot;string&quot;,&#xd;
         &quot;key&quot;: {&quot;prop1&quot;:&quot;val1&quot;,&#xd;
         &quot;prop2&quot;:&quot;val2&quot;&#xd;
         }&#xd;
      }&#xd;
   },&#xd;
   &quot;requestPhysicalCardFlag&quot;: &quot;true&quot;,&#xd;
   &quot;encryptedPin&quot;:    {&#xd;
      &quot;version&quot;: &quot;string&quot;,&#xd;
      &quot;ephemeralPublicKey&quot;: &quot;string&quot;,&#xd;
      &quot;publicKeyHash&quot;: &quot;string&quot;,&#xd;
      &quot;data&quot;: &quot;string&quot;&#xd;
   },&#xd;
   &quot;executeKycFlag&quot;: true&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">80</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/enrollments</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${RequestId}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">bospart</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Valid Account is returned in response message" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-784947668">&quot;accountIdentifier&quot;:</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Validates whether or not the call was successful</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">accountIdentifier</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.account.accountIdentifier</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">GBOS</stringProp>
            <stringProp name="query">select 
pid.PaymentIdentifier,
 pid.TokenizedPAN
, PaymentInstrumentIdentifier
,cpi.last4Identity as last4ssn
from Account a
inner join AccountHolder h (nolock) on (h.AccountKey = a.AccountKey)
inner join ConsumerProfile cp (nolock) on (cp.ConsumerProfileKey = h.ConsumerProfileKey)
inner join ConsumerProfileIDentity cpi (nolock) on (cpi.ConsumerProfileKey = cp.ConsumerProfileKey)
inner join AccountHolder_PaymentIdentifier ap (nolock) on (ap.AccountHolderKey = h.AccountHolderKey)
inner join PaymentIdentifier pid (nolock) on (pid.PaymentIdentifierKey = ap.PaymentIdentifierKey)
inner join PaymentInstrument pin (nolock) on (pin.PaymentIdentifierKey = pid.PaymentIdentifierKey)
inner join PaymentInstrumentType pint (nolock) on (pint.PaymentInstrumentTypeKey = pin.PaymentInstrumentTypeKey)
where PaymentInstrumentType != &apos;Virtual&apos;
and a.AccountIdentifier=&apos;${accountIdentifier}&apos;
and cpi.IdentityTypekey=1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">PaymentIdentifier,TokenizedPAN,PaymentInstrumentIdentifier,last4ssn</stringProp>
            <stringProp name="TestPlan.comments">PaymentIdentifier,TokenizedPAN,PaymentInstrumentIdentifier,last4ssn</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCPostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request-AccountInfo" enabled="false">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select 
pid.PaymentIdentifier,
 pid.TokenizedPAN
, PaymentInstrumentIdentifier
,cp.Last4SSN as last4ssn
,cp.ConsumerProfileIdentifier as &apos;UserIdentifier&apos;
from Account a
inner join AccountHolder h (nolock) on (h.AccountKey = a.AccountKey)
inner join ConsumerProfile cp (nolock) on (cp.ConsumerProfileKey = h.ConsumerProfileKey)
inner join AccountHolder_PaymentIdentifier ap (nolock) on (ap.AccountHolderKey = h.AccountHolderKey)
inner join PaymentIdentifier pid (nolock) on (pid.PaymentIdentifierKey = ap.PaymentIdentifierKey)
inner join PaymentInstrument pin (nolock) on (pin.PaymentIdentifierKey = pid.PaymentIdentifierKey)
inner join PaymentInstrumentType pint (nolock) on (pint.PaymentInstrumentTypeKey = pin.PaymentInstrumentTypeKey)
where PaymentInstrumentType != &apos;Virtual&apos;
and a.AccountIdentifier=&apos;${accountIdentifier}&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PaymentIdentifier,TokenizedPAN,PaymentInstrumentIdentifier,last4ssn,UserIdentifier</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EncrptPinData" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;requestHeader&quot;: {&#xd;
 &quot;requestId&quot;: &quot;${RequestId}&quot;&#xd;
 },&#xd;
 &quot;version&quot;: &quot;EC_v1&quot;,&#xd;
 &quot;salt&quot;: &quot;${RequestId}&quot;,&#xd;
 &quot;programCode&quot;: &quot;${ProgramCode}&quot;,&#xd;
 &quot;data&quot;:&quot;{\&quot;pin\&quot;:\&quot;0603\&quot;}&quot;&#xd;
 }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${CRYPTO_API}/encrypt</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">version_Pin;ephemeralPublicKey_Pin;publicKeyHash_Pin;encryptedData_Pin;responseId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedData.version;$.encryptedData.ephemeralPublicKey;$.encryptedData.publicKeyHash;$.encryptedData.data;$.responseHeader.responseId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set PaymentInstrument Pin API" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;encryptedPin&quot;: {&#xd;
   &quot;version&quot;: &quot;${version_Pin}&quot;,&#xd;
   &quot;ephemeralPublicKey&quot;: &quot;${ephemeralPublicKey_Pin}&quot;,&#xd;
   &quot;publicKeyHash&quot;: &quot;${publicKeyHash_Pin}&quot;,&#xd;
   &quot;data&quot;: &quot;${encryptedData_Pin}&quot;&#xd;
}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/accounts/${accountIdentifier}/paymentinstruments/${PaymentInstrumentIdentifier_1}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${responseId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetPAN" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;token&quot;: &quot;${TokenizedPAN_1}&quot;,&#xd;
  &quot;requestHeader&quot;: {&#xd;
    &quot;requestId&quot;: &quot;${__UUID}&quot;&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${TOKENIZER_API}/Pan/deTokenize</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">PAN;requestId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.pan;$.responseHeader.responseId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetDecryptedExpDate-CoreAPI" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;requestHeader&quot;: {&#xd;
    &quot;requestId&quot;: &quot;${RequestId}&quot;,&#xd;
    &quot;options&quot;: {}&#xd;
  },&#xd;
  &quot;accountIdentifier&quot;: &quot;${accountIdentifier}&quot;,&#xd;
  &quot;paymentInstrumentIdentifier&quot;: &quot;${PaymentInstrumentIdentifier_1}&quot;,&#xd;
  &quot;includePrivatePaymentInstrumentData&quot;: true,&#xd;
  &quot;programCode&quot;: &quot;${ProgramCode}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${CORE_API}/${ProgramCode}/getPaymentInstrument</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${RequestId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">expMonth;expYear</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.paymentInstrument.privateCardData.expiration.month;$.paymentInstrument.privateCardData.expiration.year</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">01;2023</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetCVV" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;requestHeader&quot;: {&#xd;
 &quot;requestId&quot;: &quot;${RequestId}&quot;&#xd;
 },&#xd;
   &quot;paymentInstrumentType&quot;: &quot;EMV&quot;,&#xd;
   &quot;pan&quot;: &quot;${PAN}&quot;,&#xd;
   &quot;expiration&quot;: &quot;${__substring(${expYear},2,4)}${expMonth}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${CRYPTO_API}/generateCvv</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${__substring(${expYear},2,2,)}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Data Fields From Response Message" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">cvv</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.cvv</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">000</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CardData Encryption" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;requestHeader&quot;: {&#xd;
 &quot;requestId&quot;: &quot;${RequestId}&quot;&#xd;
 },&#xd;
 &quot;version&quot;: &quot;${version}&quot;,&#xd;
 &quot;salt&quot;: &quot;${RequestId}&quot;,&#xd;
 &quot;programCode&quot;: &quot;${ProgramCode}&quot;,&#xd;
 &quot;data&quot;: &quot;{\&quot;cvv\&quot;:\&quot;${cvv}\&quot;,\&quot;expiration\&quot;:{\&quot;month\&quot;:\&quot;${expMonth}\&quot;,\&quot;year\&quot;:\&quot;${expYear}\&quot;},\&quot;pan\&quot;:\&quot;${PAN}\&quot;}&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${CRYPTO_API}/encrypt</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Data Fields From Response Message" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">encryptedData_active;ephemeralPublicKey_active;publicKeyHash_active;version_active</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedData.data;$.encryptedData.ephemeralPublicKey;$.encryptedData.publicKeyHash;$.encryptedData.version</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActiveCard API" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;encryptedPrivatePaymentInstrumentData&quot;: {&quot;version&quot;:&quot;${version_active}&quot;,&quot;ephemeralPublicKey&quot;:&quot;${ephemeralPublicKey_active}&quot;,&quot;publicKeyHash&quot;:&quot;${publicKeyHash_active}&quot;,&quot;data&quot;:&quot;${encryptedData_active}&quot;},&#xd;
  &quot;last4Ssn&quot;: &quot;${last4ssn_1}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/accounts/${accountIdentifier}/activateCard</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${RequestId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1297677681">&quot;description&quot;:&quot;Success&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">paymentInstrumentIdentifier</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.paymentInstrumentIdentifier</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer API-DisbursementIn-SourceToTarget" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;transferIdentifier&quot;: &quot;${__UUID}&quot;,&#xd;
  &quot;transferType&quot;: &quot;disbursementIn&quot;,&#xd;
  &quot;transferAuthorizationType&quot;: &quot;execute&quot;,&#xd;
  &quot;partnerReferenceData&quot;: &quot;Transfer&quot;,&#xd;
  &quot;initiator&quot;: &quot;${PromoAccountId_1}&quot;,&#xd;
  &quot;transferRoute&quot;: {&#xd;
    &quot;transactionAmount&quot;: ${TransAmountIn},&#xd;
    &quot;sourceTransferEndpoint&quot;: {&#xd;
      &quot;transferEndpointType&quot;: &quot;programFundingSource&quot;,&#xd;
      &quot;identifier&quot;: &quot;${PromoAccountId_1}&quot;,&#xd;
      &quot;currency&quot;: &quot;USD&quot;&#xd;
    },&#xd;
    &quot;targetTransferEndpoint&quot;: {&#xd;
      &quot;transferEndpointType&quot;: &quot;account&quot;,&#xd;
      &quot;identifier&quot;: &quot;${accountIdentifier}&quot;,&#xd;
      &quot;currency&quot;: &quot;USD&quot;&#xd;
    }&#xd;
  },&#xd;
&quot;fraudData&quot;:       {&#xd;
  &quot;key&quot;: &quot;string&quot;,&#xd;
  &quot;key&quot;: {&quot;prop1&quot;:&quot;test&quot;,&#xd;
  &quot;prop2&quot;:&quot;BaaS&quot;&#xd;
  }&#xd;
}&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/transfers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${RequestId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1297677681">&quot;description&quot;:&quot;Success&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer API-DisbursementOut" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;transferIdentifier&quot;: &quot;${__UUID}&quot;,&#xd;
  &quot;transferType&quot;: &quot;disbursementOut&quot;,&#xd;
  &quot;transferAuthorizationType&quot;: &quot;execute&quot;,&#xd;
  &quot;initiator&quot;: &quot;${accountIdentifier}&quot;,&#xd;
  &quot;transferRoute&quot;: {&#xd;
    &quot;transactionAmount&quot;: 1.00,&#xd;
    &quot;sourceTransferEndpoint&quot;: {&#xd;
      &quot;transferEndpointType&quot;: &quot;account&quot;,&#xd;
      &quot;identifier&quot;: &quot;${accountIdentifier}&quot;,&#xd;
      &quot;currency&quot;: &quot;USD&quot;&#xd;
    },&#xd;
    &quot;targetTransferEndpoint&quot;: {&#xd;
      &quot;transferEndpointType&quot;: &quot;programFundingSource&quot;,&#xd;
      &quot;identifier&quot;: &quot;${PartnerAccountIdentifer_1}&quot;,&#xd;
      &quot;currency&quot;: &quot;USD&quot;&#xd;
    }&#xd;
  },&#xd;
&quot;fraudData&quot;:       {&#xd;
  &quot;key&quot;: &quot;string&quot;,&#xd;
  &quot;key&quot;: {&quot;prop1&quot;:&quot;test&quot;,&#xd;
  &quot;prop2&quot;:&quot;BaaS&quot;&#xd;
  }&#xd;
}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/transfers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${RequestId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1297677681">&quot;description&quot;:&quot;Success&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAccountBalance After DisbursementIn" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/enrollments/accounts/${accountIdentifier}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${RequestId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1392586995">&quot;availableBalance&quot;:</stringProp>
              <stringProp name="1474436201">&quot;ledgerBalance&quot;:</stringProp>
              <stringProp name="-1297677681">&quot;description&quot;:&quot;Success&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EncryptBankData" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;requestHeader&quot;: {&#xd;
 &quot;requestId&quot;: &quot;${RequestId}&quot;&#xd;
 },&#xd;
 &quot;version&quot;: &quot;EC_v1&quot;,&#xd;
 &quot;salt&quot;: &quot;${RequestId}&quot;,&#xd;
 &quot;programCode&quot;: &quot;${ProgramCode}&quot;,&#xd;
 &quot;data&quot;: &quot;{\&quot;routingNumber\&quot;:\&quot;122000661\&quot;,\&quot;firstName\&quot;:\&quot;Perftest${__RandomString(3,0123456789,)}\&quot;,\&quot;lastName\&quot;:\&quot;BaaS\&quot;,\&quot;accountType\&quot;:\&quot;Checking\&quot;,\&quot;bankName\&quot;:\&quot;GDot Bank\&quot;,\&quot;accountNumber\&quot;:\&quot;4015${__RandomString(13,0123456789,)}\&quot;}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${CRYPTO_API}/encrypt</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${__Random(000000000000,999999999999,)}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">version_Bank;ephemeralPublicKey_Bank;publicKeyHash_Bank;encryptedData_Bank</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedData.version;$.encryptedData.ephemeralPublicKey;$.encryptedData.publicKeyHash;$.encryptedData.data</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Achpull API - Account To Bank" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;transferIdentifier&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;transferType&quot;:&quot;achPull&quot;,&#xd;
  &quot;currency&quot;: &quot;USD&quot;,&#xd;
  &quot;transferRoute&quot;: {&#xd;
    &quot;transactionAmount&quot;: ${transAmt},&#xd;
    &quot;deliveryType&quot;: &quot;${DeliveryType}&quot;,&#xd;
    &quot;sourceTransferEndpoint&quot;: {&#xd;
      &quot;transferEndpointType&quot;: &quot;account&quot;,&#xd;
      &quot;accountIdentifier&quot;: &quot;${accountIdentifier}&quot;&#xd;
    },&#xd;
    &quot;targetTransferEndpoint&quot;: {&#xd;
      &quot;encryptedBankAccount&quot;: {&quot;version&quot;:&quot;${version_Bank}&quot;,&quot;ephemeralPublicKey&quot;:&quot;${ephemeralPublicKey_Bank}&quot;,&quot;publicKeyHash&quot;:&quot;${publicKeyHash_Bank}&quot;,&quot;data&quot;:&quot;${encryptedData_Bank}&quot;}&#xd;
    },&#xd;
    &quot;recurringType&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;fraudData&quot;: {}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/transfers/ach</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="transAmt Population" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__Random(1,25)} ${__Random(0,99)}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;transAmt&quot;, args[0] + &quot;.&quot; + args[1]);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${RequestId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1297677681">&quot;description&quot;:&quot;Success&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetTransactions API" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/accounts/${accountIdentifier}/transactions?startDate=${StartDate}&amp;endDate=${EndDate}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${RequestId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="239463124">&quot;totalRecordCount&quot;:</stringProp>
              <stringProp name="727755023">&quot;transactions&quot;:</stringProp>
              <stringProp name="-1297677681">&quot;description&quot;:&quot;Success&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAccountBalance After ACHPull" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/enrollments/accounts/${accountIdentifier}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${RequestId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1392586995">&quot;availableBalance&quot;:</stringProp>
              <stringProp name="1474436201">&quot;ledgerBalance&quot;:</stringProp>
              <stringProp name="-1297677681">&quot;description&quot;:&quot;Success&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="HealthCheck Thread" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json </stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">X-GD-RequestId</stringProp>
              <stringProp name="Header.value">${__UUID}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Host</stringProp>
              <stringProp name="Header.value">bospart</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="AccountIdentifier" elementType="Argument">
              <stringProp name="Argument.name">AccountIdentifier</stringProp>
              <stringProp name="Argument.value">5287290A-CFF4-4DCB-911D-293BD035BE20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AccounBalanceIdentifier" elementType="Argument">
              <stringProp name="Argument.name">AccounBalanceIdentifier</stringProp>
              <stringProp name="Argument.value">73B79719-3543-436E-AC34-FFEFA887505A</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate enrollment data" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.commons.lang.RandomStringUtils;

try{
def firstName = RandomStringUtils.randomAlphabetic(8)
def lastName = RandomStringUtils.randomAlphabetic(8)
def sSNSuffix = &quot;&quot;
def ssn = &quot;10&quot; + RandomStringUtils.randomNumeric(7)
def address1 = RandomStringUtils.randomNumeric(5) + &apos; &apos; + &apos; Foothill Blvd&apos;
def address2 = &apos;SUITE &apos; + RandomStringUtils.randomNumeric(3)
def zipCode = RandomStringUtils.randomNumeric(5)
def email = RandomStringUtils.randomAlphabetic(15)+&apos;@greendotcorp.com&apos;
TimeZone.setDefault(TimeZone.getTimeZone(&apos;UTC&apos;))
def now = new Date()
now = now.format(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;&quot;)
//now = now.format(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss&apos;Z&apos;&quot;)

def RequestId = java.util.UUID.randomUUID()

vars.put(&quot;TermsAcceptanceDateTime&quot;, now)
vars.put(&quot;RequestId&quot;, RequestId.toString())


// Personal Data
vars.put(&quot;Title&quot;, &quot;Mr&quot;)
vars.put(&quot;FirstName&quot;, firstName)
vars.put(&quot;MiddleInitials&quot;, &quot;K&quot;)
vars.put(&quot;LastName&quot;, lastName)
vars.put(&quot;AddressLine1&quot;, address1)
vars.put(&quot;AddressLine2&quot;, address2)
vars.put(&quot;City&quot;, &quot;Pasadena&quot;)
vars.put(&quot;State&quot;, &quot;CA&quot;)
vars.put(&quot;ZipCode&quot;, zipCode)
vars.put(&quot;Type&quot;, &quot;home&quot;)

//end of Personal Data
//Personal Data-Part2

vars.put(&quot;SSN&quot;, ssn)
vars.put(&quot;SSNSuffix&quot;, sSNSuffix)
vars.put(&quot;DateOfBirth&quot;, &quot;1987-02-02&quot;)
vars.put(&quot;Email&quot;, email)
vars.put(&quot;PhoneNumber&quot;, RandomStringUtils.randomNumeric(10)) //&quot;6505268188&quot;
vars.put(&quot;PhoneType&quot;, &quot;Mobile&quot;)

log.info( RandomStringUtils.randomNumeric(10));
//End of Personal Data 2
//Encrypted Data part
vars.put(&quot;encryptedUserDataVersion&quot;, RequestId.toString())
vars.put(&quot;EphemeralPublicKey&quot;, RequestId.toString())
vars.put(&quot;PublicKeyHash&quot;, RequestId.toString())
vars.put(&quot;salt&quot;, RequestId.toString())
vars.put(&quot;Version&quot;, &quot;EC_v1&quot;)
vars.put(&quot;ProgramName&quot;, &quot;${ProgramCode}&quot;)


// Terms acceptance
vars.put(&quot;TermsIdentifier&quot;, RequestId.toString())
vars.put(&quot;TermsAcceptanceDateTime&quot;, now)


// Account Data
vars.put(&quot;ProductCode&quot;, &quot;${ProductCode}&quot;)
vars.put(&quot;AccountType&quot;, &quot;Savings&quot;)
vars.put(&quot;Currency&quot;, &quot;USD&quot;)
vars.put(&quot;PurseIdentifier&quot;, RequestId.toString())
vars.put(&quot;PurseType&quot;, &quot;Primary&quot;)
vars.put(&quot;UserIdentifier&quot;, RequestId.toString())


}catch (Throwable ex)
{
	log.error(&quot;Error in Generate enrollment data&quot;, ex);
	throw ex;
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HealthCheck API" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">80</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${OAUTH_API}/healthCheck</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Valid Account is returned in response message" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1172198858">&quot;Service is up and healthy&quot;</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Validates whether or not the call was successful</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">serviceName;totalTime</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.healthCheck.dependencies[1].dependencies[0].serviceName;$.healthCheck.dependencies[1].dependencies[0].totalTime</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null;null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import java.util.Date;
import java.text.SimpleDateFormat;

try{

	String serviceName = &quot;${serviceName}&quot;;
	String totalTime = &quot;${totalTime}&quot;;
	SimpleDateFormat formatter = new SimpleDateFormat( &quot;yyyyMMddHHmmss&quot; );  
	
	
	if(serviceName != null &amp;&amp; serviceName != &quot;&quot;){
		FileWriter fstream = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator + &quot;HSM_ResponseTimes.csv&quot;,true);
		fstream.write(formatter.format( new java.util.Date() ) +&quot;,&quot; +serviceName + &quot;,&quot; + totalTime + System.getProperty(&quot;line.separator&quot;));
		fstream.close();
	}
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${IN_AUTH}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${__UUID}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">access_token;token_type;expires_in;scope</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token;$.token_type;$.expires_in;$.scope</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserData Encryption" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;requestHeader&quot;: {&#xd;
 &quot;requestId&quot;: &quot;${RequestId}&quot;&#xd;
 },&#xd;
 &quot;version&quot;: &quot;${Version}&quot;,&#xd;
 &quot;salt&quot;: &quot;${salt}&quot;,&#xd;
 &quot;programCode&quot;: &quot;${ProgramCode}&quot;,&#xd;
 &quot;data&quot;: &quot;{\&quot;ProfileData\&quot;:{\&quot;FirstName\&quot;:\&quot;${FirstName}\&quot;,\&quot;MiddleName\&quot;:\&quot;${MiddleInitials}\&quot;,\&quot;LastName\&quot;:\&quot;${LastName}\&quot;,\&quot;Addresses\&quot;:[{\&quot;AddressLine1\&quot;:\&quot;${AddressLine1}\&quot;,\&quot;AddressLine2\&quot;:\&quot;${AddressLine2}\&quot;,\&quot;City\&quot;:\&quot;${City}\&quot;,\&quot;State\&quot;:\&quot;${State}\&quot;,\&quot;ZipCode\&quot;:\&quot;${ZipCode}\&quot;,\&quot;Type\&quot;:\&quot;${Type}\&quot;,\&quot;IsDefault\&quot;:true,\&quot;IsVerified\&quot;:false}]},\&quot;identifyingData\&quot;:{\&quot;ssnSuffix\&quot;:\&quot;${SSNSuffix}\&quot;,\&quot;ssn\&quot;:\&quot;${SSN}\&quot;,\&quot;dateOfBirth\&quot;:\&quot;${DateOfBirth}\&quot;},\&quot;email\&quot;:{\&quot;emailAddress\&quot;:\&quot;${Email}\&quot;,\&quot;IsVerified\&quot;:true},\&quot;phoneNumbers\&quot;:[{\&quot;number\&quot;:\&quot;${PhoneNumber}\&quot;,\&quot;type\&quot;:\&quot;${PhoneType}\&quot;,\&quot;isDefault\&quot;:true,\&quot;IsVerified\&quot;:true}]}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${CRYPTO_API}/encrypt</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Data Fields From Response Message" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">encryptedData;ephemeralPublicKey;publicKeyHash;version</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedData.data;$.encryptedData.ephemeralPublicKey;$.encryptedData.publicKeyHash;$.encryptedData.version</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Enrollment API" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;user&quot;:    {&#xd;
      &quot;encryptedUserData&quot;: {&quot;version&quot;:&quot;${version}&quot;,&quot;ephemeralPublicKey&quot;:&quot;${ephemeralPublicKey}&quot;,&quot;publicKeyHash&quot;:&quot;${publicKeyHash}&quot;,&quot;data&quot;:&quot;${encryptedData}&quot;},&#xd;
      &quot;termsAcceptances&quot;: [      {&#xd;
         &quot;termsIdentifier&quot;: &quot;termsAndConditions&quot;,&#xd;
         &quot;termsAcceptanceDateTime&quot;: &quot;${TermsAcceptanceDateTime}&quot;&#xd;
      }]&#xd;
   },&#xd;
   &quot;account&quot;:    {&#xd;
      &quot;productCode&quot;: &quot;${ProductCode}&quot;,&#xd;
      &quot;productMaterialType&quot;: &quot;${ProductMaterialType}&quot;,&#xd;
      &quot;currency&quot;: &quot;${Currency}&quot;,&#xd;
      &quot;additionalPurses&quot;: [      {&#xd;
         &quot;purseIdentifier&quot;: &quot;${PurseIdentifier}&quot;,&#xd;
         &quot;purseType&quot;: &quot;${PurseType}&quot;,&#xd;
         &quot;availableBalance&quot;: 0,&#xd;
         &quot;ledgerBalance&quot;: 0&#xd;
      }],&#xd;
      &quot;termsAcceptances&quot;: [      {&#xd;
         &quot;termsIdentifier&quot;: &quot;termsAndConditions&quot;,&#xd;
         &quot;termsAcceptanceDateTime&quot;: &quot;${TermsAcceptanceDateTime}&quot;,&#xd;
         &quot;termsAcceptanceFlag&quot;:true&#xd;
      }],&#xd;
      &quot;fraudData&quot;:       {&#xd;
         &quot;key&quot;: &quot;string&quot;,&#xd;
         &quot;key&quot;: {&quot;prop1&quot;:&quot;val1&quot;,&#xd;
         &quot;prop2&quot;:&quot;val2&quot;&#xd;
         }&#xd;
      }&#xd;
   },&#xd;
   &quot;requestPhysicalCardFlag&quot;: &quot;true&quot;,&#xd;
   &quot;encryptedPin&quot;:    {&#xd;
      &quot;version&quot;: &quot;string&quot;,&#xd;
      &quot;ephemeralPublicKey&quot;: &quot;string&quot;,&#xd;
      &quot;publicKeyHash&quot;: &quot;string&quot;,&#xd;
      &quot;data&quot;: &quot;string&quot;&#xd;
   },&#xd;
   &quot;executeKycFlag&quot;: true&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">80</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/enrollments</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                <stringProp name="Header.value">${X-GD-Bos-Crypto-Recipient-TPK}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${RequestId}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">bospart</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Valid Account is returned in response message" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-784947668">&quot;accountIdentifier&quot;:</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Validates whether or not the call was successful</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">accountIdentifier</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.account.accountIdentifier</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">GBOS</stringProp>
            <stringProp name="query">select 
pid.PaymentIdentifier,
 pid.TokenizedPAN
, PaymentInstrumentIdentifier
,cp.Last4SSN as last4ssn
--,cp.ConsumerProfileIdentifier as &apos;UserIdentifier&apos;
from Account a
inner join AccountHolder h (nolock) on (h.AccountKey = a.AccountKey)
inner join ConsumerProfile cp (nolock) on (cp.ConsumerProfileKey = h.ConsumerProfileKey)
inner join AccountHolder_PaymentIdentifier ap (nolock) on (ap.AccountHolderKey = h.AccountHolderKey)
inner join PaymentIdentifier pid (nolock) on (pid.PaymentIdentifierKey = ap.PaymentIdentifierKey)
inner join PaymentInstrument pin (nolock) on (pin.PaymentIdentifierKey = pid.PaymentIdentifierKey)
inner join PaymentInstrumentType pint (nolock) on (pint.PaymentInstrumentTypeKey = pin.PaymentInstrumentTypeKey)
where PaymentInstrumentType != &apos;Virtual&apos;
and a.AccountIdentifier=&apos;${accountIdentifier}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">PaymentIdentifier,TokenizedPAN,PaymentInstrumentIdentifier,last4ssn</stringProp>
            <stringProp name="TestPlan.comments">PaymentIdentifier,TokenizedPAN,PaymentInstrumentIdentifier,last4ssn</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchTransaction API" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">80</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/accounts/${AccountIdentifier}/searchTransactions?productCode=${ProductCode}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token}</stringProp>
              </elementProp>
              <elementProp name="X-GD-RequestId" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${__UUID}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchTransaction API-ByPurse" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">80</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/accounts/${AccountIdentifier}/searchTransactions?productCode=${ProductCode}&amp;purseIdentifier=${AccounBalanceIdentifier}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token}</stringProp>
              </elementProp>
              <elementProp name="X-GD-RequestId" elementType="Header">
                <stringProp name="Header.name">X-GD-RequestId</stringProp>
                <stringProp name="Header.value">${__UUID}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
