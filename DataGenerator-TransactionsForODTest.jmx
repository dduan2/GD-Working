<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="DataGenerator-CreateTransactionsForAccounts" enabled="true">
      <stringProp name="TestPlan.comments">${__P(MqHdrOwnerLevel, BS001)}
${__P(ProductCode,S50001)}
${__P(ProgramCode,stash)}
AccountBalanceType: 1,  spend, 2, non-spend</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ProgramCode" elementType="Argument">
            <stringProp name="Argument.name">ProgramCode</stringProp>
            <stringProp name="Argument.value">${__P(ProgramCode,gbr)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProductCode" elementType="Argument">
            <stringProp name="Argument.name">ProductCode</stringProp>
            <stringProp name="Argument.value">${__P(ProductCode,S40002)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="StartDate" elementType="Argument">
            <stringProp name="Argument.name">StartDate</stringProp>
            <stringProp name="Argument.value">${__P(StartDate,2020-05-18 00:00:00.000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EndDate" elementType="Argument">
            <stringProp name="Argument.name">EndDate</stringProp>
            <stringProp name="Argument.value">${__P(EndDate,2020-12-25 00:32:00.000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RootDataDirectory" elementType="Argument">
            <stringProp name="Argument.name">RootDataDirectory</stringProp>
            <stringProp name="Argument.value">${__P(RootDataDirectory, C:\Performance\data\ODFee)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NUMBER_OF_ACCOUNTS" elementType="Argument">
            <stringProp name="Argument.name">NUMBER_OF_ACCOUNTS</stringProp>
            <stringProp name="Argument.value">${__P(NUMBER_OF_ACCOUNTS,170000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RESULT_FILE_NAME" elementType="Argument">
            <stringProp name="Argument.name">RESULT_FILE_NAME</stringProp>
            <stringProp name="Argument.value">${__P(ResultFileName, CardProxiesForSimTran.csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WORKSPACE_PATH" elementType="Argument">
            <stringProp name="Argument.name">WORKSPACE_PATH</stringProp>
            <stringProp name="Argument.value">${__P(WorkspacePath,C:\QA\Performance\Jmeter\GBOS\DataGenerator)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MqHdrOwnerLevel" elementType="Argument">
            <stringProp name="Argument.name">MqHdrOwnerLevel</stringProp>
            <stringProp name="Argument.value">${__P(MqHdrOwnerLevel, GZ001)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IN_AUTH" elementType="Argument">
            <stringProp name="Argument.name">IN_AUTH</stringProp>
            <stringProp name="Argument.value">${__P(IN_AUTH, Basic Y2xpZW50MjpzZWNyZXQy)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Duration" elementType="Argument">
            <stringProp name="Argument.name">Duration</stringProp>
            <stringProp name="Argument.value">${__P(Duration,1800)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ThreadCount" elementType="Argument">
            <stringProp name="Argument.name">ThreadCount</stringProp>
            <stringProp name="Argument.value">${__P(ThreadCount,20)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LoopCount" elementType="Argument">
            <stringProp name="Argument.name">LoopCount</stringProp>
            <stringProp name="Argument.value">${__P(LoopCount,1000000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AccountBalanceType" elementType="Argument">
            <stringProp name="Argument.name">AccountBalanceType</stringProp>
            <stringProp name="Argument.value">${__P(AccountBalanceType,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OpenAuth_FILE_NAME" elementType="Argument">
            <stringProp name="Argument.name">OpenAuth_FILE_NAME</stringProp>
            <stringProp name="Argument.value">${__P(OpenAuth_FILE_NAME, CardProxiesForSimTran.csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="GBOS Variable" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BOS_DATABASE" elementType="Argument">
            <stringProp name="Argument.name">BOS_DATABASE</stringProp>
            <stringProp name="Argument.value">pfbosdbag.awsnp.gdotawsnp.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OAUTH_API" elementType="Argument">
            <stringProp name="Argument.name">OAUTH_API</stringProp>
            <stringProp name="Argument.value">https://bospart.prf.uw2.gdotawsnp.com/baas/v1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CORE_API" elementType="Argument">
            <stringProp name="Argument.name">CORE_API</stringProp>
            <stringProp name="Argument.value">https://boscore.prf.uw2.gdotawsnp.com/coreapi/v1/programs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PARTNER_API" elementType="Argument">
            <stringProp name="Argument.name">PARTNER_API</stringProp>
            <stringProp name="Argument.value">https://bospart.prf.uw2.gdotawsnp.com/baas/v1/programs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CRYPTO_API" elementType="Argument">
            <stringProp name="Argument.name">CRYPTO_API</stringProp>
            <stringProp name="Argument.value">https://boscryt.prf.uw2.gdotawsnp.com/Crypto/V1/encrypt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SimulatorTools_Server" elementType="Argument">
            <stringProp name="Argument.name">SimulatorTools_Server</stringProp>
            <stringProp name="Argument.value">https://gdqatools/GDQATools/GDQA_IPSMQSimulator_Bos/IPSMQSimulatorService.svc</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">on-prem simulator tools endpoint</stringProp>
          </elementProp>
          <elementProp name="Minimum" elementType="Argument">
            <stringProp name="Argument.name">Minimum</stringProp>
            <stringProp name="Argument.value">300</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Maxmum" elementType="Argument">
            <stringProp name="Argument.name">Maxmum</stringProp>
            <stringProp name="Argument.value">350</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RABBITMQ_API" elementType="Argument">
            <stringProp name="Argument.name">RABBITMQ_API</stringProp>
            <stringProp name="Argument.value">https://bosrbmq.prf.uw2.gdotawsnp.com:15671/api/exchanges</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="vhost" elementType="Argument">
            <stringProp name="Argument.name">vhost</stringProp>
            <stringProp name="Argument.value">b</stringProp>
            <stringProp name="Argument.desc">b/g</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">https://gdqatools/GDQATools/GDQA_IPSMQSimulator_Bos/IPSMQSimulatorService.svc
G1PFBOSDB01
 qatool.pie.uw2.gdotawsnp.com
</stringProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="BOS GBOS DB Connection" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">GBOS</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${BOS_DATABASE}:1433;databaseName=GBOS</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">G33Nff4%$^</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">qa_automation</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC Get Partner AccountIdentifier" enabled="true">
        <stringProp name="dataSource">GBOS</stringProp>
        <stringProp name="query">select top 1 a.accountIdentifier from Account a
inner join Product p
on a.Productkey=p.productkey
where p.Productcode=&apos;59000&apos;</stringProp>
        <stringProp name="queryArguments"></stringProp>
        <stringProp name="queryArgumentsTypes"></stringProp>
        <stringProp name="queryTimeout">5</stringProp>
        <stringProp name="queryType">Select Statement</stringProp>
        <stringProp name="resultSetHandler">Store as String</stringProp>
        <stringProp name="resultVariable"></stringProp>
        <stringProp name="variableNames">PartnerAccountIdentifer</stringProp>
        <stringProp name="resultSetMaxRows"></stringProp>
      </JDBCPreProcessor>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Cleanup existing files-All" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Delete existing file-1" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;


try{
	File file = new File(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator + &quot;${RESULT_FILE_NAME}&quot;);
	file.delete();

	List files = FileUtils.listFiles(new File(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator + &quot;SplitFiles&quot;), new String[]{&quot;csv&quot;}, true);
	for (File file : files) {
		file.delete();
	}
}
catch (Throwable ex)
{
	log.error(&quot;Error in Cleanup existing files&quot;, ex);
	throw ex;
}
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Delete existing file" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

log.info(FileServer.getFileServer().getBaseDir());

try{
	List files = FileUtils.listFiles(new File(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator + &quot;multi-thread&quot;), new String[]{&quot;csv&quot;}, true);
	for (File file : files) {
		file.delete();
	}
}
catch (Throwable ex)
{
	log.error(&quot;Error in Cleanup existing files&quot;, ex);
	throw ex;
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GetAccountToSimTrans" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">
SELECT top ${NUMBER_OF_ACCOUNTS} RTRIM(a.AccountExternalProxy) as AccountBalanceExternalProxy, RTRIM(PaymentIdentifierProxy) as PaymentIdentifierProxy, a.AccountIdentifier
        FROM Account a  (nolock)
            INNER JOIN dbo.AccountHolder ah (nolock)
                ON a.AccountKey = ah.AccountKey  
            INNER JOIN dbo.AccountHolderAgreement aha (nolock) 
                ON ah.AccountHolderKey = aha.AccountHolderKey  
                   AND aha.HasAccepted = 1  
                   AND aha.OptoutDate IS NULL  
            INNER JOIN dbo.AccountBillCycle abc (nolock) 
                ON abc.AccountKey = a.AccountKey  
			inner join dbo.AccountSubscription acs (nolock)
				on acs.AccountKey = a.AccountKey
			inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
				On ahpi.AccountHolderKey = ah.AccountHolderKey
			inner Join PaymentIdentifier As pid with(nolock)
				On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
					and pid.PaymentIdentifierStatusKey=1
            left JOIN dbo.ProductAgreementType pat  (nolock)
                ON pat.ProductAgreementTypeKey = aha.ProductAgreementTypeKey  
            left JOIN dbo.BrandAgreementType bat  (nolock)
                ON bat.BrandAgreementTypeKey = pat.BrandAgreementTypeKey  
					and bat.BrandAgreementTypeIdentifier like &apos;overdraft%&apos;
			where a.CreateDate between &apos;2020-09-20&apos; and &apos;2020-09-22&apos; 
--distinct
--Select  top ${NUMBER_OF_ACCOUNTS} RTRIM(AccountBalanceExternalProxy) as AccountBalanceExternalProxy, 
--RTRIM(PaymentIdentifierProxy) as PaymentIdentifierProxy, a.AccountIdentifier, ab.AccountBalanceIdentifier
--From AccountBalance As ab with(nolock)
--inner Join Account As a with(nolock)
--On ab.AccountKey = a.AccountKey
--INNER JOIN Product AS p with(nolock)
--ON p.ProductKey=a.ProductKey
--INNER JOIN AccountBillCycle abc with (NOLOCK) 
--ON abc.AccountKey = a.AccountKey
--inner Join AccountHolder As ah with(nolock)
--On ah.AccountKey = a.AccountKey
--inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
--On ahpi.AccountHolderKey = ah.AccountHolderKey
--inner Join PaymentIdentifier As pid with(nolock)
--On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
----inner join PostTransaction PIT with(NOLOCK) 
----ON PIT.AccountIdentifier = A.AccountIdentifier
--where p.ProductCode=&apos;${ProductCode}&apos;
--and  ab.AvailableBalance&gt;=0
--and a.AccountStatusKey=2
----and abc.ActivationDate &lt; GETDATE()-35
----and PIT.ProcessorBusinessDate &gt; GETDATE()-30 and PIT.ProcessorBusinessDate &lt; GETDATE()-4
----and a.CreateDate=&apos;2018-10-29 01:34:30.620&apos;
--and  a.CreateDate &lt; getDate()-4
--and ab.AvailableBalanceAsOfDate &lt; getDate()-4
--and ab.LedgerBalanceAsOfDate &lt; getDate()-4
----and a.CreateDate BETWEEN &apos;${StartDate}&apos; and &apos;${EndDate}&apos;
--and ab.AccountBalanceTypeKey  in (1,2)
----and ab.AccountBalanceTypeKey = ${AccountBalanceType}
--order by newid() desc

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier</stringProp>
          <stringProp name="resultVariable">AccountList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db - estatement" enabled="false">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">
Select TOP  ${NUMBER_OF_ACCOUNTS} RTRIM(AccountBalanceExternalProxy) as AccountBalanceExternalProxy, 
RTRIM(PaymentIdentifierProxy) as PaymentIdentifierProxy, a.AccountIdentifier
From AccountBalance As ab with(nolock)
inner Join Account As a with(nolock)
On ab.AccountKey = a.AccountKey
INNER JOIN Product AS p with(nolock)
ON p.ProductKey=a.ProductKey
INNER JOIN AccountBillCycle abc with (NOLOCK) 
ON abc.AccountKey = a.AccountKey
inner Join AccountHolder As ah with(nolock)
On ah.AccountKey = a.AccountKey
inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
On ahpi.AccountHolderKey = ah.AccountHolderKey
inner Join PaymentIdentifier As pid with(nolock)
On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
inner join PostTransaction PIT with(NOLOCK) 
ON PIT.AccountIdentifier = A.AccountIdentifier
where p.ProductCode=&apos;${ProductCode}&apos;
and  ab.AvailableBalance&gt;1
and abc.ActivationDate &lt; GETDATE()-33
and PIT.ProcessorBusinessDate &gt; GETDATE()-30 and PIT.ProcessorBusinessDate &lt; GETDATE()-4
--and a.CreateDate=&apos;2018-10-29 01:34:30.620&apos;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier</stringProp>
          <stringProp name="resultVariable">AccountList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

// initialize a Random object somewhere; you should only need one
Random random = new Random();

FileWriter fstream = new FileWriter(vars.get (&quot;WORKSPACE_PATH&quot;) + File.separator  + &quot;${RESULT_FILE_NAME}&quot;,true);

for (var row : vars.getObject(&quot;AccountList&quot;))
{
	int amount = random.nextInt(100) + 10;
	fstream.write(row.get(&quot;AccountBalanceExternalProxy&quot;) +  &quot;,&quot; + row.get(&quot;PaymentIdentifierProxy&quot;) + &quot;,&quot; + row.get(&quot;AccountIdentifier&quot;) +&quot;,&quot;+ amount +&quot;,&quot; +row.get(&quot;AccountBalanceIdentifier&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
 </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Data Splitter Execution" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\GDQA_PerfDataSplitter\GDQA_PerfDataSplitter.exe</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\\${RESULT_FILE_NAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\SplitFiles</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${RESULT_FILE_NAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="LoopCopy" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get current index" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

try{
	log.info(&quot;Current count:&quot; + String.valueOf(${__jm__LoopCopy__idx}+1));
	vars.put(&quot;CurrentIndex&quot;, String.valueOf(${__jm__LoopCopy__idx}+1));
	vars.put(&quot;CurrentRemoteServerIndex&quot;, String.valueOf(${__jm__LoopCopy__idx}+2));
}
catch (Throwable ex)
{
	log.error(&quot;Error in Get-current-index script&quot;, ex);
	throw ex;
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder" enabled="true">
            <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
            <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
            <stringProp name="SystemSampler.command">cmd.exe</stringProp>
            <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">/c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">copy /b /y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">.\\${CurrentIndex}\\${RESULT_FILE_NAME}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">\\\\g1pfbosload0${CurrentRemoteServerIndex}\\data\\${RESULT_FILE_NAME}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\SplitFiles</stringProp>
          </SystemSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GenerateEventMsg" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">5000000</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">60</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\CardProxiesForSimTran.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,JoPstdAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="PosteInternalTransaction-DD" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>30.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="ConverTranRefNumToHexString" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.math.BigInteger;
import java.util.UUID;
import java.util.Arrays;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import org.apache.commons.lang3.ArrayUtils;

//String s = &quot;4642322850518643&quot;;
//String JoSysGenRefNr = &quot;${__RandomString(18,0123456789,)}&quot;;

//Generating data.
def DateTimeStampUnformatted = new Date()
String JoSysGenRefNr = DateTimeStampUnformatted.format(&quot;&apos;00&apos;yyyyMMddHHmmssSSSSSS&quot;, TimeZone.getTimeZone(&apos;PST&apos;))
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);
String hexString = ByteArrayToHexString(convertStringToBytes(JoSysGenRefNr));
String fundtransfertokenhex = ByteArrayToHexString(convertStringToBytesBase36(transComment)); 
//log.info(hexString);
if(hexString != null)
	vars.put(&quot;hexString&quot;, hexString);
vars.put(&quot;fundtransfertokenhex&quot;, fundtransfertokenhex);

public byte[] convertStringToBytes(String str)
{
	byte[] b = str.getBytes(&quot;US-ASCII&quot;);
	BigInteger bi = BigInteger.valueOf(0);
	for (int i = 0; i &lt; b.length; i++)
    {
        int curr62Byte = b[i];

        curr62Byte -= 48;
        if (curr62Byte &gt; 9)
            curr62Byte -= 7;
        if (curr62Byte &gt; 35)
            curr62Byte -= 6;

		bi = bi.multiply(BigInteger.valueOf(62));
        
        bi = bi.add(BigInteger.valueOf(curr62Byte));
  
    }
	return toByteArrayLittleEndianUnsigned(bi);
}

public byte[] convertStringToBytesBase36(String str)
{
	byte[] b = str.getBytes(&quot;US-ASCII&quot;);
	BigInteger bi = BigInteger.valueOf(0);
	for (int i = 0; i &lt; b.length; i++)
    {
        int curr36Byte = b[i];

        curr36Byte -= 48;
        if (curr36Byte &gt; 9)
            curr36Byte -= 7;

		bi = bi.multiply(BigInteger.valueOf(36));
        
        bi = bi.add(BigInteger.valueOf(curr36Byte));
  
    }
	return toByteArrayLittleEndianUnsigned(bi);
}

public String ByteArrayToHexString(byte[] input)
{
            

    byte[] bytes = null;

    if (input.length == 16)
        bytes = input;
    else if (input.length &lt; 16)
    {
        bytes = Arrays.copyOf(input, 16);
    }
    else if (input.length == 17)
    {
        if (input[16] != 0x00)
            throw new IllegalArgumentException(&quot;Decoding input resulted in more than 16 bytes for a Guid.&quot;);

        bytes = Arrays.copyOf(input, 16);
    }
    else if (tempBytes.Length &gt; 17)
        throw new IllegalArgumentException(&quot;Decoding input resulted in more than 16 bytes for a Guid.&quot;);

    StringBuilder byteString = new StringBuilder();
    byteString.append(&quot;0x&quot;);
    for(int i = 0; i&lt; bytes.length; i++)
    {
        byteString.append(String.format(&quot;%02X&quot;, Byte.toUnsignedInt(bytes[i])));
    }
        log.info(byteString.toString());
	return byteString.toString();
}

public  byte[] toByteArrayLittleEndianUnsigned(BigInteger bi) 
{
    byte[] extractedBytes = toByteArrayUnsigned(bi);
    log.info(&quot;----------------&quot;);
    byte[] reversed = new byte[extractedBytes.length];
    for(int i = 0; i &lt; extractedBytes.length; i++)
	{
		reversed[i] = extractedBytes[extractedBytes.length - i - 1];   			
	}	
    return reversed;
}
public  byte[] toByteArrayUnsigned(BigInteger bi) 
{
    byte[] extractedBytes = bi.toByteArray();
    int skipped = 0;
    boolean skip = true;
    for (byte b : extractedBytes) 
	{
        boolean signByte = b == (byte) 0x00;
        if (skip &amp;&amp; signByte) {
            skipped++;
            continue;
        } else if (skip) {
            skip = false;
        }
    }
    extractedBytes = Arrays.copyOfRange(extractedBytes, skipped,
        extractedBytes.length);          
    return extractedBytes;
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Insert PostInternalTransactionDetail Record" enabled="true">
            <stringProp name="dataSource">GBOS</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">
declare @ptransactionreferenceid uniqueidentifier
declare @pfundtransfertoken uniqueidentifier
select @ptransactionreferenceid=cast(${hexString} as uniqueidentifier)
select @pfundtransfertoken=cast(${fundtransfertokenhex} as uniqueidentifier)


INSERT INTO PostInternalTransactionDetail (TransactionReferenceID,TransactionDescription,AchCategoryCode)
VALUES (@ptransactionreferenceid,&apos;Custom:DD Description&apos;,&apos;GB&apos;)
select @ptransactionreferenceid

insert into FundTransfer
(InitiatorAccountIdentifier,
FundTransferToken,
FundTransferTypeKey,
FundTransferStatusKey,
CurrencyKey,
FundTransferDelayTypeKey,
TransactionAmount,
TransactionDetail,
IsSystemInitiated,
CreateDate,
ChangeDate,
ChangeBy,
TransactionDate)
VALUES
(&apos;${AccountIdentifier}&apos;,
@pfundtransfertoken,
6,
3,
1,
1,
10,
&apos;DDTest&apos;,
1,
GETDATE(),
GETDATE(),
&apos;perf-test&apos;,
GETDATE()
)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostInternalMessage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostInternalMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
		&lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${__Random(500,5000,)}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;5598&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoSrceCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDescTx&gt;1-002,ACH In&lt;/v11:JoTxnDescTx&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDisputeId&gt;${__RandomString(10,0123456789,)}&lt;/v11:JoTxnDisputeId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JxTxnComment&gt;${JxTxnComment}&lt;/v11:JxTxnComment&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoSysGenRefNr&gt;${JoSysGenRefNr}&lt;/v11:JoSysGenRefNr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnRsnCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoTxnRsnCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostInternalMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostInternalMessage&quot; </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="PosteNetWorkTransaction-Debit" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>100.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostNetworkMessage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostNetworkMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${__Random(100,900,)}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;DR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;1035&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;DR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn&gt;${__javaScript(${__RandomString(6,0123456789,)}+&quot;-&quot;+${__RandomString(12,0123456789,)}+&quot;-&quot;+${__RandomString(6,0123456789,)},)}&lt;/v11:PmVisaArn&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:De1MsgType&gt;1221&lt;/v11:De1MsgType&gt;&#xd;
            &lt;v11:De3ProcessingCode&gt;${__RandomString(6,0123456789,)}&lt;/v11:De3ProcessingCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De4TxnAmt&gt;${JoPstdAm}&lt;/v11:De4TxnAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De5ReconAmt&gt;${JoPstdAm}&lt;/v11:De5ReconAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De6BillingAmt&gt;${JoPstdAm}&lt;/v11:De6BillingAmt&gt;&#xd;
            &lt;v11:De12TxnDtTm&gt;${__time(yyMMddHHmmss,)}&lt;/v11:De12TxnDtTm&gt;&#xd;
            &lt;v11:De22PtOfSrvcDataCd&gt;010011111110&lt;/v11:De22PtOfSrvcDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De25MsgReasonCd&gt;3173&lt;/v11:De25MsgReasonCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De26CrdAccptrBusCd&gt;5542&lt;/v11:De26CrdAccptrBusCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:DE28ReconDt xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De31AcqrRefData&gt;${__RandomString(23,0123456789,)}&lt;/v11:De31AcqrRefData&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De32AcqrngInstId&gt;${__RandomString(11,0123456789,)}&lt;/v11:De32AcqrngInstId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;${__RandomString(12,0123456789,)}&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De38ApprovalCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:De38ApprovalCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De41CrdAccptrTermId&gt;NONUSADOME&lt;/v11:De41CrdAccptrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De42CrdAccptrIdCode&gt;${__RandomString(15,0123456789,)}&lt;/v11:De42CrdAccptrIdCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De43CrdAccptrNmLoc&gt;GreenDot Corporation TestE Main PasadenaThisFillerForPositionFourtyOneToEightyThree9110700000CA USA&lt;/v11:De43CrdAccptrNmLoc&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De49CurCodeTxnX&gt;USD&lt;/v11:De49CurCodeTxnX&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:CashbackAmt&gt;0&lt;/v11:CashbackAmt&gt;&#xd;
            &lt;v11:AuthMatchedInd&gt;N&lt;/v11:AuthMatchedInd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmAcqNtwkId&gt;GDOT&lt;/v11:PmAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmMultiClrSeqNum&gt;0&lt;/v11:PmMultiClrSeqNum&gt;&#xd;
            &lt;v11:PmMultiClrSeqCnt&gt;0&lt;/v11:PmMultiClrSeqCnt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PanUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmtActRefNum xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmSpndAlertCde xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:OnbhlfSrvData xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknTxnId&gt;${__RandomString(64,0123456789abcdef,)}&lt;/v11:TknTxnId&gt;&#xd;
            &lt;v11:PosEntModeCd&gt;&lt;/v11:PosEntModeCd&gt;&#xd;
            &lt;v11:De055Cvm&gt;&lt;/v11:De055Cvm&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostNetworkMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value"> &quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostNetworkMessage&quot; </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="UpdateAccountStatus" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>10.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UpdateAccountStatus-Pending API" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;requestHeader&quot;: {&#xd;
        &quot;requestId&quot;: &quot;${__UUID}&quot;,&#xd;
        &quot;options&quot;: null&#xd;
    },&#xd;
    &quot;accountIdentifier&quot;: &quot;${AccountIdentifier}&quot;,&#xd;
    &quot;accountHolderIdentifier&quot;: null,&#xd;
    &quot;accountStatus&quot;: &quot;Pending&quot;,&#xd;
    &quot;accountStatusReasons&quot;: [&#xd;
        &quot;Healthy&quot;&#xd;
    ],&#xd;
    &quot;AccountStatusReasonsToRemove&quot;: [&#xd;
    	   &quot;&quot;&#xd;
  ],&#xd;
    &quot;status&quot;: null,&#xd;
    &quot;cure&quot;: &quot;None&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${CORE_API}/${ProgramCode}/accounts/setStatus</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1974667930">&quot;statusCode&quot;:0,&quot;subStatusCode&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UpdateAccountStatus-Normal API" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;requestHeader&quot;: {&#xd;
        &quot;requestId&quot;: &quot;${__UUID}&quot;,&#xd;
        &quot;options&quot;: null&#xd;
    },&#xd;
    &quot;accountIdentifier&quot;: &quot;${AccountIdentifier}&quot;,&#xd;
    &quot;accountHolderIdentifier&quot;: null,&#xd;
    &quot;accountStatus&quot;: &quot;Normal&quot;,&#xd;
    &quot;accountStatusReasons&quot;: [&#xd;
        &quot;Healthy&quot;&#xd;
    ],&#xd;
    &quot;AccountStatusReasonsToRemove&quot;: [&#xd;
    	   &quot;&quot;&#xd;
  ],&#xd;
    &quot;status&quot;: null,&#xd;
    &quot;cure&quot;: &quot;None&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${CORE_API}/${ProgramCode}/accounts/setStatus</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1974667930">&quot;statusCode&quot;:0,&quot;subStatusCode&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PutRabbitMQMsg" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1000</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">30</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\CardProxiesForSimTran.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,JoPstdAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SendRabbitMQMsg" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;vhost&quot; : &quot;${vhost}&quot;,&#xd;
   &quot;name&quot; : &quot;q.event_eligibility&quot;,&#xd;
     &quot;routing_key&quot; : &quot;q.event_eligibility&quot;,&#xd;
&#xd;
   &quot;properties&quot; : {&#xd;
      &quot;delivery_mode&quot; : 1,&#xd;
      &#xd;
   },&#xd;
 &#xd;
   &quot;delivery_mode&quot; : &quot;1&quot;,&#xd;
   &quot;payload&quot; : &quot;{\&quot;requestHeader\&quot;: {\&quot;requestId\&quot; : \&quot;${__UUID}\&quot;,\&quot;options\&quot;: {} },\&quot;programCode\&quot;: \&quot;gbr\&quot;,\&quot;AccountIdentifier\&quot;: \&quot;${AccountIdentifier}\&quot;,\&quot;FeeTransactionIdentifier\&quot;: \&quot;\&quot;,\&quot;TransactionIdentifier\&quot;: \&quot;\&quot;,\&quot;BillCycleDay\&quot;: \&quot;${__time(dd,)}\&quot;,\&quot;EventType\&quot;: \&quot;${__RandomString(1,013,)}\&quot;}&quot;,&#xd;
  &#xd;
   &quot;props&quot; : { },&#xd;
   &quot;payload_encoding&quot; : &quot;string&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${RABBITMQ_API}/${vhost}/amq.default/publish</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic c3ZjX2Jvc19jb3JlOnBhc3N3b3Jk</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="InsertTransactionDataToDB" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1700000</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">60</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\CardProxiesForSimTran.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,JoPstdAm</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Insert PostInternalTransactionDetail Record" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">declare @tranClass int;
declare @AK varchar(255);
declare @ABI varchar(255);
declare @DES varchar(255);
declare @TA varchar(255);
declare @LB varchar(255);
declare @FTTK varchar(255)
declare @TransactionReferenceID UNIQUEIDENTIFIER;

declare @prandomnum int;
set @prandomnum=FLOOR(RAND()*(25)+10)

set @tranClass = &apos;4&apos;;
set @AK = &apos;${AccountIdentifier}&apos;;
--set @ABI = &apos;677DAC59-B161-4C52-9423-3CC144E5CFA6&apos;;
set @DES = &apos;Add DD transaction&apos;;
set @TA = &apos;${JoPstdAm}&apos;;
set @LB = &apos;20&apos;;
set @FTTK = &apos;6&apos;
set @TransactionReferenceID=NEWID();

select @ABI= ab.AccountBalanceIdentifier from Account a (nolock)
inner join AccountBalance ab (nolock)
on ab.AccountKey= a.AccountKey


select top 1 * 
into #CustomerInfo
from PostInternalTransaction(nolock) 
where TransClassKey = @tranClass
--and FundTransferToken in (select fundTransferToken from FundTransfer (nolock)  where FundTransferTypeKey = @FTTK)
--order by 1 desc;




update #CustomerInfo set CreateDate = DateAdd( day, -@prandomnum, GetDate());
update #CustomerInfo set ChangeDate = DateAdd( day, -@prandomnum, GetDate());
update #CustomerInfo set ProcessorBusinessDate = DateAdd( day, -@prandomnum, GetDate());
update #CustomerInfo set ProcessorTransactionDate = DateAdd( day, -@prandomnum, GetDate());
update #CustomerInfo set TransactionMatchDate = DateAdd( day, -@prandomnum, GetDate());
update #CustomerInfo set AccountIdentifier = @AK;
update #CustomerInfo set AccountBalanceIdentifier = @ABI;
update #CustomerInfo set TransactionDescription = @DES;
update #CustomerInfo set TransactionAmount = @TA;
update #CustomerInfo set LedgerBalance = @LB;
update #CustomerInfo set FundTransferToken = newid();
--update #CustomerInfo set TransactionReferenceID = newid();

DECLARE @UNIQUEX UNIQUEIDENTIFIER
SET @UNIQUEX = NEWID();
select @UNIQUEX;

insert into PostInternalTransaction
(CreateDate,
ChangeDate,
ChangeBy,
TransactionIdentifier,
ProcessorKey,
AccountIdentifier,
PaymentIdentifier,
AccountBalanceIdentifier,
TransactionDescription,
TransactionAmount,
CreditDebit,
CurrencyCode,
TransClassKey,
PostSequenceNumber,
ProcessorBusinessDate,
ProcessorTransactionDate,
TransactionMatchDate,
LedgerBalance,
AvailableBalance,
MessageHashID,
TransactionReferenceID,
TransactionComment,
TransactionSourceCode,
DisputeID,
AdjustmentReason,
FundTransferToken)
SELECT 
CreateDate,
ChangeDate,
ChangeBy,
@UNIQUEX,--TransactionIdentifier,
ProcessorKey,
AccountIdentifier,
PaymentIdentifier,
AccountBalanceIdentifier,
TransactionDescription,
TransactionAmount,
CreditDebit,
CurrencyCode,
TransClassKey,
PostSequenceNumber,
ProcessorBusinessDate,
ProcessorTransactionDate,
TransactionMatchDate,
LedgerBalance,
AvailableBalance,
MessageHashID,
@TransactionReferenceID,--TransactionReferenceID,
TransactionComment,
TransactionSourceCode,
DisputeID,
AdjustmentReason,
FundTransferToken
FROM #CustomerInfo ap WITH(NOLOCK);


--insert PostInternalTransactionDetail

insert into PostInternalTransactionDetail
(TransactionReferenceID,
TransactionDescription,
AchCategoryCode,
CreateDate,
ChangeDate
)
values
(
@TransactionReferenceID,
&apos;Custom:DD Description&apos;,
&apos;GB&apos;,
DateAdd( day, -@prandomnum, GetDate()),
DateAdd( day, -@prandomnum, GetDate())
)


--Insert fundtransfer
insert into FundTransfer
(InitiatorAccountIdentifier,
FundTransferToken,
FundTransferTypeKey,
FundTransferStatusKey,
CurrencyKey,
FundTransferDelayTypeKey,
TransactionAmount,
TransactionDetail,
IsSystemInitiated,
CreateDate,
ChangeDate,
ChangeBy,
TransactionDate)
select 
AccountIdentifier,
FundTransferToken,
6,
3,
1,
1,
100,
&apos;perf-test&apos;,
1,
CreateDate,
ChangeDate,
ChangeBy,
CreateDate
FROM #CustomerInfo ap WITH(NOLOCK);

--SELECT * FROM #CustomerInfo  WITH(NOLOCK);


DROP TABLE #CustomerInfo;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Generate Auth To Posted Transactions-TestingODFee" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">20000</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">30</stringProp>
        <stringProp name="ThreadGroup.ramp_time">60</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\CardProxiesForSimTran.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Auth data" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">//Random random = new Random();
//
//def TimeStampUnformatted = new Date() - 2 - random.nextInt(4)
//def AuTrTm = TimeStampUnformatted.format(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&quot;)
//vars.put(&quot;AuATm&quot;, AuTrTm);
//vars.put(&quot;AuADt&quot;, AuTrTm);
//
//
//int amount = random.nextInt(100) + 50;
//
//vars.put(&quot;JoPstdAm&quot;, Integer.toString(amount));


Random random = new Random();
use(groovy.time.TimeCategory) {
def TimeStampUnformatted = new Date() - (random.nextInt(120)+24).hour

def AuTrTm = TimeStampUnformatted.format(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&quot;)
vars.put(&quot;AuATm&quot;, AuTrTm);
vars.put(&quot;AuADt&quot;, AuTrTm);

def gracePeriodTimeStamp = TimeStampUnformatted + 10.hour
def transDateIn24hr = gracePeriodTimeStamp.format(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&quot;)
vars.put(&quot;transDateIn24hr&quot;, transDateIn24hr)   
}


int amount = random.nextInt(1000) + 400;

vars.put(&quot;JoPstdAm&quot;, Integer.toString(amount));




</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutAuthMessage" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutAuthMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AuATm&gt;${__groovy(vars.get(&quot;AuATm&quot;);,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__groovy(vars.get(&quot;AuADt&quot;);,)}&lt;/v11:AuADt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCrdAccptId&gt;Non Us Domestic&lt;/v11:AuCrdAccptId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrZipCd&gt;91107&lt;/v11:AuMrZipCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCntryCd&gt;USA&lt;/v11:AuMrCntryCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCatgCd&gt;0763&lt;/v11:AuMrCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFgnExpIn&gt;D&lt;/v11:AuFgnExpIn&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAStCd&gt;CA&lt;/v11:AuAStCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuACrdExpDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P1461D,,)}&lt;/v11:AuACrdExpDt&gt;&#xd;
            &lt;v11:AuATrTermId&gt;FLPBLX1028&lt;/v11:AuATrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuOfflnAcsCd&gt;1&lt;/v11:AuOfflnAcsCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuARespCd&gt;APV&lt;/v11:AuARespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrAm&gt;${JoPstdAm}&lt;/v11:AuTrAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCurCd&gt;USD&lt;/v11:AuCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnOrigAm&gt;${JoPstdAm}&lt;/v11:AuTxnOrigAm&gt;&#xd;
            &lt;v11:AuTrDs&gt;PTS MTF TEST\\Pasadena&lt;/v11:AuTrDs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaRespCd&gt;000&lt;/v11:AuVisaRespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrTm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrTm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRespApvlCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuRespApvlCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAdVerfRsltCd&gt;8&lt;/v11:AuAdVerfRsltCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAUcsEffDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuAUcsEffDt&gt;&#xd;
            &lt;v11:AuTxnStatIn&gt;I&lt;/v11:AuTxnStatIn&gt;&#xd;
            &lt;v11:AuUcsTxnCd&gt;1035&lt;/v11:AuUcsTxnCd&gt;&#xd;
            &lt;v11:AuTxnCatgCd&gt;0763&lt;/v11:AuTxnCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCsbkAm&gt;1&lt;/v11:AuCsbkAm&gt;&#xd;
            &lt;v11:AuMsgTypeCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuPrgDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P14D,,)}&lt;/v11:AuPrgDt&gt;&#xd;
            &lt;v11:AuPosDa&gt;00010170000J&lt;/v11:AuPosDa&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAppTxnCt&gt;8&lt;/v11:AuAppTxnCt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuStipRsnCd&gt;8&lt;/v11:AuStipRsnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee1Am&gt;1&lt;/v11:AuFee1Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn1Cd&gt;5005&lt;/v11:AuFeeTxn1Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee2Am&gt;3&lt;/v11:AuFee2Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn2Cd&gt;5005&lt;/v11:AuFeeTxn2Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee3Am&gt;5&lt;/v11:AuFee3Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn3Cd&gt;5005&lt;/v11:AuFeeTxn3Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee4Am&gt;8&lt;/v11:AuFee4Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn4Cd&gt;5005&lt;/v11:AuFeeTxn4Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee5Am&gt;13&lt;/v11:AuFee5Am&gt;&#xd;
            &lt;v11:AuFeeTxn5Cd&gt;5005&lt;/v11:AuFeeTxn5Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRqstdTxnAm&gt;${JoPstdAm}&lt;/v11:AuRqstdTxnAm&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;DR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAcqNtwkId&gt;${__RandomString(3,0123456789,)}&lt;/v11:AuAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnSign&gt;DR&lt;/v11:AuTxnSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuObsDataCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuObsDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTknTxnId&gt;${__RandomString(9,0123456789,)}&lt;/v11:AuTknTxnId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaAuCharSw&gt;D&lt;/v11:AuVisaAuCharSw&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuIncrAuInd&gt;false&lt;/v11:AuIncrAuInd&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:IfGeneratePosted&gt;false&lt;/v11:IfGeneratePosted&gt;&#xd;
            &lt;v11:AuRskScrNum&gt;&lt;/v11:AuRskScrNum&gt;&#xd;
            &lt;v11:AuPosEntModeCd&gt;&lt;/v11:AuPosEntModeCd&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;v11:AuRulAdjScrNum&gt;&lt;/v11:AuRulAdjScrNum&gt;&#xd;
            &lt;v11:De055Cvr&gt;&lt;/v11:De055Cvr&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
            &lt;v11:AvailBalSign&gt;DR&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:AvlBalOdThldSign&gt;&lt;/v11:AvlBalOdThldSign&gt;&#xd;
            &lt;v11:AuIsoProcCd&gt;DE3&lt;/v11:AuIsoProcCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutAuthMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutAuthMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">AuSeqNr</stringProp>
            <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">(//*[name() = &apos;a:SequenceNumber&apos;])/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">300</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostNetworkMessage" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostNetworkMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${JoPstdAm}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;DR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;1035&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;DR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS,,P-2D,,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn&gt;${__javaScript(${__RandomString(6,0123456789,)}+&quot;-&quot;+${__RandomString(12,0123456789,)}+&quot;-&quot;+${__RandomString(6,0123456789,)},)}&lt;/v11:PmVisaArn&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:AvailBalSign&gt;DR&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:De1MsgType&gt;1221&lt;/v11:De1MsgType&gt;&#xd;
            &lt;v11:De3ProcessingCode&gt;${__RandomString(6,0123456789,)}&lt;/v11:De3ProcessingCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De4TxnAmt&gt;${JoPstdAm}&lt;/v11:De4TxnAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De5ReconAmt&gt;${JoPstdAm}&lt;/v11:De5ReconAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De6BillingAmt&gt;${JoPstdAm}&lt;/v11:De6BillingAmt&gt;&#xd;
            &lt;v11:De12TxnDtTm&gt;${__time(yyMMddHHmmss,)}&lt;/v11:De12TxnDtTm&gt;&#xd;
            &lt;v11:De22PtOfSrvcDataCd&gt;010011111110&lt;/v11:De22PtOfSrvcDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De25MsgReasonCd&gt;6638&lt;/v11:De25MsgReasonCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De26CrdAccptrBusCd&gt;6011&lt;/v11:De26CrdAccptrBusCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:DE28ReconDt xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De31AcqrRefData&gt;${__RandomString(23,0123456789,)}&lt;/v11:De31AcqrRefData&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De32AcqrngInstId&gt;${__RandomString(11,0123456789,)}&lt;/v11:De32AcqrngInstId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;${__RandomString(12,0123456789,)}&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De38ApprovalCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:De38ApprovalCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De41CrdAccptrTermId&gt;NONUSADOME&lt;/v11:De41CrdAccptrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De42CrdAccptrIdCode&gt;${__RandomString(15,0123456789,)}&lt;/v11:De42CrdAccptrIdCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De43CrdAccptrNmLoc&gt;GreenDot Corporation TestE Main PasadenaThisFillerForPositionFourtyOneToEightyThree9110700000CA USA&lt;/v11:De43CrdAccptrNmLoc&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De49CurCodeTxnX&gt;USD&lt;/v11:De49CurCodeTxnX&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:CashbackAmt&gt;0&lt;/v11:CashbackAmt&gt;&#xd;
            &#xd;
            &lt;v11:AuthMatchedInd&gt;Y&lt;/v11:AuthMatchedInd&gt;&#xd;
            &lt;v11:AuATm&gt;${__groovy(vars.get(&quot;AuATm&quot;);,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__groovy(vars.get(&quot;AuADt&quot;);,)}&lt;/v11:AuADt&gt;&#xd;
            &lt;v11:AuSeqNr&gt;${AuSeqNr}&lt;/v11:AuSeqNr&gt;&#xd;
            &#xd;
            &lt;v11:PmAcqNtwkId&gt;GDOT&lt;/v11:PmAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmMultiClrSeqNum&gt;0&lt;/v11:PmMultiClrSeqNum&gt;&#xd;
            &lt;v11:PmMultiClrSeqCnt&gt;0&lt;/v11:PmMultiClrSeqCnt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PanUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmtActRefNum xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmSpndAlertCde xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:OnbhlfSrvData xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknTxnId&gt;${__RandomString(64,0123456789abcdef,)}&lt;/v11:TknTxnId&gt;&#xd;
            &lt;v11:PosEntModeCd&gt;&lt;/v11:PosEntModeCd&gt;&#xd;
            &lt;v11:De055Cvm&gt;&lt;/v11:De055Cvm&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostNetworkMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value"> &quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostNetworkMessage&quot; </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="PSTINTTranIn24hrGracePeriod" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>10.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostInternalMessage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostInternalMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
		&lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${__Random(100,900,)}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;5598&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoSrceCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;DR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(100,1000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(100,1000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__groovy(vars.get(&quot;transDateIn24hr&quot;);,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__groovy(vars.get(&quot;transDateIn24hr&quot;);,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:AvailBalSign&gt;DR&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDescTx&gt;1-002,ACH In&lt;/v11:JoTxnDescTx&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDisputeId&gt;${__RandomString(10,0123456789,)}&lt;/v11:JoTxnDisputeId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JxTxnComment&gt;5005comment&lt;/v11:JxTxnComment&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoSysGenRefNr&gt;${__time(&apos;00&apos;yyyyMMddHHmmssSSSSSS,)}&lt;/v11:JoSysGenRefNr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnRsnCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoTxnRsnCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostInternalMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostInternalMessage&quot; </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="PSTISOTranIn24hrGracePeriod" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>10.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostNetworkMessage-new" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostNetworkMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${__Random(100,900,)}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;DR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;1036&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(100,1000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(100,1000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__groovy(vars.get(&quot;transDateIn24hr&quot;);,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__groovy(vars.get(&quot;transDateIn24hr&quot;);,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn&gt;${__javaScript(${__RandomString(6,0123456789,)}+&quot;-&quot;+${__RandomString(12,0123456789,)}+&quot;-&quot;+${__RandomString(6,0123456789,)},)}&lt;/v11:PmVisaArn&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:AvailBalSign&gt;DR&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:De1MsgType&gt;1221&lt;/v11:De1MsgType&gt;&#xd;
            &lt;v11:De3ProcessingCode&gt;${__RandomString(6,0123456789,)}&lt;/v11:De3ProcessingCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De4TxnAmt&gt;${JoPstdAm}&lt;/v11:De4TxnAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De5ReconAmt&gt;${JoPstdAm}&lt;/v11:De5ReconAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De6BillingAmt&gt;${JoPstdAm}&lt;/v11:De6BillingAmt&gt;&#xd;
            &lt;v11:De12TxnDtTm&gt;${__time(yyMMddHHmmss,)}&lt;/v11:De12TxnDtTm&gt;&#xd;
            &lt;v11:De22PtOfSrvcDataCd&gt;010011111110&lt;/v11:De22PtOfSrvcDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De25MsgReasonCd&gt;6638&lt;/v11:De25MsgReasonCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De26CrdAccptrBusCd&gt;6011&lt;/v11:De26CrdAccptrBusCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:DE28ReconDt xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De31AcqrRefData&gt;${__RandomString(23,0123456789,)}&lt;/v11:De31AcqrRefData&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De32AcqrngInstId&gt;${__RandomString(11,0123456789,)}&lt;/v11:De32AcqrngInstId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;${__RandomString(12,0123456789,)}&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De38ApprovalCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:De38ApprovalCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De41CrdAccptrTermId&gt;NONUSADOME&lt;/v11:De41CrdAccptrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De42CrdAccptrIdCode&gt;${__RandomString(15,0123456789,)}&lt;/v11:De42CrdAccptrIdCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De43CrdAccptrNmLoc&gt;GreenDot Corporation TestE Main PasadenaThisFillerForPositionFourtyOneToEightyThree9110700000CA USA&lt;/v11:De43CrdAccptrNmLoc&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De49CurCodeTxnX&gt;USD&lt;/v11:De49CurCodeTxnX&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:CashbackAmt&gt;0&lt;/v11:CashbackAmt&gt;&#xd;
            &lt;v11:AuthMatchedInd&gt;N&lt;/v11:AuthMatchedInd&gt;&#xd;
            &lt;v11:PmAcqNtwkId&gt;GDOT&lt;/v11:PmAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmMultiClrSeqNum&gt;0&lt;/v11:PmMultiClrSeqNum&gt;&#xd;
            &lt;v11:PmMultiClrSeqCnt&gt;0&lt;/v11:PmMultiClrSeqCnt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PanUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmtActRefNum xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmSpndAlertCde xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:OnbhlfSrvData xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknTxnId&gt;${__RandomString(64,0123456789abcdef,)}&lt;/v11:TknTxnId&gt;&#xd;
            &lt;v11:PosEntModeCd&gt;&lt;/v11:PosEntModeCd&gt;&#xd;
            &lt;v11:De055Cvm&gt;&lt;/v11:De055Cvm&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostNetworkMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value"> &quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostNetworkMessage&quot; </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="AUTHTranIn24hrGracePeriod" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>10.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutAuthMessage-new" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutAuthMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AuATm&gt;${__groovy(vars.get(&quot;AuATm&quot;);,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__groovy(vars.get(&quot;AuADt&quot;);,)}&lt;/v11:AuADt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCrdAccptId&gt;Non Us Domestic&lt;/v11:AuCrdAccptId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrZipCd&gt;91107&lt;/v11:AuMrZipCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCntryCd&gt;USA&lt;/v11:AuMrCntryCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCatgCd&gt;0763&lt;/v11:AuMrCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFgnExpIn&gt;D&lt;/v11:AuFgnExpIn&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAStCd&gt;CA&lt;/v11:AuAStCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuACrdExpDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P1461D,,)}&lt;/v11:AuACrdExpDt&gt;&#xd;
            &lt;v11:AuATrTermId&gt;FLPBLX1028&lt;/v11:AuATrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuOfflnAcsCd&gt;1&lt;/v11:AuOfflnAcsCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuARespCd&gt;APV&lt;/v11:AuARespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrAm&gt;${__Random(100,900,)}&lt;/v11:AuTrAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCurCd&gt;USD&lt;/v11:AuCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnOrigAm&gt;${__Random(100,900,)}&lt;/v11:AuTxnOrigAm&gt;&#xd;
            &lt;v11:AuTrDs&gt;PTS MTF TEST\\Pasadena&lt;/v11:AuTrDs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaRespCd&gt;000&lt;/v11:AuVisaRespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrTm&gt;${__groovy(vars.get(&quot;transDateIn24hr&quot;);,)}&lt;/v11:AuTrTm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrDt&gt;${__groovy(vars.get(&quot;transDateIn24hr&quot;);,)}&lt;/v11:AuTrDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRespApvlCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuRespApvlCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAdVerfRsltCd&gt;8&lt;/v11:AuAdVerfRsltCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAUcsEffDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuAUcsEffDt&gt;&#xd;
            &lt;v11:AuTxnStatIn&gt;I&lt;/v11:AuTxnStatIn&gt;&#xd;
            &lt;v11:AuUcsTxnCd&gt;1026&lt;/v11:AuUcsTxnCd&gt;&#xd;
            &lt;v11:AuTxnCatgCd&gt;0763&lt;/v11:AuTxnCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCsbkAm&gt;1&lt;/v11:AuCsbkAm&gt;&#xd;
            &lt;v11:AuMsgTypeCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuPrgDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P14D,,)}&lt;/v11:AuPrgDt&gt;&#xd;
            &lt;v11:AuPosDa&gt;00010170000J&lt;/v11:AuPosDa&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAppTxnCt&gt;8&lt;/v11:AuAppTxnCt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuStipRsnCd&gt;8&lt;/v11:AuStipRsnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee1Am&gt;1&lt;/v11:AuFee1Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn1Cd&gt;5005&lt;/v11:AuFeeTxn1Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee2Am&gt;3&lt;/v11:AuFee2Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn2Cd&gt;5005&lt;/v11:AuFeeTxn2Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee3Am&gt;5&lt;/v11:AuFee3Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn3Cd&gt;5005&lt;/v11:AuFeeTxn3Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee4Am&gt;8&lt;/v11:AuFee4Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn4Cd&gt;5005&lt;/v11:AuFeeTxn4Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee5Am&gt;13&lt;/v11:AuFee5Am&gt;&#xd;
            &lt;v11:AuFeeTxn5Cd&gt;5005&lt;/v11:AuFeeTxn5Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRqstdTxnAm&gt;${__Random(100,900,)}&lt;/v11:AuRqstdTxnAm&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;DR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(100,1000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(100,1000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAcqNtwkId&gt;${__RandomString(3,0123456789,)}&lt;/v11:AuAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnSign&gt;CR&lt;/v11:AuTxnSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuObsDataCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuObsDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTknTxnId&gt;${__RandomString(9,0123456789,)}&lt;/v11:AuTknTxnId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaAuCharSw&gt;D&lt;/v11:AuVisaAuCharSw&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuIncrAuInd&gt;false&lt;/v11:AuIncrAuInd&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:IfGeneratePosted&gt;false&lt;/v11:IfGeneratePosted&gt;&#xd;
            &lt;v11:AuRskScrNum&gt;&lt;/v11:AuRskScrNum&gt;&#xd;
            &lt;v11:AuPosEntModeCd&gt;&lt;/v11:AuPosEntModeCd&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;v11:AuRulAdjScrNum&gt;&lt;/v11:AuRulAdjScrNum&gt;&#xd;
            &lt;v11:De055Cvr&gt;&lt;/v11:De055Cvr&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
            &lt;v11:AvailBalSign&gt;DR&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:AvlBalOdThldSign&gt;&lt;/v11:AvlBalOdThldSign&gt;&#xd;
            &lt;v11:AuIsoProcCd&gt;DE3&lt;/v11:AuIsoProcCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutAuthMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutAuthMessage&quot; </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="false">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">AuSeqNr</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">(//*[name() = &apos;a:SequenceNumber&apos;])/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="AUTHTranIn24hrGracePeriod-Credit" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>10.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutAuthMessage-new" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutAuthMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AuATm&gt;${__groovy(vars.get(&quot;AuATm&quot;);,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__groovy(vars.get(&quot;AuADt&quot;);,)}&lt;/v11:AuADt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCrdAccptId&gt;Non Us Domestic&lt;/v11:AuCrdAccptId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrZipCd&gt;91107&lt;/v11:AuMrZipCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCntryCd&gt;USA&lt;/v11:AuMrCntryCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCatgCd&gt;0763&lt;/v11:AuMrCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFgnExpIn&gt;D&lt;/v11:AuFgnExpIn&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAStCd&gt;CA&lt;/v11:AuAStCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuACrdExpDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P1461D,,)}&lt;/v11:AuACrdExpDt&gt;&#xd;
            &lt;v11:AuATrTermId&gt;FLPBLX1028&lt;/v11:AuATrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuOfflnAcsCd&gt;1&lt;/v11:AuOfflnAcsCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuARespCd&gt;APV&lt;/v11:AuARespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrAm&gt;${__Random(100,900,)}&lt;/v11:AuTrAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCurCd&gt;USD&lt;/v11:AuCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnOrigAm&gt;${__Random(100,900,)}&lt;/v11:AuTxnOrigAm&gt;&#xd;
            &lt;v11:AuTrDs&gt;PTS MTF TEST\\Pasadena&lt;/v11:AuTrDs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaRespCd&gt;000&lt;/v11:AuVisaRespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrTm&gt;${__groovy(vars.get(&quot;transDateIn24hr&quot;);,)}&lt;/v11:AuTrTm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrDt&gt;${__groovy(vars.get(&quot;transDateIn24hr&quot;);,)}&lt;/v11:AuTrDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRespApvlCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuRespApvlCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAdVerfRsltCd&gt;8&lt;/v11:AuAdVerfRsltCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAUcsEffDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuAUcsEffDt&gt;&#xd;
            &lt;v11:AuTxnStatIn&gt;I&lt;/v11:AuTxnStatIn&gt;&#xd;
            &lt;v11:AuUcsTxnCd&gt;1026&lt;/v11:AuUcsTxnCd&gt;&#xd;
            &lt;v11:AuTxnCatgCd&gt;0763&lt;/v11:AuTxnCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCsbkAm&gt;1&lt;/v11:AuCsbkAm&gt;&#xd;
            &lt;v11:AuMsgTypeCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuPrgDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P14D,,)}&lt;/v11:AuPrgDt&gt;&#xd;
            &lt;v11:AuPosDa&gt;00010170000J&lt;/v11:AuPosDa&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAppTxnCt&gt;8&lt;/v11:AuAppTxnCt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuStipRsnCd&gt;8&lt;/v11:AuStipRsnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee1Am&gt;1&lt;/v11:AuFee1Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn1Cd&gt;5005&lt;/v11:AuFeeTxn1Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee2Am&gt;3&lt;/v11:AuFee2Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn2Cd&gt;5005&lt;/v11:AuFeeTxn2Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee3Am&gt;5&lt;/v11:AuFee3Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn3Cd&gt;5005&lt;/v11:AuFeeTxn3Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee4Am&gt;8&lt;/v11:AuFee4Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn4Cd&gt;5005&lt;/v11:AuFeeTxn4Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee5Am&gt;13&lt;/v11:AuFee5Am&gt;&#xd;
            &lt;v11:AuFeeTxn5Cd&gt;5005&lt;/v11:AuFeeTxn5Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRqstdTxnAm&gt;${__Random(100,900,)}&lt;/v11:AuRqstdTxnAm&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;DR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(100,1000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(100,1000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAcqNtwkId&gt;${__RandomString(3,0123456789,)}&lt;/v11:AuAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnSign&gt;CR&lt;/v11:AuTxnSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuObsDataCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuObsDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTknTxnId&gt;${__RandomString(9,0123456789,)}&lt;/v11:AuTknTxnId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaAuCharSw&gt;D&lt;/v11:AuVisaAuCharSw&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuIncrAuInd&gt;false&lt;/v11:AuIncrAuInd&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:IfGeneratePosted&gt;false&lt;/v11:IfGeneratePosted&gt;&#xd;
            &lt;v11:AuRskScrNum&gt;&lt;/v11:AuRskScrNum&gt;&#xd;
            &lt;v11:AuPosEntModeCd&gt;&lt;/v11:AuPosEntModeCd&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;v11:AuRulAdjScrNum&gt;&lt;/v11:AuRulAdjScrNum&gt;&#xd;
            &lt;v11:De055Cvr&gt;&lt;/v11:De055Cvr&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
            &lt;v11:AvailBalSign&gt;CR&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:AvlBalOdThldSign&gt;&lt;/v11:AvlBalOdThldSign&gt;&#xd;
            &lt;v11:AuIsoProcCd&gt;DE3&lt;/v11:AuIsoProcCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutAuthMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutAuthMessage&quot; </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">AuSeqNr</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">(//*[name() = &apos;a:SequenceNumber&apos;])/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostNetworkMessage" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostNetworkMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:AcCd&gt;${AccountBalanceExternalProxy}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${JoPstdAm}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;DR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;1035&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;DR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS,,P-2D,,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn&gt;${__javaScript(${__RandomString(6,0123456789,)}+&quot;-&quot;+${__RandomString(12,0123456789,)}+&quot;-&quot;+${__RandomString(6,0123456789,)},)}&lt;/v11:PmVisaArn&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:AvailBalSign&gt;CR&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:De1MsgType&gt;1221&lt;/v11:De1MsgType&gt;&#xd;
            &lt;v11:De3ProcessingCode&gt;${__RandomString(6,0123456789,)}&lt;/v11:De3ProcessingCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De4TxnAmt&gt;${JoPstdAm}&lt;/v11:De4TxnAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De5ReconAmt&gt;${JoPstdAm}&lt;/v11:De5ReconAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De6BillingAmt&gt;${JoPstdAm}&lt;/v11:De6BillingAmt&gt;&#xd;
            &lt;v11:De12TxnDtTm&gt;${__time(yyMMddHHmmss,)}&lt;/v11:De12TxnDtTm&gt;&#xd;
            &lt;v11:De22PtOfSrvcDataCd&gt;010011111110&lt;/v11:De22PtOfSrvcDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De25MsgReasonCd&gt;6638&lt;/v11:De25MsgReasonCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De26CrdAccptrBusCd&gt;6011&lt;/v11:De26CrdAccptrBusCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:DE28ReconDt xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De31AcqrRefData&gt;${__RandomString(23,0123456789,)}&lt;/v11:De31AcqrRefData&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De32AcqrngInstId&gt;${__RandomString(11,0123456789,)}&lt;/v11:De32AcqrngInstId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;${__RandomString(12,0123456789,)}&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De38ApprovalCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:De38ApprovalCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De41CrdAccptrTermId&gt;NONUSADOME&lt;/v11:De41CrdAccptrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De42CrdAccptrIdCode&gt;${__RandomString(15,0123456789,)}&lt;/v11:De42CrdAccptrIdCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De43CrdAccptrNmLoc&gt;GreenDot Corporation TestE Main PasadenaThisFillerForPositionFourtyOneToEightyThree9110700000CA USA&lt;/v11:De43CrdAccptrNmLoc&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De49CurCodeTxnX&gt;USD&lt;/v11:De49CurCodeTxnX&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:CashbackAmt&gt;0&lt;/v11:CashbackAmt&gt;&#xd;
            &#xd;
            &lt;v11:AuthMatchedInd&gt;Y&lt;/v11:AuthMatchedInd&gt;&#xd;
            &lt;v11:AuATm&gt;${__groovy(vars.get(&quot;AuATm&quot;);,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__groovy(vars.get(&quot;AuADt&quot;);,)}&lt;/v11:AuADt&gt;&#xd;
            &lt;v11:AuSeqNr&gt;${AuSeqNr}&lt;/v11:AuSeqNr&gt;&#xd;
            &#xd;
            &lt;v11:PmAcqNtwkId&gt;GDOT&lt;/v11:PmAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmMultiClrSeqNum&gt;0&lt;/v11:PmMultiClrSeqNum&gt;&#xd;
            &lt;v11:PmMultiClrSeqCnt&gt;0&lt;/v11:PmMultiClrSeqCnt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PanUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmtActRefNum xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmSpndAlertCde xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:OnbhlfSrvData xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknTxnId&gt;${__RandomString(64,0123456789abcdef,)}&lt;/v11:TknTxnId&gt;&#xd;
            &lt;v11:PosEntModeCd&gt;&lt;/v11:PosEntModeCd&gt;&#xd;
            &lt;v11:De055Cvm&gt;&lt;/v11:De055Cvm&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostNetworkMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value"> &quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostNetworkMessage&quot; </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GetAccountToSimTrans-ACI" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">kabbage,51731,GZ002</stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">
--distinct
Select  top ${NUMBER_OF_ACCOUNTS} RTRIM(a.ACIAccountExternalID) as ACIAccountExternalID, 
RTRIM(PaymentIdentifierProxy) as PaymentIdentifierProxy, a.AccountIdentifier, ab.AccountBalanceIdentifier,RTRIM(AccountBalanceExternalProxy) as AccountBalanceExternalProxy
From AccountBalance As ab with(nolock)
inner Join Account As a with(nolock)
On ab.AccountKey = a.AccountKey
INNER JOIN Product AS p with(nolock)
ON p.ProductKey=a.ProductKey
INNER JOIN AccountBillCycle abc with (NOLOCK) 
ON abc.AccountKey = a.AccountKey
inner Join AccountHolder As ah with(nolock)
On ah.AccountKey = a.AccountKey
inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
On ahpi.AccountHolderKey = ah.AccountHolderKey
inner Join PaymentIdentifier As pid with(nolock)
On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
join  PaymentInstrument pin (nolock) on pin.PaymentIdentifierKey=pid.PaymentIdentifierKey
join PaymentInstrumentType pit (nolock) on pin.PaymentInstrumentTypeKey=pit.PaymentInstrumentTypeKey
join PaymentInstrumentStatus pis (nolock) on pis.PaymentInstrumentStatusKey=pin.PaymentInstrumentStatusKey
--inner join PostTransaction PIT with(NOLOCK) 
--ON PIT.AccountIdentifier = A.AccountIdentifier
where p.Productkey=69
and  ab.AvailableBalance&gt;=0
and a.AccountStatusKey=2 
and PaymentInstrumentType not in ( &apos;Virtual&apos;,&apos;MagStripe&apos;) and PaymentInstrumentStatus=&apos;Activated&apos;
and a.createdate between &apos;2023-07-01&apos; and &apos;2023-10-01&apos;
and AccountBalanceTypeKey=1
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">ACIAccountExternalID,PaymentIdentifierProxy,AccountIdentifier,AccountBalanceIdentifier,AccountBalanceExternalProxy</stringProp>
          <stringProp name="resultVariable">AccountList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db-OD-UnEnrolled" enabled="false">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">
--distinct
Select  top ${NUMBER_OF_ACCOUNTS} RTRIM(a.ACIAccountExternalID) as ACIAccountExternalID, 
RTRIM(PaymentIdentifierProxy) as PaymentIdentifierProxy, a.AccountIdentifier, ab.AccountBalanceIdentifier,RTRIM(AccountBalanceExternalProxy) as AccountBalanceExternalProxy
From AccountBalance As ab with(nolock)
inner Join Account As a with(nolock)
On ab.AccountKey = a.AccountKey
INNER JOIN Product AS p with(nolock)
ON p.ProductKey=a.ProductKey
INNER JOIN AccountBillCycle abc with (NOLOCK) 
ON abc.AccountKey = a.AccountKey
inner Join AccountHolder As ah with(nolock)
On ah.AccountKey = a.AccountKey
inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
On ahpi.AccountHolderKey = ah.AccountHolderKey
inner Join PaymentIdentifier As pid with(nolock)
On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
join  PaymentInstrument pin (nolock) on pin.PaymentIdentifierKey=pid.PaymentIdentifierKey
join PaymentInstrumentType pit (nolock) on pin.PaymentInstrumentTypeKey=pit.PaymentInstrumentTypeKey
join PaymentInstrumentStatus pis (nolock) on pis.PaymentInstrumentStatusKey=pin.PaymentInstrumentStatusKey
--inner join PostTransaction PIT with(NOLOCK) 
--ON PIT.AccountIdentifier = A.AccountIdentifier
where a.accountkey not in (
SELECT  a.accountkey
        FROM dbo.AccountSubscription asn
            INNER JOIN dbo.Account a
                ON a.AccountKey = asn.AccountKey
        WHERE asn.ProductFeatureGroupKey in (SELECT pfgd.ProductFeatureGroupKey
        FROM dbo.ProductFeatureGroupDefinition pfgd
		inner join dbo.productfeaturegroup pfg
                ON pfg.productfeaturegroupkey = pfgd.productfeaturegroupkey
		inner join dbo.Feature f 
		on f.featurekey = pfgd.featurekey
		where f.FeatureKey in (56,57)) and a.ProductKey=69) and a.ProductKey=69
		and a.AccountStatusKey=2
and pit.PaymentInstrumentType not in ( &apos;Virtual&apos;,&apos;MagStripe&apos;) and pis.PaymentInstrumentStatus=&apos;Activated&apos;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">ACIAccountExternalID,PaymentIdentifierProxy,AccountIdentifier,AccountBalanceIdentifier,AccountBalanceExternalProxy</stringProp>
          <stringProp name="resultVariable">AccountList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get AccountData from db - estatement" enabled="false">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">
Select distinct TOP  ${NUMBER_OF_ACCOUNTS} RTRIM(AccountBalanceExternalProxy) as AccountBalanceExternalProxy, 
RTRIM(PaymentIdentifierProxy) as PaymentIdentifierProxy, a.AccountIdentifier
From AccountBalance As ab with(nolock)
inner Join Account As a with(nolock)
On ab.AccountKey = a.AccountKey
INNER JOIN Product AS p with(nolock)
ON p.ProductKey=a.ProductKey
INNER JOIN AccountBillCycle abc with (NOLOCK) 
ON abc.AccountKey = a.AccountKey
inner Join AccountHolder As ah with(nolock)
On ah.AccountKey = a.AccountKey
inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
On ahpi.AccountHolderKey = ah.AccountHolderKey
inner Join PaymentIdentifier As pid with(nolock)
On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
inner join PostTransaction PIT with(NOLOCK) 
ON PIT.AccountIdentifier = A.AccountIdentifier
where p.ProductCode=&apos;${ProductCode}&apos;
and  ab.AvailableBalance&gt;1
and a.AccountStatusKey=2
--and abc.ActivationDate &lt; GETDATE()-33
--and PIT.ProcessorBusinessDate &gt; GETDATE()-30 and PIT.ProcessorBusinessDate &lt; GETDATE()-4
and A.Accountkey&gt;${MinAccountKey}
and A.Accountkey&lt;${MaxAccountKey}
--order by A.accountKey asc
--and a.CreateDate=&apos;2018-10-29 01:34:30.620&apos;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier</stringProp>
          <stringProp name="resultVariable">AccountList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get Account from db - addfriends" enabled="false">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Select  top 50000 RTRIM(AccountBalanceExternalProxy) as AccountBalanceExternalProxy, 
RTRIM(PaymentIdentifierProxy) as PaymentIdentifierProxy, a.AccountIdentifier, ab.AccountBalanceIdentifier
From AccountBalance As ab with(nolock)
inner Join Account As a with(nolock)
On ab.AccountKey = a.AccountKey
INNER JOIN Product AS p with(nolock)
ON p.ProductKey=a.ProductKey
INNER JOIN AccountBillCycle abc with (NOLOCK) 
ON abc.AccountKey = a.AccountKey
inner Join AccountHolder As ah with(nolock)
On ah.AccountKey = a.AccountKey
inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
On ahpi.AccountHolderKey = ah.AccountHolderKey
inner Join PaymentIdentifier As pid with(nolock)
On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
INNER JOIN dbo.PaymentInstrument as pin with(nolock)
ON pin.PaymentIdentifierKey = pid.PaymentIdentifierKey
--inner join PostTransaction PIT with(NOLOCK) 
--ON PIT.AccountIdentifier = A.AccountIdentifier
where p.ProductCode=&apos;S40002&apos;
and  ab.AvailableBalance&gt;=0
and a.AccountStatusKey=2
--and abc.ActivationDate &lt; GETDATE()-35
--and PIT.ProcessorBusinessDate &gt; GETDATE()-30 and PIT.ProcessorBusinessDate &lt; GETDATE()-4
--and a.CreateDate=&apos;2018-10-29 01:34:30.620&apos;
and  a.CreateDate &lt; getDate()-4
--and ab.AvailableBalanceAsOfDate &lt; getDate()-4
--and ab.LedgerBalanceAsOfDate &lt; getDate()-4
and a.CreateDate BETWEEN &apos;2021-01-01&apos; and &apos;2021-06-07&apos;
and ab.AccountBalanceTypeKey  in (1,2)
AND DATEDIFF(d, pin.ActivationDate, &apos;2021-06-09 00:00:00&apos;)
             BETWEEN 0 AND 90
--and ab.AccountBalanceTypeKey = ${AccountBalanceType}
--order by newid() desc

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">AccountBalanceExternalProxy,PaymentIdentifierProxy,AccountIdentifier,AccountBalanceIdentifier</stringProp>
          <stringProp name="resultVariable">AccountList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

// initialize a Random object somewhere; you should only need one
Random random = new Random();

FileWriter fstream = new FileWriter(vars.get (&quot;RootDataDirectory&quot;) + File.separator  + &quot;CardProxiesForSimTran_ACI.csv&quot;,true);
//AccountBalanceExternalProxy,ACIAccountExternalID,PaymentIdentifierProxy,AccountIdentifier,AccountBalanceIdentifier
for (var row : vars.getObject(&quot;AccountList&quot;))
{
	int amount = random.nextInt(100) + 10;
	fstream.write( row.get(&quot;ACIAccountExternalID&quot;) +  &quot;,&quot; + row.get(&quot;PaymentIdentifierProxy&quot;) +  &quot;,&quot; + row.get(&quot;AccountIdentifier&quot;) +&quot;,&quot;+ amount + &quot;,&quot; + row.get(&quot;AccountBalanceExternalProxy&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
 </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Data Splitter Execution" enabled="false">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">C:\GDQA_PerfDataSplitter\GDQA_PerfDataSplitter.exe</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${WORKSPACE_PATH}\SplitFiles</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="LoopCopy" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get current index" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;

try{
	log.info(&quot;Current count:&quot; + String.valueOf(${__jm__LoopCopy__idx}+1));
	vars.put(&quot;CurrentIndex&quot;, String.valueOf(${__jm__LoopCopy__idx}+1));
	vars.put(&quot;CurrentRemoteServerIndex&quot;, String.valueOf(${__jm__LoopCopy__idx}+2));
}
catch (Throwable ex)
{
	log.error(&quot;Error in Get-current-index script&quot;, ex);
	throw ex;
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Copy data file to shared folder" enabled="true">
            <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
            <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
            <stringProp name="SystemSampler.command">cmd.exe</stringProp>
            <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">/c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">copy /b /y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">.\\${CurrentIndex}\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">\\\\g1pfbosload0${CurrentRemoteServerIndex}\\data\\${RESULT_FILE_NAME}_${ProgramCode}.csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SystemSampler.directory">${WORKSPACE_PATH}\SplitFiles</stringProp>
          </SystemSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TG-EnrollOdFeature-Chirp" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\CardProxiesForSimTran_ACI.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">ACIAccountExternalID,PaymentIdentifierProxy,AccountIdentifier</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PosteInternalTransaction-DD" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GenerateRandomValues" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);

Random random = new Random();
int amount = random.nextInt(3000) + 1000;

vars.put(&quot;JoPstdAm&quot;, Integer.toString(amount));

</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="base62ToGuid" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;input&quot;: &quot;${__BeanShell(vars.get(&quot;JoSysGenRefNr&quot;);,)}&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">http://gdcqatools01/GDQATools/GDQA_Common.Assistant.WebApi/base62ToGuid</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TransactionReferenceID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.output</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="InsertPostInternalTransactionDetail" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="query">
INSERT INTO PostInternalTransactionDetail (TransactionReferenceID,TransactionDescription,AchCategoryCode)
VALUES (&apos;${TransactionReferenceID}&apos;,&apos;Custom:DD Description&apos;,&apos;GB&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="base36ToGuid" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;input&quot;: &quot;${__BeanShell(vars.get(&quot;JxTxnComment&quot;);,)}&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">http://gdcqatools01/GDQATools/GDQA_Common.Assistant.WebApi/base36ToGuid</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">FundTransferToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.output</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="InsertFundTransfer" enabled="true">
              <stringProp name="dataSource">GBOS</stringProp>
              <stringProp name="query">
insert into FundTransfer
(InitiatorAccountIdentifier,
FundTransferToken,
FundTransferTypeKey,
FundTransferStatusKey,
CurrencyKey,
FundTransferDelayTypeKey,
TransactionAmount,
TransactionDetail,
IsSystemInitiated,
CreateDate,
ChangeDate,
ChangeBy,
TransactionDate)
VALUES
(&apos;${AccountIdentifier}&apos;,
&apos;${FundTransferToken}&apos;,
6,
3,
1,
1,
${JoPstdAm},
&apos;DDTest&apos;,
1,
GETDATE(),
GETDATE(),
&apos;perf-test&apos;,
GETDATE()
)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostInternalMessage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostInternalMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
		&lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${__Random(5000000,10000000,)}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;CR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;5598&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoSrceCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;CR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(500000,900000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(100000,500000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDescTx&gt;1-002,ACH In&lt;/v11:JoTxnDescTx&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnDisputeId&gt;${__RandomString(10,0123456789,)}&lt;/v11:JoTxnDisputeId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JxTxnComment&gt;${JxTxnComment}&lt;/v11:JxTxnComment&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoSysGenRefNr&gt;${JoSysGenRefNr}&lt;/v11:JoSysGenRefNr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnRsnCd&gt;${__RandomString(3,0123456789,)}&lt;/v11:JoTxnRsnCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostInternalMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostInternalMessage&quot; </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PartnerAPI" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Oauth" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;grant_type&quot;: &quot;client_credentials&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${OAUTH_API}/authentication</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic Y2hpcnBRQTpjaGlycFBAc3N3MHJk</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-GD-RequestId</stringProp>
                    <stringProp name="Header.value">${__UUID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract AccessToken From Response Message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token;token_type;expires_in;scope</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token;$.token_type;$.expires_in;$.scope</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Terms" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;termsAcceptances&quot;: [&#xd;
    {&#xd;
      &quot;termsIdentifier&quot;: &quot;overdraft&quot;,&#xd;
      &quot;termsAcceptanceFlag&quot;:&quot;true&quot;,&#xd;
       &quot;termsAcceptanceDateTime&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;,)}&quot;&#xd;
    }&#xd;
  ]&#xd;
} </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/accounts/${AccountIdentifier}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-GD-Bos-Crypto-Recipient-Trusted-Public-Key-Hex</stringProp>
                  <stringProp name="Header.value">1619</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-GD-RequestId</stringProp>
                  <stringProp name="Header.value">${__UUID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Valid it returns success" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1297677681">&quot;description&quot;:&quot;Success&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Valid it returns success</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CheckEg" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/accounts/${AccountIdentifier}/odEligibilities</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-GD-RequestId</stringProp>
                  <stringProp name="Header.value">${__UUID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Valid response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1297677681">&quot;description&quot;:&quot;Success&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Validates whether or not the call was successful</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Response Message" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">qualifiedTier</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.qualifiedTier;</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Enrollment Feature" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;authorize&quot;: &quot;true&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PARTNER_API}/${ProgramCode}/accounts/${AccountIdentifier}/features/od${qualifiedTier}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="GBOS Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-GD-RequestId</stringProp>
                  <stringProp name="Header.value">${__UUID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Feature" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def feature = &quot;${Feature}&quot;;
if (&quot;${ProgramCode}&quot; == &quot;gbr&quot;)
{
	def feature_od =  &quot;od${__RandomString(1,123,)}&quot;; //${__chooseRandom(&quot;od1&quot;,&quot;od2&quot;,&quot;od3&quot;)}; 
	vars.put(&quot;in_feature&quot;, feature_od);
}else{
	vars.put(&quot;in_feature&quot;, feature);
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Valid response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1297677681">&quot;description&quot;:&quot;Success&quot;</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Validates whether or not the call was successful</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Generate Auth To Posted Transactions-TestingODFee-ACI" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">30</stringProp>
        <stringProp name="ThreadGroup.ramp_time">60</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\CardProxiesForSimTran_ACI.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">ACIAccountExternalID,PaymentIdentifierProxy,AccountIdentifier</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GenerateRandomValues" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);
vars.put(&quot;approvalcode&quot;, &quot;${__RandomString(6,0123456789,)}&quot;)

Random random = new Random();
int amount = random.nextInt(10) + 10;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Auth data" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">//Random random = new Random();
//
//def TimeStampUnformatted = new Date() - 2 - random.nextInt(4)
//def AuTrTm = TimeStampUnformatted.format(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&quot;)
//vars.put(&quot;AuATm&quot;, AuTrTm);
//vars.put(&quot;AuADt&quot;, AuTrTm);
//
//
//int amount = random.nextInt(100) + 50;
//
//vars.put(&quot;JoPstdAm&quot;, Integer.toString(amount));


Random random = new Random();
use(groovy.time.TimeCategory) {
def TimeStampUnformatted = new Date() - (random.nextInt(120)+24).hour

def AuTrTm = TimeStampUnformatted.format(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&quot;)
vars.put(&quot;AuATm&quot;, AuTrTm);
vars.put(&quot;AuADt&quot;, AuTrTm);

def gracePeriodTimeStamp = TimeStampUnformatted + 10.hour
def transDateIn24hr = gracePeriodTimeStamp.format(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&quot;)
vars.put(&quot;transDateIn24hr&quot;, transDateIn24hr)   
}


int amount = random.nextInt(1000) + 500;

vars.put(&quot;JoPstdAm&quot;, Integer.toString(amount));




</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutAuthMessage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutAuthMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AuATm&gt;${__groovy(vars.get(&quot;AuATm&quot;);,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__groovy(vars.get(&quot;AuADt&quot;);,)}&lt;/v11:AuADt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCrdAccptId&gt;Non Us Domestic&lt;/v11:AuCrdAccptId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrZipCd&gt;91107&lt;/v11:AuMrZipCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCntryCd&gt;USA&lt;/v11:AuMrCntryCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuMrCatgCd&gt;5912&lt;/v11:AuMrCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFgnExpIn&gt;D&lt;/v11:AuFgnExpIn&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAStCd&gt;CA&lt;/v11:AuAStCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuACrdExpDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P1461D,,)}&lt;/v11:AuACrdExpDt&gt;&#xd;
            &lt;v11:AuATrTermId&gt;FLPBLX1028&lt;/v11:AuATrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuOfflnAcsCd&gt;1&lt;/v11:AuOfflnAcsCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuARespCd&gt;APV&lt;/v11:AuARespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrAm&gt;${JoPstdAm}&lt;/v11:AuTrAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCurCd&gt;USD&lt;/v11:AuCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnOrigAm&gt;${JoPstdAm}&lt;/v11:AuTxnOrigAm&gt;&#xd;
            &lt;v11:AuTrDs&gt;PTS MTF TEST\\Pasadena&lt;/v11:AuTrDs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaRespCd&gt;000&lt;/v11:AuVisaRespCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrTm&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrTm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTrDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuTrDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRespApvlCd&gt;${approvalcode}&lt;/v11:AuRespApvlCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAdVerfRsltCd&gt;8&lt;/v11:AuAdVerfRsltCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAUcsEffDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:AuAUcsEffDt&gt;&#xd;
            &lt;v11:AuTxnStatIn&gt;I&lt;/v11:AuTxnStatIn&gt;&#xd;
            &lt;v11:AuUcsTxnCd&gt;2010&lt;/v11:AuUcsTxnCd&gt;&#xd;
            &lt;v11:AuTxnCatgCd&gt;5912&lt;/v11:AuTxnCatgCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuCsbkAm&gt;1&lt;/v11:AuCsbkAm&gt;&#xd;
            &lt;v11:AuMsgTypeCd&gt;1140&lt;/v11:AuMsgTypeCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuPrgDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P14D,,)}&lt;/v11:AuPrgDt&gt;&#xd;
            &lt;v11:AuPosDa&gt;00010170000J&lt;/v11:AuPosDa&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAppTxnCt&gt;8&lt;/v11:AuAppTxnCt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuStipRsnCd&gt;8&lt;/v11:AuStipRsnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee1Am&gt;1&lt;/v11:AuFee1Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn1Cd&gt;5005&lt;/v11:AuFeeTxn1Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee2Am&gt;3&lt;/v11:AuFee2Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn2Cd&gt;5005&lt;/v11:AuFeeTxn2Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee3Am&gt;5&lt;/v11:AuFee3Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn3Cd&gt;5005&lt;/v11:AuFeeTxn3Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee4Am&gt;8&lt;/v11:AuFee4Am&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFeeTxn4Cd&gt;5005&lt;/v11:AuFeeTxn4Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuFee5Am&gt;13&lt;/v11:AuFee5Am&gt;&#xd;
            &lt;v11:AuFeeTxn5Cd&gt;5005&lt;/v11:AuFeeTxn5Cd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuRqstdTxnAm&gt;${JoPstdAm}&lt;/v11:AuRqstdTxnAm&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;DR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,9000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,5000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuAcqNtwkId&gt;${__RandomString(3,0123456789,)}&lt;/v11:AuAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTxnSign&gt;DR&lt;/v11:AuTxnSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuObsDataCd&gt;${__RandomString(6,0123456789,)}&lt;/v11:AuObsDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuTknTxnId&gt;${__RandomString(9,0123456789,)}&lt;/v11:AuTknTxnId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuVisaAuCharSw&gt;D&lt;/v11:AuVisaAuCharSw&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AuIncrAuInd&gt;false&lt;/v11:AuIncrAuInd&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:IfGeneratePosted&gt;false&lt;/v11:IfGeneratePosted&gt;&#xd;
            &lt;v11:AuRskScrNum&gt;&lt;/v11:AuRskScrNum&gt;&#xd;
            &lt;v11:AuPosEntModeCd&gt;&lt;/v11:AuPosEntModeCd&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;v11:AuRulAdjScrNum&gt;&lt;/v11:AuRulAdjScrNum&gt;&#xd;
            &lt;v11:De055Cvr&gt;&lt;/v11:De055Cvr&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
            &lt;v11:AvailBalSign&gt;DR&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:AvlBalOdThldSign&gt;&lt;/v11:AvlBalOdThldSign&gt;&#xd;
            &lt;v11:AuIsoProcCd&gt;DE3&lt;/v11:AuIsoProcCd&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutAuthMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutAuthMessage&quot; </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">AuSeqNr</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">(//*[name() = &apos;a:SequenceNumber&apos;])/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostNetworkMessage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostNetworkMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${JoPstdAm}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;DR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;2010&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;DR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,90000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,50000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS,,P-2D,,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn&gt;${__javaScript(${__RandomString(6,0123456789,)}+&quot;-&quot;+${__RandomString(12,0123456789,)}+&quot;-&quot;+${__RandomString(6,0123456789,)},)}&lt;/v11:PmVisaArn&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:AvailBalSign&gt;DR&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:De1MsgType&gt;1200&lt;/v11:De1MsgType&gt;&#xd;
            &lt;v11:De3ProcessingCode&gt;${__RandomString(6,0123456789,)}&lt;/v11:De3ProcessingCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De4TxnAmt&gt;${JoPstdAm}&lt;/v11:De4TxnAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De5ReconAmt&gt;${JoPstdAm}&lt;/v11:De5ReconAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De6BillingAmt&gt;${JoPstdAm}&lt;/v11:De6BillingAmt&gt;&#xd;
            &lt;v11:De12TxnDtTm&gt;${__time(yyMMddHHmmss,)}&lt;/v11:De12TxnDtTm&gt;&#xd;
            &lt;v11:De22PtOfSrvcDataCd&gt;010011111110&lt;/v11:De22PtOfSrvcDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De25MsgReasonCd&gt;6638&lt;/v11:De25MsgReasonCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De26CrdAccptrBusCd&gt;5912&lt;/v11:De26CrdAccptrBusCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:DE28ReconDt xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De31AcqrRefData&gt;${__RandomString(23,0123456789,)}&lt;/v11:De31AcqrRefData&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De32AcqrngInstId&gt;${__RandomString(11,0123456789,)}&lt;/v11:De32AcqrngInstId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;${__RandomString(12,0123456789,)}&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De38ApprovalCd&gt;${approvalcode}&lt;/v11:De38ApprovalCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De41CrdAccptrTermId&gt;NONUSADOME&lt;/v11:De41CrdAccptrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De42CrdAccptrIdCode&gt;${__RandomString(15,0123456789,)}&lt;/v11:De42CrdAccptrIdCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De43CrdAccptrNmLoc&gt;GreenDot Corporation TestE Main PasadenaThisFillerForPositionFourtyOneToEightyThree9110700000CA USA&lt;/v11:De43CrdAccptrNmLoc&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De49CurCodeTxnX&gt;USD&lt;/v11:De49CurCodeTxnX&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:CashbackAmt&gt;0&lt;/v11:CashbackAmt&gt;&#xd;
            &#xd;
            &lt;v11:AuthMatchedInd&gt;Y&lt;/v11:AuthMatchedInd&gt;&#xd;
            &lt;v11:AuATm&gt;${__groovy(vars.get(&quot;AuATm&quot;);,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__groovy(vars.get(&quot;AuADt&quot;);,)}&lt;/v11:AuADt&gt;&#xd;
            &lt;v11:AuSeqNr&gt;${AuSeqNr}&lt;/v11:AuSeqNr&gt;&#xd;
            &#xd;
            &lt;v11:PmAcqNtwkId&gt;GDOT&lt;/v11:PmAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmMultiClrSeqNum&gt;0&lt;/v11:PmMultiClrSeqNum&gt;&#xd;
            &lt;v11:PmMultiClrSeqCnt&gt;0&lt;/v11:PmMultiClrSeqCnt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PanUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmtActRefNum xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmSpndAlertCde xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:OnbhlfSrvData xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknTxnId&gt;${__RandomString(64,0123456789abcdef,)}&lt;/v11:TknTxnId&gt;&#xd;
            &lt;v11:PosEntModeCd&gt;&lt;/v11:PosEntModeCd&gt;&#xd;
            &lt;v11:De055Cvm&gt;&lt;/v11:De055Cvm&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostNetworkMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value"> &quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostNetworkMessage&quot; </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TG-DBUpdate" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="UpdateTransactionDate" enabled="false">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">update AuthorizeTransaction set ProcessorTransactionDate = DATEADD(DAY, -2, ProcessorTransactionDate)  where ProcessorTransactionDate &gt;CONVERT(char(10), GetDate(),126)

update Posttransaction 
set AuthProcessorTransactionDate = DATEADD(DAY, -2, AuthProcessorTransactionDate) 
where AuthProcessorTransactionDate &gt;CONVERT(char(10), GetDate(),126)

update [NegativeAccountBalanceTransaction] 
set AuthProcessorTransactionDate = DATEADD(DAY, -2, AuthProcessorTransactionDate)
where AuthProcessorTransactionDate &gt;CONVERT(char(10), GetDate(),126)

--update OverdraftFeeAccountGracePeriod set GracePeriodDate = DateAdd(Day, DateDiff(Day,GracePeriodDate,Getdate())-(RAND()*(4-2)+2), GracePeriodDate)
--where GracePeriodDate&gt;CONVERT(char(10), GetDate(),126)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="TestPlan.comments">For new generated transactions</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="UpdateSubscriptionstartdatetime" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">update accountsubscription
set enrollmentdate=DATEADD(DAY, -2, enrollmentdate) 
, subscriptionstartdatetime=DATEADD(DAY, -2, subscriptionstartdatetime) 
where createdate&gt;CONVERT(char(10), GetDate(),126)

update [OverdraftFeeAccountSubscription_Staging]
set subscriptionstartdatetime=DATEADD(DAY, -2, subscriptionstartdatetime)
where createdate&gt;CONVERT(char(10), GetDate(),126)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="UpdateMonthlyProcessingRequest" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">Update MonthlyProcessingRequest
Set StartDate = GETDATE()-1, CreateDate = GETDATE()-1, ChangeDate = GETDATE()-1
where MonthlyProcessingRequestKey in ((select top 1 MonthlyProcessingRequestKey from MonthlyProcessingRequest where MonthlyProcessingRequestTYpeKey=7 order by 1 desc))</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="UpdateAccountTransaction" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">update AccountTransaction
set TransactionDate = DATEADD(MONTH, -2, GETDATE()) where TransactionDate &gt;CONVERT(char(10), GetDate(),126)and TransClassKey=189</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Generate Transactions-ForODReversal" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${RootDataDirectory}\ODReversalAccountList_ACI.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">AccountIdentifier,TransactionAmount,ApprovalCode,RetrievalReferenceNumber</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Auth data" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">//Random random = new Random();
//
//def TimeStampUnformatted = new Date() - 2 - random.nextInt(4)
//def AuTrTm = TimeStampUnformatted.format(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&quot;)
//vars.put(&quot;AuATm&quot;, AuTrTm);
//vars.put(&quot;AuADt&quot;, AuTrTm);
//
//
//int amount = random.nextInt(100) + 50;
//
//vars.put(&quot;JoPstdAm&quot;, Integer.toString(amount));


Random random = new Random();
use(groovy.time.TimeCategory) {
def TimeStampUnformatted = new Date() - (random.nextInt(120)+24).hour

def AuTrTm = TimeStampUnformatted.format(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&quot;)
vars.put(&quot;AuATm&quot;, AuTrTm);
vars.put(&quot;AuADt&quot;, AuTrTm);

def gracePeriodTimeStamp = TimeStampUnformatted + 10.hour
def transDateIn24hr = gracePeriodTimeStamp.format(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&quot;)
vars.put(&quot;transDateIn24hr&quot;, transDateIn24hr)   
}


int amount = random.nextInt(1000) + 500;

vars.put(&quot;JoPstdAm&quot;, Integer.toString(amount));




</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GenerateRandomValues" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String JoSysGenRefNr = &quot;00&quot; + &quot;${__RandomString(20,0123456789,)}&quot;;
String transComment = &quot;${__RandomString(10,abcdefjhigklmn0123456789,)}&quot;;

vars.put(&quot;JoSysGenRefNr&quot;, JoSysGenRefNr);
vars.put(&quot;JxTxnComment&quot;, transComment);
//vars.put(&quot;approvalcode&quot;, &quot;${__RandomString(6,0123456789,)}&quot;)

Random random = new Random();
int amount = random.nextInt(10) + 10;

vars.put(&quot;TransAmt&quot;, Integer.toString(amount));</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="GetAccountProxy" enabled="true">
          <stringProp name="TestPlan.comments">Refer to GetReversedNegativeAccountBalanceTransaction SP</stringProp>
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">
--distinct
Select  top ${NUMBER_OF_ACCOUNTS} RTRIM(a.ACIAccountExternalID) as ACIAccountExternalID, 
RTRIM(PaymentIdentifierProxy) as PaymentIdentifierProxy, a.AccountIdentifier, ab.AccountBalanceIdentifier,RTRIM(AccountBalanceExternalProxy) as AccountBalanceExternalProxy
From AccountBalance As ab with(nolock)
inner Join Account As a with(nolock)
On ab.AccountKey = a.AccountKey
INNER JOIN Product AS p with(nolock)
ON p.ProductKey=a.ProductKey
INNER JOIN AccountBillCycle abc with (NOLOCK) 
ON abc.AccountKey = a.AccountKey
inner Join AccountHolder As ah with(nolock)
On ah.AccountKey = a.AccountKey
inner Join AccountHolder_PaymentIdentifier As ahpi with(nolock)
On ahpi.AccountHolderKey = ah.AccountHolderKey
inner Join PaymentIdentifier As pid with(nolock)
On pid.PaymentIdentifierKey = ahpi.PaymentIdentifierKey
join  PaymentInstrument pin (nolock) on pin.PaymentIdentifierKey=pid.PaymentIdentifierKey
join PaymentInstrumentType pit (nolock) on pin.PaymentInstrumentTypeKey=pit.PaymentInstrumentTypeKey
join PaymentInstrumentStatus pis (nolock) on pis.PaymentInstrumentStatusKey=pin.PaymentInstrumentStatusKey
--inner join PostTransaction PIT with(NOLOCK) 
--ON PIT.AccountIdentifier = A.AccountIdentifier
where p.Productkey=69
and  a.AccountIdentifier=&apos;${AccountIdentifier}&apos;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">ACIAccountExternalID,PaymentIdentifierProxy,AccountIdentifier,AccountBalanceIdentifier,AccountBalanceExternalProxy</stringProp>
          <stringProp name="resultVariable">AccountList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Check existing reversal trans record" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Select count(*) As ExistingCount
from PostTransaction where AccountIdentifier=&apos;${AccountIdentifier}&apos; and  ApprovalCode=&apos;${ApprovalCode}&apos; and RetrievalReferenceNumber=&apos;${RetrievalReferenceNumber}&apos;


</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">ExistingCount</stringProp>
          <stringProp name="resultVariable">ExistingCountLst</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(&quot;${ExistingCount_1}&quot; == &quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PutPostNetworkMessage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1&quot; xmlns:v11=&quot;http://greendotcorp.com/gdqa/ipsmqsimulator/entity//message/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:PutPostNetworkMessage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;v1:request&gt;&#xd;
            &lt;v11:IBMMQType&gt;AWS&lt;/v11:IBMMQType&gt;&#xd;
            &lt;v11:MqHdrOwnerLevel1&gt;${MqHdrOwnerLevel}&lt;/v11:MqHdrOwnerLevel1&gt;&#xd;
            &lt;v11:QueueName&gt;ACI.FINANCIAL.REQ&lt;/v11:QueueName&gt;&#xd;
            &lt;v11:AcCd&gt;${ACIAccountExternalID_1}&lt;/v11:AcCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:SnCycBgnDt&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,,P31D,,)}&lt;/v11:SnCycBgnDt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PlCardProxy&gt;${PaymentIdentifierProxy_1}&lt;/v11:PlCardProxy&gt;&#xd;
            &lt;v11:JoPstdAm&gt;${JoPstdAm}&lt;/v11:JoPstdAm&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:AcCurCd&gt;USD&lt;/v11:AcCurCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoTxnSign&gt;DR&lt;/v11:JoTxnSign&gt;&#xd;
            &lt;v11:JoUcsTxnCd&gt;4147&lt;/v11:JoUcsTxnCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TrRecvTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TrRecvTs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:GuPstgDt&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:GuPstgDt&gt;&#xd;
            &lt;v11:JoSrceCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:JoCatgCd xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBalSign&gt;DR&lt;/v11:LedgerBalSign&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:LedgerBal&gt;${__Random(5000,90000,)}&lt;/v11:LedgerBal&gt;&#xd;
            &lt;v11:AvailBal&gt;${__Random(1000,50000,)}&lt;/v11:AvailBal&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TcCrtTs&gt;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS,,P-2D,,)}&lt;/v11:TcCrtTs&gt;&#xd;
            &lt;v11:TcUpdtTs&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSS&apos;-07:00&apos;,)}&lt;/v11:TcUpdtTs&gt;&#xd;
            &lt;v11:PmVisaArn&gt;${__javaScript(${__RandomString(6,0123456789,)}+&quot;-&quot;+${__RandomString(12,0123456789,)}+&quot;-&quot;+${__RandomString(6,0123456789,)},)}&lt;/v11:PmVisaArn&gt;&#xd;
            &lt;v11:MqHdrEventDisp&gt;ADD&lt;/v11:MqHdrEventDisp&gt;&#xd;
            &lt;v11:AvailBalSign&gt;DR&lt;/v11:AvailBalSign&gt;&#xd;
            &lt;v11:De1MsgType&gt;1200&lt;/v11:De1MsgType&gt;&#xd;
            &lt;v11:De3ProcessingCode&gt;${__RandomString(6,0123456789,)}&lt;/v11:De3ProcessingCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De4TxnAmt&gt;${JoPstdAm}&lt;/v11:De4TxnAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De5ReconAmt&gt;${JoPstdAm}&lt;/v11:De5ReconAmt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De6BillingAmt&gt;${JoPstdAm}&lt;/v11:De6BillingAmt&gt;&#xd;
            &lt;v11:De12TxnDtTm&gt;${__time(yyMMddHHmmss,)}&lt;/v11:De12TxnDtTm&gt;&#xd;
            &lt;v11:De22PtOfSrvcDataCd&gt;010011111110&lt;/v11:De22PtOfSrvcDataCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De25MsgReasonCd&gt;6638&lt;/v11:De25MsgReasonCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De26CrdAccptrBusCd&gt;5912&lt;/v11:De26CrdAccptrBusCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:DE28ReconDt xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De31AcqrRefData&gt;${__RandomString(23,0123456789,)}&lt;/v11:De31AcqrRefData&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De32AcqrngInstId&gt;${__RandomString(11,0123456789,)}&lt;/v11:De32AcqrngInstId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De37RtvlRefNbr&gt;${__RandomString(12,0123456789,)}&lt;/v11:De37RtvlRefNbr&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De38ApprovalCd&gt;${ApprovalCode}&lt;/v11:De38ApprovalCd&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De41CrdAccptrTermId&gt;NONUSADOME&lt;/v11:De41CrdAccptrTermId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De42CrdAccptrIdCode&gt;${__RandomString(15,0123456789,)}&lt;/v11:De42CrdAccptrIdCode&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De43CrdAccptrNmLoc&gt;GreenDot Corporation TestE Main PasadenaThisFillerForPositionFourtyOneToEightyThree9110700000CA USA&lt;/v11:De43CrdAccptrNmLoc&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:De49CurCodeTxnX&gt;USD&lt;/v11:De49CurCodeTxnX&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:CashbackAmt&gt;0&lt;/v11:CashbackAmt&gt;           &#xd;
            &lt;v11:AuthMatchedInd&gt;Y&lt;/v11:AuthMatchedInd&gt;&#xd;
            &lt;v11:AuATm&gt;${__groovy(vars.get(&quot;AuATm&quot;);,)}&lt;/v11:AuATm&gt;&#xd;
            &lt;v11:AuADt&gt;${__groovy(vars.get(&quot;AuADt&quot;);,)}&lt;/v11:AuADt&gt;           &#xd;
            &lt;v11:PmAcqNtwkId&gt;GDOT&lt;/v11:PmAcqNtwkId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmMultiClrSeqNum&gt;0&lt;/v11:PmMultiClrSeqNum&gt;&#xd;
            &lt;v11:PmMultiClrSeqCnt&gt;0&lt;/v11:PmMultiClrSeqCnt&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PanUnqRef xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmtActRefNum xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:PmSpndAlertCde xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:OnbhlfSrvData xsi:nil=&quot;true&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;v11:TknTxnId&gt;${__RandomString(64,0123456789abcdef,)}&lt;/v11:TknTxnId&gt;&#xd;
            &lt;v11:PosEntModeCd&gt;&lt;/v11:PosEntModeCd&gt;&#xd;
            &lt;v11:De055Cvm&gt;&lt;/v11:De055Cvm&gt;&#xd;
            &lt;v11:De055Tvr&gt;&lt;/v11:De055Tvr&gt;&#xd;
         &lt;/v1:request&gt;&#xd;
      &lt;/v1:PutPostNetworkMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SimulatorTools_Server}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1608955780">SUCCESS&lt;/ResponseCode</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value"> &quot;http://greendotcorp.com/gdqa/ipsmqsimulator/service/v1/IIPSMQSimulator/PutPostNetworkMessage&quot; </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8 </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Update reversal trans record" enabled="true">
            <stringProp name="dataSource">GBOS</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">declare @existingcount int;
set @existingcount =0;

Select @existingcount = count(*) from PostTransaction 
where AccountIdentifier=&apos;${AccountIdentifier}&apos; and  ApprovalCode=&apos;${ApprovalCode}&apos; and RetrievalReferenceNumber=&apos;${RetrievalReferenceNumber}&apos;

if @existingcount=1
begin
	update posttransaction 
	set RetrievalReferenceNumber=&apos;${RetrievalReferenceNumber}&apos;, TransactionAmount=${TransactionAmount}
	where AccountIdentifier=&apos;${AccountIdentifier}&apos; and  ApprovalCode=&apos;${ApprovalCode}&apos;
end
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="false">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

// initialize a Random object somewhere; you should only need one
Random random = new Random();

FileWriter fstream = new FileWriter(vars.get (&quot;RootDataDirectory&quot;) + File.separator  + &quot;ODReversalAccountList_ACI.csv&quot;,true);
//AccountIdentifier,TransactionAmount,ApprovalCode,RetrievalReferenceNumber
for (var row : vars.getObject(&quot;AccountList&quot;))
{
	fstream.write( row.get(&quot;AccountIdentifier&quot;) +  &quot;,&quot; + row.get(&quot;TransactionAmount&quot;) +  &quot;,&quot; + row.get(&quot;ApprovalCode&quot;) + &quot;,&quot; + row.get(&quot;RetrievalReferenceNumber&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
 </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GetAccountList-ForODReversal" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get cte_NotMatched" enabled="true">
          <stringProp name="TestPlan.comments">Refer to GetReversedNegativeAccountBalanceTransaction SP</stringProp>
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT n.AccountIdentifier,
               n.TransactionAmount,
               n.ApprovalCode,
               n.RetrievalReferenceNumber
        FROM dbo.NegativeAccountBalanceTransaction n
            LEFT JOIN dbo.NegativeAccountBalanceTransaction r
                ON r.AccountIdentifier = n.AccountIdentifier
                   AND r.TransactionAmount = n.TransactionAmount
                   AND r.ApprovalCode = n.ApprovalCode
                   AND r.RetrievalReferenceNumber = n.RetrievalReferenceNumber
                   AND n.NegativeAccountBalanceTransactionKey &lt;&gt; r.NegativeAccountBalanceTransactionKey
        WHERE n.ProcessorTransactionDate &gt;= DATEADD(dd, -7, GETDATE()) --go back 7 days
              AND n.ProcessorTransactionDate &lt;= GETDATE()
              AND n.IsReversal = 0
              AND r.NegativeAccountBalanceTransactionKey IS NULL</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">AccountIdentifier,TransactionAmount,ApprovalCode,RetrievalReferenceNumber</stringProp>
          <stringProp name="resultVariable">AccountList</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append results to output file" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

// initialize a Random object somewhere; you should only need one
Random random = new Random();

FileWriter fstream = new FileWriter(vars.get (&quot;RootDataDirectory&quot;) + File.separator  + &quot;ODReversalAccountList_ACI.csv&quot;,true);
//AccountIdentifier,TransactionAmount,ApprovalCode,RetrievalReferenceNumber
for (var row : vars.getObject(&quot;AccountList&quot;))
{
	fstream.write( row.get(&quot;AccountIdentifier&quot;) +  &quot;,&quot; + row.get(&quot;TransactionAmount&quot;) +  &quot;,&quot; + row.get(&quot;ApprovalCode&quot;) + &quot;,&quot; + row.get(&quot;RetrievalReferenceNumber&quot;) + System.getProperty(&quot;line.separator&quot;));
}
fstream.close();
 </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
