<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="GBOS-TJF-DataGeneration" enabled="true">
      <stringProp name="TestPlan.comments">602294; 107597;51425;20653 </stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="RecordCount" elementType="Argument">
            <stringProp name="Argument.name">RecordCount</stringProp>
            <stringProp name="Argument.value">1000000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DataFileFolder" elementType="Argument">
            <stringProp name="Argument.name">DataFileFolder</stringProp>
            <stringProp name="Argument.value">C:/Performance/data</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TemplateFile_Exp" elementType="Argument">
            <stringProp name="Argument.name">TemplateFile_Exp</stringProp>
            <stringProp name="Argument.value">PTS-MTF-GBOS-TRANSACTIONJOURNALFILE-EXPANDED-20k.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TemplateFile_Delta" elementType="Argument">
            <stringProp name="Argument.name">TemplateFile_Delta</stringProp>
            <stringProp name="Argument.value">PTS-GBOS-TRANSACTIONJOURNALFILE-DELTA-1m.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="DefaultProxy" elementType="Argument">
            <stringProp name="Argument.name">DefaultProxy</stringProp>
            <stringProp name="Argument.value">8112492403</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GBOSDB" elementType="Argument">
            <stringProp name="Argument.name">GBOSDB</stringProp>
            <stringProp name="Argument.value">PFBOSDBAG.awsnp.gdotawsnp.com</stringProp>
            <stringProp name="Argument.desc">QABOSDBAG.awsnp.gdotawsnp.com;PFBOSDBAG.awsnp.gdotawsnp.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="GBOSDatabase" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">GBOS</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${GBOSDB}:1433;databaseName=GBOS</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">G33Nff4%$^</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">qa_automation</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TG - FileProcessing-Expanded" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config-tjf-file" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/Performance/data/PROD-IPS-TransactionJournalFile-Expanded-101020-013806.txt</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">EachLine</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config-ProxyFile" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/Performance/data/TJF_CardProxyList-gbr.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">AccountProxy,CardProxy,ProgramCode,MqHdrOwnerLevel1</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler-only header tailer" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.services.FileServer;
//log.info(&quot;${eachline}&quot;);
//${__time(MMddYY,)}
FileWriter fstream = new FileWriter(&quot;C:/Performance/data/MTF-IPS-TransactionJournalFile-Expanded-&quot; +&quot;102020&quot;+&quot;-&quot;+&quot;${__time(hhmmss,)}&quot;+&quot;.txt&quot;);
File tjfSource = new File(&quot;C:/Performance/data/MTF-IPS-TransactionJournalFile-Expanded-101520-114558.txt&quot;);
File cardProxyFile = new File(&quot;C:/Performance/data/QA5_CardProxyList.csv&quot;);
//def lines = tjfSource.readLines();
//log.info(lines.size());

try {
   FileInputStream inputStream = new FileInputStream(tjfSource);
   Scanner sc = new Scanner(inputStream, &quot;UTF-8&quot;);
   FileInputStream inputStream_c = new FileInputStream(cardProxyFile);
   Scanner sc_c = new Scanner(inputStream_c, &quot;UTF-8&quot;);
   
 
  def tempProxy= &quot;${DefaultProxy}&quot;;
  tempProxy = tempProxy.padRight(19, &quot; &quot;);
  /*
   * 01, 605, 19, 623
	02, 528,19, 546
	03, 944, 19, 962
	04,492, 19,510
	05,943,19,961
	08, 953, 19,971
	10, 227,19
		246, 19
	11,220, 19, 238
   */
  //def count = 1;// &amp;&amp; count&lt;30
  def currentTime =&quot;201020&quot; + &quot;${__time(hhmmss,)}&quot;; //&quot;${__time(YYMMddhhmmss,)}&quot;;

  def linesize=0;
  
  while (sc.hasNextLine()) {
      String line = sc.nextLine();
      String startWith = line.substring(0,2);

      if(sc_c.hasNextLine()){
      	tempProxy = sc_c.nextLine().padRight(19, &quot; &quot;);
      }

      //log.info(&quot;tempProxy:&quot; + tempProxy);
      switch (startWith)
	{
	case &quot;00&quot;:
		log.info(&quot;00&quot;);
		line = line.substring(0, 56) + currentTime + line.substring(68);
		log.info(line);
		break;
	case &quot;99&quot;:
		log.info(&quot;99&quot;);
		line = line.substring(0, 56) + currentTime + line.substring(68);
		log.info(line);
		break;
	/*case &quot;01&quot;:
		//log.info(&quot;01&quot;);
      	line = line.substring(0, 604) + tempProxy + line.substring(623); 
		break;
	case &quot;02&quot;:
		//log.info(&quot;02&quot;);
     	line = line.substring(0, 527) + tempProxy + line.substring(546);
		break;
	case &quot;03&quot;:
		//log.info(&quot;03&quot;);
     	line = line.substring(0, 943) + tempProxy + line.substring(962); 
		break;
	case &quot;04&quot;:
		//log.info(&quot;04&quot;);
     	line = line.substring(0, 491) + tempProxy + line.substring(510); 
		break;
	case &quot;05&quot;:
		//log.info(&quot;05&quot;);
     	line = line.substring(0, 942) + tempProxy + line.substring(961); 
		break;
	case &quot;08&quot;:
		//log.info(&quot;08&quot;);
     	line = line.substring(0, 952) + tempProxy + line.substring(971); 
		break;
	case &quot;11&quot;:
		//log.info(&quot;11&quot;);
     	line = line.substring(0, 942) + tempProxy + line.substring(961); 
		break;*/
	default:
		//log.info &quot;Starts With:&quot; + startWith;
		break;
	}
	fstream.write(line + System.getProperty(&quot;line.separator&quot;));
	linesize++;
	//count++;
   } 

   log.info (&quot;total size:&quot; +linesize);
   inputStream.close();
   fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler-full -Expanded" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.services.FileServer;
//log.info(&quot;${eachline}&quot;);

//FileWriter fstream = new FileWriter(&quot;C:/Performance/data/PTS-MTF-GBOS-TransactionJournalFile-Expanded-020321-&quot;+ &quot;${__time(hhmmss,)}&quot;+&quot;.txt&quot;);
FileWriter fstream = new FileWriter(&quot;${DataFileFolder}&quot; +&quot;/PTS-MTF-GBOS-TransactionJournalFile-Expanded-&quot; + &quot;${__time(MMddYY,)}&quot; + &quot;-&quot; + &quot;${__time(hhmmss,)}&quot;+&quot;.txt&quot;);
File tjfSource = new File(&quot;${DataFileFolder}&quot; + &quot;/TJF/&quot; + &quot;${TemplateFile_Exp}&quot;); 
//PTS-MTF-GBOS-TRANSACTIONJOURNALFILE-EXPANDED-111420-124330-viv.txt
//PTS-GBOS-TRANSACTIONJOURNALFILE-EXPANDED-010721-015839.txt -- big file
File cardProxyFile = new File(&quot;${DataFileFolder}&quot; + &quot;/TJF_CardProxyList-mixed.csv&quot;);

try {
   FileInputStream inputStream = new FileInputStream(tjfSource);
   Scanner sc = new Scanner(inputStream, &quot;UTF-8&quot;);
   FileInputStream inputStream_c = new FileInputStream(cardProxyFile);
   Scanner sc_c = new Scanner(inputStream_c, &quot;UTF-8&quot;);
   
 
  def tempProxy= &quot;${DefaultProxy}&quot;;
  tempProxy = tempProxy.padRight(19, &quot; &quot;);
  def defMqHdrOwnerLevel1 = &quot;BS001&quot;;
  def totalRecCount = (&quot;${RecordCount}&quot;).padLeft(7,&apos;0&apos;);	//&quot;0000007&quot;;
  int intTotalRecCount = Integer.parseInt(&quot;${RecordCount}&quot;);
  /*
   * 01, 605, 19, 623
	02, 528,19, 546
	03, 944, 19, 962
	04,492, 19,510
	05,943,19,961
	08, 953, 19,971
	10, 227,19
		246, 19
	11,220, 19, 238
   */
  def count = 0;// &amp;&amp; count&lt;30
  def currentTime =&quot;${__time(YYMMddhhmmss,)}&quot;;		//&quot;210202&quot; + &quot;${__time(hhmmss,)}&quot;
  def tempLst;

  //5000002
  while (sc.hasNextLine() &amp;&amp; count &lt; intTotalRecCount+1) {
      String line = sc.nextLine();
      String startWith = line.substring(0,2);

      if(sc_c.hasNextLine()){
      	tempLst = sc_c.nextLine().split(&apos;,&apos;);
      	tempProxy = tempLst[1].trim().padRight(19, &quot; &quot;);
      	defMqHdrOwnerLevel1 = tempLst[3].trim();
      	log.info(&quot;defMqHdrOwnerLevel1:&quot; + defMqHdrOwnerLevel1);
      }
      
      switch (startWith)
	{
	case &quot;00&quot;:
		log.info(&quot;00&quot;);
		line = line.substring(0, 56) + currentTime + line.substring(68);
		log.info(line);
		break;
	/*case &quot;99&quot;:
		log.info(&quot;99&quot;);
		line = line.substring(0, 56) + currentTime + line.substring(68);
		log.info(line);
		break;*/
	case &quot;01&quot;:
		log.info(&quot;01&quot;);
		line = line.substring(0, 37) + defMqHdrOwnerLevel1 + line.substring(42);
		line = line.substring(0, 235) + tempProxy.trim() + line.substring(245);  
      	line = line.substring(0, 604) + tempProxy + line.substring(623); 
      	//line = line.substring(0,1013) + &quot;000000000055110000000000003222&quot; + line.substring(1043);
		break;
	case &quot;02&quot;:
		log.info(&quot;02&quot;);
		line = line.substring(0, 37) + defMqHdrOwnerLevel1 + line.substring(42);
     	line = line.substring(0, 527) + tempProxy + line.substring(546);
		break;
	case &quot;03&quot;:
		log.info(&quot;03&quot;);
		line = line.substring(0, 37) + defMqHdrOwnerLevel1 + line.substring(42);
     	line = line.substring(0, 943) + tempProxy + line.substring(962); 
		break;
	case &quot;04&quot;:
		log.info(&quot;04&quot;);
		line = line.substring(0, 37) + defMqHdrOwnerLevel1 + line.substring(42);
     	line = line.substring(0, 491) + tempProxy + line.substring(510); 
		break;
	case &quot;05&quot;:
		log.info(&quot;05&quot;);
		line = line.substring(0, 37) + defMqHdrOwnerLevel1 + line.substring(42);
     	line = line.substring(0, 942) + tempProxy + line.substring(961); 
		break;
	case &quot;08&quot;:
		log.info(&quot;08&quot;);
		line = line.substring(0, 37) + defMqHdrOwnerLevel1 + line.substring(42);
     	line = line.substring(0, 952) + tempProxy + line.substring(971); 
		break;
	case &quot;10&quot;:
		log.info(&quot;10&quot;);
		line = line.substring(0, 37) + defMqHdrOwnerLevel1 + line.substring(42);
     	line = line.substring(0, 226) + tempProxy + line.substring(245); 
		break;
	case &quot;11&quot;:
		log.info(&quot;11&quot;);
		line = line.substring(0, 37) + defMqHdrOwnerLevel1 + line.substring(42);
     	line = line.substring(0, 942) + tempProxy + line.substring(961); 
		break;
	default:
		log.info &quot;Starts With:&quot; + startWith;
		break;
	}

	if(line.size()&gt;2000)
		line= line.substring(0, 2000);

	fstream.write(line + System.getProperty(&quot;line.separator&quot;));

	count++;
   } 

def footer = &quot;99                                                  TJFX&quot; + currentTime +&quot;IPS TJF EXTRACT00000000&quot; +totalRecCount+&quotquot;
   fstream.write(footer + System.getProperty(&quot;line.separator&quot;));
   
   inputStream.close();
   fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TG - FileProcessing-Delta" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config-tjf-file" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/Performance/data/PROD-IPS-TransactionJournalFile-Expanded-101020-013806.txt</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">EachLine</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config-ProxyFile" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/Performance/data/TJF_CardProxyList-gbr.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">AccountProxy,CardProxy,ProgramCode,MqHdrOwnerLevel1</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler-only header tailer" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.services.FileServer;
//log.info(&quot;${eachline}&quot;);
//${__time(MMddYY,)}
FileWriter fstream = new FileWriter(&quot;C:/Performance/data/MTF-IPS-TransactionJournalFile-Expanded-&quot; +&quot;102020&quot;+&quot;-&quot;+&quot;${__time(hhmmss,)}&quot;+&quot;.txt&quot;);
File tjfSource = new File(&quot;C:/Performance/data/MTF-IPS-TransactionJournalFile-Expanded-101520-114558.txt&quot;);
File cardProxyFile = new File(&quot;C:/Performance/data/QA5_CardProxyList.csv&quot;);
//def lines = tjfSource.readLines();
//log.info(lines.size());

try {
   FileInputStream inputStream = new FileInputStream(tjfSource);
   Scanner sc = new Scanner(inputStream, &quot;UTF-8&quot;);
   FileInputStream inputStream_c = new FileInputStream(cardProxyFile);
   Scanner sc_c = new Scanner(inputStream_c, &quot;UTF-8&quot;);
   
 
  def tempProxy= &quot;${DefaultProxy}&quot;;
  tempProxy = tempProxy.padRight(19, &quot; &quot;);
  /*
   * 01, 605, 19, 623
	02, 528,19, 546
	03, 944, 19, 962
	04,492, 19,510
	05,943,19,961
	08, 953, 19,971
	10, 227,19
		246, 19
	11,220, 19, 238
   */
  //def count = 1;// &amp;&amp; count&lt;30
  def currentTime =&quot;201020&quot; + &quot;${__time(hhmmss,)}&quot;; //&quot;${__time(YYMMddhhmmss,)}&quot;;

  def linesize=0;
  
  while (sc.hasNextLine()) {
      String line = sc.nextLine();
      String startWith = line.substring(0,2);

      if(sc_c.hasNextLine()){
      	tempProxy = sc_c.nextLine().padRight(19, &quot; &quot;);
      }

      //log.info(&quot;tempProxy:&quot; + tempProxy);
      switch (startWith)
	{
	case &quot;00&quot;:
		log.info(&quot;00&quot;);
		line = line.substring(0, 56) + currentTime + line.substring(68);
		log.info(line);
		break;
	case &quot;99&quot;:
		log.info(&quot;99&quot;);
		line = line.substring(0, 56) + currentTime + line.substring(68);
		log.info(line);
		break;
	/*case &quot;01&quot;:
		//log.info(&quot;01&quot;);
      	line = line.substring(0, 604) + tempProxy + line.substring(623); 
		break;
	case &quot;02&quot;:
		//log.info(&quot;02&quot;);
     	line = line.substring(0, 527) + tempProxy + line.substring(546);
		break;
	case &quot;03&quot;:
		//log.info(&quot;03&quot;);
     	line = line.substring(0, 943) + tempProxy + line.substring(962); 
		break;
	case &quot;04&quot;:
		//log.info(&quot;04&quot;);
     	line = line.substring(0, 491) + tempProxy + line.substring(510); 
		break;
	case &quot;05&quot;:
		//log.info(&quot;05&quot;);
     	line = line.substring(0, 942) + tempProxy + line.substring(961); 
		break;
	case &quot;08&quot;:
		//log.info(&quot;08&quot;);
     	line = line.substring(0, 952) + tempProxy + line.substring(971); 
		break;
	case &quot;11&quot;:
		//log.info(&quot;11&quot;);
     	line = line.substring(0, 942) + tempProxy + line.substring(961); 
		break;*/
	default:
		//log.info &quot;Starts With:&quot; + startWith;
		break;
	}
	fstream.write(line + System.getProperty(&quot;line.separator&quot;));
	linesize++;
	//count++;
   } 

   log.info (&quot;total size:&quot; +linesize);
   inputStream.close();
   fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler-full -Delta" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.services.FileServer;
//log.info(&quot;${eachline}&quot;);

//FileWriter fstream = new FileWriter(&quot;C:/Performance/data/PTS-MTF-GBOS-TransactionJournalFile-Expanded-020321-&quot;+ &quot;${__time(hhmmss,)}&quot;+&quot;.txt&quot;);
FileWriter fstream = new FileWriter(&quot;${DataFileFolder}&quot; +&quot;/PTS-MTF-GBOS-TRANSACTIONJOURNALFILE-DELTA-&quot; + &quot;${__time(MMddYY,)}&quot; + &quot;-&quot; + &quot;${__time(hhmmss,)}&quot;+&quot;.txt&quot;);
File tjfSource = new File(&quot;${DataFileFolder}&quot; + &quot;/TJF/&quot; + &quot;${TemplateFile_Delta}&quot;); 
//PTS-MTF-GBOS-TRANSACTIONJOURNALFILE-EXPANDED-111420-124330-viv.txt
//PTS-GBOS-TRANSACTIONJOURNALFILE-EXPANDED-010721-015839.txt -- big file
File cardProxyFile = new File(&quot;${DataFileFolder}&quot; + &quot;/TJF_CardProxyList-mixed-11162021.csv&quot;);

try {
   FileInputStream inputStream = new FileInputStream(tjfSource);
   Scanner sc = new Scanner(inputStream, &quot;UTF-8&quot;);
   FileInputStream inputStream_c = new FileInputStream(cardProxyFile);
   Scanner sc_c = new Scanner(inputStream_c, &quot;UTF-8&quot;);
   
 
  def tempProxy= &quot;${DefaultProxy}&quot;;
  tempProxy = tempProxy.padRight(19, &quot; &quot;);
  def tempAccProxy=&quot;16400012475368&quot;;
  
  def defMqHdrOwnerLevel1 = &quot;BS001&quot;;
  def totalRecCount = (&quot;${RecordCount}&quot;).padLeft(7,&apos;0&apos;);	//&quot;0000007&quot;;
  int intTotalRecCount = Integer.parseInt(&quot;${RecordCount}&quot;);
  /*
   * 01, 605, 19, 623
	02, 528,19, 546
	03, 944, 19, 962
	04,492, 19,510
	05,943,19,961
	08, 953, 19,971
	10, 227,19
		246, 19
	11,220, 19, 238
   */
  def count = 0;// &amp;&amp; count&lt;30
  def currentTime =&quot;${__time(YYMMddhhmmss,)}&quot;;		//&quot;210202&quot; + &quot;${__time(hhmmss,)}&quot;
  def tempLst;

  //5000002
  while (sc.hasNextLine() &amp;&amp; count &lt; intTotalRecCount+1) {
      String line = sc.nextLine();
      String startWith = line.substring(0,2);

      if(sc_c.hasNextLine()){
      	tempLst = sc_c.nextLine().split(&apos;,&apos;);
      	tempAccProxy = tempLst[0].trim();
      	tempProxy = tempLst[1].trim().padRight(19, &quot; &quot;);
      	defMqHdrOwnerLevel1 = tempLst[3].trim();
      	log.info(&quot;defMqHdrOwnerLevel1:&quot; + defMqHdrOwnerLevel1);
      }
      
      switch (startWith)
	{
	case &quot;00&quot;:
		log.info(&quot;00&quot;);
		line = line.substring(0, 56) + currentTime + line.substring(68);
		log.info(line);
		break;
	/*case &quot;99&quot;:
		log.info(&quot;99&quot;);
		line = line.substring(0, 56) + currentTime + line.substring(68);
		log.info(line);
		break;*/
	case &quot;01&quot;:
		log.info(&quot;01&quot;);
		line = line.substring(0, 37) + defMqHdrOwnerLevel1 + line.substring(42);
		line = line.substring(0, 235) + tempProxy.trim() + line.substring(245);  
      	line = line.substring(0, 604) + tempProxy + line.substring(623); 
      	//line = line.substring(0,1013) + &quot;000000000055110000000000003222&quot; + line.substring(1043);
		break;
	case &quot;02&quot;:
		log.info(&quot;02&quot;);
		line = line.substring(0, 37) + defMqHdrOwnerLevel1 + line.substring(42);
     	line = line.substring(0, 527) + tempProxy + line.substring(546);
		break;
	case &quot;03&quot;:
		log.info(&quot;03&quot;);
		line = line.substring(0, 37) + defMqHdrOwnerLevel1 + line.substring(42);
     	line = line.substring(0, 943) + tempProxy + line.substring(962); 
		break;
	case &quot;04&quot;:
		log.info(&quot;04&quot;);
		line = line.substring(0, 37) + defMqHdrOwnerLevel1 + line.substring(42);
     	line = line.substring(0, 491) + tempProxy + line.substring(510); 
		break;
	case &quot;05&quot;:
		log.info(&quot;05&quot;);
		line = line.substring(0, 37) + defMqHdrOwnerLevel1 + line.substring(42);
     	line = line.substring(0, 942) + tempProxy + line.substring(961); 
		break;
	case &quot;08&quot;:
		log.info(&quot;08&quot;);
		line = line.substring(0, 14) + tempAccProxy + line.substring(28);
		line = line.substring(0, 37) + defMqHdrOwnerLevel1 + line.substring(42);
     	line = line.substring(0, 952) + tempProxy + line.substring(971); 
		break;
	case &quot;10&quot;:
		log.info(&quot;10&quot;);
		line = line.substring(0, 37) + defMqHdrOwnerLevel1 + line.substring(42);
     	line = line.substring(0, 226) + tempProxy + line.substring(245); 
		break;
	case &quot;11&quot;:
		log.info(&quot;11&quot;);
		line = line.substring(0, 37) + defMqHdrOwnerLevel1 + line.substring(42);
     	line = line.substring(0, 942) + tempProxy + line.substring(961); 
		break;
	default:
		log.info &quot;Starts With:&quot; + startWith;
		break;
	}

	if(line.size()&gt;3000)
		line= line.substring(0, 3000);

	fstream.write(line + System.getProperty(&quot;line.separator&quot;));

	count++;
   } 

   log.info(&quot;count:&quot; +count);

def footer = &quot;99                                                  TJFX&quot; + currentTime +&quot;IPS TJF EXTRACT00000000&quot; +totalRecCount+&quot;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      &quot;

   fstream.write(footer + System.getProperty(&quot;line.separator&quot;));
   
   inputStream.close();
   fstream.close();
}catch (Throwable ex)
{
	log.error(&quot;Error in Apending results to output files&quot;, ex);
	throw ex;
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TG - DB-Read-Write-Update" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">1200</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request-Read-PAB" enabled="false">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">use GBOS
select top 1 * from ProcessorAccountBalanceSnapshot order by newid()</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request-Update-PAB" enabled="false">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">use GBOS
update top (1) ProcessorAccountBalanceSnapshot set changeby=&apos;NextEstate\svc_bos_core&apos;
where processoraccountbalancesnapshotkey = (select top 1 ProcessorAccountBalanceSnapshotkey from ProcessorAccountBalanceSnapshot order by newid())</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request-Read-AB" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">use GBOS
select top 1 * from AccountBalance order by newid()
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request-Update -AB" enabled="true">
          <stringProp name="dataSource">GBOS</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">use GBOS
update top (1) AccountBalance set changeby=&apos;NEXTESTATE\vwu&apos;
where AccountBalanceKey = (select top 1 AccountBalanceKey from AccountBalance order by newid())</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
